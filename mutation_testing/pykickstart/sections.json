{"work-parameters": {"1": {"test-runner": "nose", "timeout": 2.8176099999999997, "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"]}}, "work-items": {"39": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -33,7 +33,7 @@", "     @property", "     def seen(self):", "         'This property is given for consistency with KickstartCommand objects\\n           only.  It simply returns whether timesSeen is non-zero.\\n        '", "-        return (self.timesSeen > 0)", "+        return (self.timesSeen is not 0)", " ", " class NullSection(Section):", "     'This defines a section that pykickstart will recognize but do nothing\\n       with.  If the parser runs across a %section that has no object registered,\\n       it will raise an error.  Sometimes, you may want to simply ignore those\\n       sections instead.  This class is useful for that purpose.\\n    '"]]], "op-name": "replace_Gt_with_IsNot", "occurrence": 0, "module-name": "pykickstart.sections"}, "15": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 371, "occurrence": 9, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -141,7 +141,7 @@", "         op = KSOptionParser(prog=self.sectionOpen, description='\\n                            Use the %packages command to begin a kickstart file\\n                            section that lists the packages you would like to\\n                            install.\\n\\n                            Packages can be specified by group or by individual\\n                            package name. The installation program defines\\n                            several groups that contain related packages. Refer\\n                            to the repodata/*comps.xml file on the first CD-ROM\\n                            for a list of groups. Each group has an id, user\\n                            visibility value, name, description, and package\\n                            list. In the package list, the packages marked as\\n                            mandatory are always installed if the group is\\n                            selected, the packages marked default are selected\\n                            by default if the group is selected, and the packages\\n                            marked optional must be specifically selected even\\n                            if the group is selected to be installed.\\n\\n                            In most cases, it is only necessary to list the\\n                            desired groups and not individual packages. Note\\n                            that the Core group is always selected by default,\\n                            so it is not necessary to specify it in the\\n                            %packages section.\\n\\n                            The %packages section is required to be closed with\\n                            %end. Also, multiple %packages sections may be given.\\n                            This may be handy if the kickstart file is used as a\\n                            template and pulls in various other files with the\\n                            %include mechanism.\\n\\n                            Here is an example %packages selection::\\n\\n                                %packages\\n                                @X Window System\\n                                @GNOME Desktop Environment\\n                                @Graphical Internet\\n                                @Sound and Video\\n                                dhcp\\n                                %end\\n\\n                            As you can see, groups are specified, one to a line,\\n                            starting with an ``@`` symbol followed by the full\\n                            group name as given in the comps.xml file. Groups\\n                            can also be specified using the id for the group,\\n                            such as gnome-desktop. Specify individual packages\\n                            with no additional characters (the dhcp line in the\\n                            example above is an individual package).\\n\\n                            You can also specify environments using the ``@^``\\n                            prefix followed by full environment name as given in\\n                            the comps.xml file.  If multiple environments are\\n                            specified, only the last one specified will be used.\\n                            Environments can be mixed with both group\\n                            specifications (even if the given group is not part\\n                            of the specified environment) and package\\n                            specifications.\\n\\n                            Here is an example of requesting the GNOME Desktop\\n                            environment to be selected for installation::\\n\\n                                %packages\\n                                @^gnome-desktop-environment\\n                                %end\\n\\n                            Additionally, individual packages may be specified\\n                            using globs. For instance::\\n\\n                                %packages\\n                                vim*\\n                                kde-i18n-*\\n                                %end\\n\\n                            This would install all packages whose names start\\n                            with \"vim\" or \"kde-i18n-\".\\n\\n                            You can also specify which packages or groups not to\\n                            install from the default package list::\\n\\n                                %packages\\n                                -autofs\\n                                -@Sound and Video\\n                                %end\\n                            ', epilog=\"\\n                            Group-level options\\n                            -------------------\\n\\n                            In addition, group lines in the %packages section\\n                            can take the following options:\\n\\n                            ``--nodefaults``\\n\\n                                Only install the group's mandatory packages, not\\n                                the default selections.\\n\\n                            ``--optional``\\n\\n                                In addition to the mandatory and default packages,\\n                                also install the optional packages. This means all\\n                                packages in the group will be installed.\\n                            \", version=self.version)", "         op.add_argument('--excludedocs', action='store_true', default=False, help='\\n                        Do not install any of the documentation from any packages.\\n                        For the most part, this means files in /usr/share/doc*\\n                        will not get installed though it could mean other files\\n                        as well, depending on how the package was built.', introduced=FC4)", "         op.add_argument('--ignoremissing', action='store_true', default=False, help='\\n                        Ignore any packages or groups specified in the packages\\n                        section that are not found in any configured repository.\\n                        The default behavior is to halt the installation and ask\\n                        the user if the installation should be aborted or\\n                        continued. This option allows fully automated\\n                        installation even in the error case.', introduced=FC4)", "-        op.add_argument('--nobase', action='store_true', default=False, deprecated=F18, removed=F22, help='\\n                        Do not install the @base group (installed by default,\\n                        otherwise).')", "+        op.add_argument('--nobase', action='store_true', default=True, deprecated=F18, removed=F22, help='\\n                        Do not install the @base group (installed by default,\\n                        otherwise).')", "         op.add_argument('--nocore', action='store_true', default=False, introduced=F21, help='\\n                        Do not install the @core group (installed by default,\\n                        otherwise).\\n\\n                        **Omitting the core group can produce a system that is\\n                        not bootable or that cannot finish the install. Use\\n                        with caution.**')", "         op.add_argument('--ignoredeps', dest='resolveDeps', action='store_false', deprecated=FC4, removed=F9, help='')", "         op.add_argument('--resolvedeps', dest='resolveDeps', action='store_true', deprecated=FC4, removed=F9, help='')"]]], "op-name": "boolean_replacer", "occurrence": 9, "module-name": "pykickstart.sections"}, "51": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -69,7 +69,7 @@", "         if (' '.join(self._script['body']).strip() == ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "-        if (self.dataObj is not None):", "+        if (self.dataObj == None):", "             s = self.dataObj(self._script['body'], **kwargs)", "             self._resetScript()", "             self.handler.scripts.append(s)"]]], "op-name": "replace_IsNot_with_Eq", "occurrence": 0, "module-name": "pykickstart.sections"}, "45": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -33,7 +33,7 @@", "     @property", "     def seen(self):", "         'This property is given for consistency with KickstartCommand objects\\n           only.  It simply returns whether timesSeen is non-zero.\\n        '", "-        return (self.timesSeen > 0)", "+        return (self.timesSeen < 0)", " ", " class NullSection(Section):", "     'This defines a section that pykickstart will recognize but do nothing\\n       with.  If the parser runs across a %section that has no object registered,\\n       it will raise an error.  Sometimes, you may want to simply ignore those\\n       sections instead.  This class is useful for that purpose.\\n    '"]]], "op-name": "replace_Gt_with_Lt", "occurrence": 0, "module-name": "pykickstart.sections"}, "11": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 217, "occurrence": 5, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -105,7 +105,7 @@", " ", "     def _getParser(self):", "         op = ScriptSection._getParser(self)", "-        op.add_argument('--nochroot', dest='nochroot', action='store_true', default=False, introduced=FC4, help='\\n                        Allows you to specify commands that you would like to\\n                        run outside of the chroot environment.')", "+        op.add_argument('--nochroot', dest='nochroot', action='store_true', default=True, introduced=FC4, help='\\n                        Allows you to specify commands that you would like to\\n                        run outside of the chroot environment.')", "         return op", " ", "     def _resetScript(self):"]]], "op-name": "boolean_replacer", "occurrence": 5, "module-name": "pykickstart.sections"}, "50": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -33,7 +33,7 @@", "     @property", "     def seen(self):", "         'This property is given for consistency with KickstartCommand objects\\n           only.  It simply returns whether timesSeen is non-zero.\\n        '", "-        return (self.timesSeen > 0)", "+        return (self.timesSeen <= 0)", " ", " class NullSection(Section):", "     'This defines a section that pykickstart will recognize but do nothing\\n       with.  If the parser runs across a %section that has no object registered,\\n       it will raise an error.  Sometimes, you may want to simply ignore those\\n       sections instead.  This class is useful for that purpose.\\n    '"]]], "op-name": "replace_Gt_with_LtE", "occurrence": 0, "module-name": "pykickstart.sections"}, "35": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -162,7 +162,7 @@", "             self.handler.packages.handleMissing = KS_MISSING_PROMPT", "         if ns.defaultPackages:", "             self.handler.packages.default = True", "-        if (ns.instLangs is not None):", "+        if (ns.instLangs <= None):", "             self.handler.packages.instLangs = ns.instLangs", "         self.handler.packages.nocore = ns.nocore", "         self.handler.packages.multiLib = ns.multiLib"]]], "op-name": "replace_IsNot_with_LtE", "occurrence": 1, "module-name": "pykickstart.sections"}, "47": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -66,7 +66,7 @@", "         self._script['body'].append(line)", " ", "     def finalize(self):", "-        if (' '.join(self._script['body']).strip() == ''):", "+        if (' '.join(self._script['body']).strip() != ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "         if (self.dataObj is not None):"]]], "op-name": "replace_Eq_with_NotEq", "occurrence": 0, "module-name": "pykickstart.sections"}, "55": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 110, "occurrence": 2, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -33,7 +33,7 @@", "     @property", "     def seen(self):", "         'This property is given for consistency with KickstartCommand objects\\n           only.  It simply returns whether timesSeen is non-zero.\\n        '", "-        return (self.timesSeen > 0)", "+        return (self.timesSeen > 1)", " ", " class NullSection(Section):", "     'This defines a section that pykickstart will recognize but do nothing\\n       with.  If the parser runs across a %section that has no object registered,\\n       it will raise an error.  Sometimes, you may want to simply ignore those\\n       sections instead.  This class is useful for that purpose.\\n    '"]]], "op-name": "number_replacer", "occurrence": 2, "module-name": "pykickstart.sections"}, "26": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -162,7 +162,7 @@", "             self.handler.packages.handleMissing = KS_MISSING_PROMPT", "         if ns.defaultPackages:", "             self.handler.packages.default = True", "-        if (ns.instLangs is not None):", "+        if (ns.instLangs != None):", "             self.handler.packages.instLangs = ns.instLangs", "         self.handler.packages.nocore = ns.nocore", "         self.handler.packages.multiLib = ns.multiLib"]]], "op-name": "replace_IsNot_with_NotEq", "occurrence": 1, "module-name": "pykickstart.sections"}, "10": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 159, "occurrence": 4, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -60,7 +60,7 @@", "         return op", " ", "     def _resetScript(self):", "-        self._script = {'interp': '/bin/sh', 'log': None, 'errorOnFail': False, 'lineno': None, 'chroot': False, 'body': []}", "+        self._script = {'interp': '/bin/sh', 'log': None, 'errorOnFail': False, 'lineno': None, 'chroot': True, 'body': []}", " ", "     def handleLine(self, line):", "         self._script['body'].append(line)"]]], "op-name": "boolean_replacer", "occurrence": 4, "module-name": "pykickstart.sections"}, "17": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 388, "occurrence": 11, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -145,7 +145,7 @@", "         op.add_argument('--nocore', action='store_true', default=False, introduced=F21, help='\\n                        Do not install the @core group (installed by default,\\n                        otherwise).\\n\\n                        **Omitting the core group can produce a system that is\\n                        not bootable or that cannot finish the install. Use\\n                        with caution.**')", "         op.add_argument('--ignoredeps', dest='resolveDeps', action='store_false', deprecated=FC4, removed=F9, help='')", "         op.add_argument('--resolvedeps', dest='resolveDeps', action='store_true', deprecated=FC4, removed=F9, help='')", "-        op.add_argument('--default', dest='defaultPackages', action='store_true', default=False, introduced=F7, help='\\n                        Install the default package set. This corresponds to the\\n                        package set that would be installed if no other\\n                        selections were made on the package customization screen\\n                        during an interactive install.')", "+        op.add_argument('--default', dest='defaultPackages', action='store_true', default=True, introduced=F7, help='\\n                        Install the default package set. This corresponds to the\\n                        package set that would be installed if no other\\n                        selections were made on the package customization screen\\n                        during an interactive install.')", "         op.add_argument('--instLangs', default=None, introduced=F9, help='\\n                        Specify the list of languages that should be installed.\\n                        This is different from the package group level\\n                        selections, though. This option does not specify what\\n                        package groups should be installed. Instead, it controls\\n                        which translation files from individual packages should\\n                        be installed by setting RPM macros.')", "         op.add_argument('--multilib', dest='multiLib', action='store_true', default=False, introduced=F18, help='\\n                        Enable yum\\'s \"all\" multilib_policy as opposed to the\\n                        default of \"best\".')", "         op.add_argument('--excludeWeakdeps', dest='excludeWeakdeps', action='store_true', default=False, introduced=F24, help='\\n                        Do not install packages from weak dependencies. These\\n                        are packages linked to the selected package set by\\n                        Recommends and Supplements flags. By default weak\\n                        dependencies will be installed.')"]]], "op-name": "boolean_replacer", "occurrence": 11, "module-name": "pykickstart.sections"}, "2": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -162,7 +162,7 @@", "             self.handler.packages.handleMissing = KS_MISSING_PROMPT", "         if ns.defaultPackages:", "             self.handler.packages.default = True", "-        if (ns.instLangs is not None):", "+        if (ns.instLangs is None):", "             self.handler.packages.instLangs = ns.instLangs", "         self.handler.packages.nocore = ns.nocore", "         self.handler.packages.multiLib = ns.multiLib"]]], "op-name": "replace_IsNot_with_Is", "occurrence": 1, "module-name": "pykickstart.sections"}, "48": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -66,7 +66,7 @@", "         self._script['body'].append(line)", " ", "     def finalize(self):", "-        if (' '.join(self._script['body']).strip() == ''):", "+        if (' '.join(self._script['body']).strip() > ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "         if (self.dataObj is not None):"]]], "op-name": "replace_Eq_with_Gt", "occurrence": 0, "module-name": "pykickstart.sections"}, "28": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -69,7 +69,7 @@", "         if (' '.join(self._script['body']).strip() == ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "-        if (self.dataObj is not None):", "+        if (self.dataObj < None):", "             s = self.dataObj(self._script['body'], **kwargs)", "             self._resetScript()", "             self.handler.scripts.append(s)"]]], "op-name": "replace_IsNot_with_Lt", "occurrence": 0, "module-name": "pykickstart.sections"}, "9": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 158, "occurrence": 3, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -60,7 +60,7 @@", "         return op", " ", "     def _resetScript(self):", "-        self._script = {'interp': '/bin/sh', 'log': None, 'errorOnFail': False, 'lineno': None, 'chroot': False, 'body': []}", "+        self._script = {'interp': '/bin/sh', 'log': None, 'errorOnFail': True, 'lineno': None, 'chroot': False, 'body': []}", " ", "     def handleLine(self, line):", "         self._script['body'].append(line)"]]], "op-name": "boolean_replacer", "occurrence": 3, "module-name": "pykickstart.sections"}, "3": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -66,7 +66,7 @@", "         self._script['body'].append(line)", " ", "     def finalize(self):", "-        if (' '.join(self._script['body']).strip() == ''):", "+        if (' '.join(self._script['body']).strip() < ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "         if (self.dataObj is not None):"]]], "op-name": "replace_Eq_with_Lt", "occurrence": 0, "module-name": "pykickstart.sections"}, "34": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -69,7 +69,7 @@", "         if (' '.join(self._script['body']).strip() == ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "-        if (self.dataObj is not None):", "+        if (self.dataObj <= None):", "             s = self.dataObj(self._script['body'], **kwargs)", "             self._resetScript()", "             self.handler.scripts.append(s)"]]], "op-name": "replace_IsNot_with_LtE", "occurrence": 0, "module-name": "pykickstart.sections"}, "54": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 102, "occurrence": 1, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -28,7 +28,7 @@", " ", "     def handleHeader(self, lineno, args):", "         'This method is called when the opening tag for a section is seen.\\n           Not all sections will need this method, though all provided with\\n           kickstart include one.\\n\\n           Arguments:\\n\\n           args -- A list of all strings passed as arguments to the section\\n                   opening tag.\\n        '", "-        self.timesSeen += 1", "+        self.timesSeen += 2", " ", "     @property", "     def seen(self):"]]], "op-name": "number_replacer", "occurrence": 1, "module-name": "pykickstart.sections"}, "53": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 58, "occurrence": 0, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -10,7 +10,7 @@", "     'The base class for defining kickstart sections.  You are free to\\n       subclass this as appropriate.\\n\\n       Class attributes:\\n\\n       allLines    -- Does this section require the parser to call handleLine\\n                      for every line in the section, even blanks and comments?\\n       sectionOpen -- The string that denotes the start of this section.  You\\n                      must start your tag with a percent sign.\\n       timesSeen   -- This attribute is for informational purposes only.  It is\\n                      incremented every time handleHeader is called to keep\\n                      track of the number of times a section of this type is\\n                      seen.\\n    '", "     allLines = False", "     sectionOpen = ''", "-    timesSeen = 0", "+    timesSeen = 1", " ", "     def __init__(self, handler, **kwargs):", "         'Create a new Script instance.  At the least, you must pass in an\\n           instance of a baseHandler subclass.\\n\\n           Valid kwargs:\\n\\n           dataObj -- A class that should be populated by this Section.  It almost\\n                      always should be Script, or some subclass of it.\\n        '"]]], "op-name": "number_replacer", "occurrence": 0, "module-name": "pykickstart.sections"}, "38": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -33,7 +33,7 @@", "     @property", "     def seen(self):", "         'This property is given for consistency with KickstartCommand objects\\n           only.  It simply returns whether timesSeen is non-zero.\\n        '", "-        return (self.timesSeen > 0)", "+        return (self.timesSeen != 0)", " ", " class NullSection(Section):", "     'This defines a section that pykickstart will recognize but do nothing\\n       with.  If the parser runs across a %section that has no object registered,\\n       it will raise an error.  Sometimes, you may want to simply ignore those\\n       sections instead.  This class is useful for that purpose.\\n    '"]]], "op-name": "replace_Gt_with_NotEq", "occurrence": 0, "module-name": "pykickstart.sections"}, "27": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -66,7 +66,7 @@", "         self._script['body'].append(line)", " ", "     def finalize(self):", "-        if (' '.join(self._script['body']).strip() == ''):", "+        if (' '.join(self._script['body']).strip() is not ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "         if (self.dataObj is not None):"]]], "op-name": "replace_Eq_with_IsNot", "occurrence": 0, "module-name": "pykickstart.sections"}, "13": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 355, "occurrence": 7, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -139,7 +139,7 @@", "         \"Process the arguments to the %packages header and set attributes\\n           on the Version's Packages instance appropriate.  This method may be\\n           overridden in a subclass if necessary.\\n        \"", "         Section.handleHeader(self, lineno, args)", "         op = KSOptionParser(prog=self.sectionOpen, description='\\n                            Use the %packages command to begin a kickstart file\\n                            section that lists the packages you would like to\\n                            install.\\n\\n                            Packages can be specified by group or by individual\\n                            package name. The installation program defines\\n                            several groups that contain related packages. Refer\\n                            to the repodata/*comps.xml file on the first CD-ROM\\n                            for a list of groups. Each group has an id, user\\n                            visibility value, name, description, and package\\n                            list. In the package list, the packages marked as\\n                            mandatory are always installed if the group is\\n                            selected, the packages marked default are selected\\n                            by default if the group is selected, and the packages\\n                            marked optional must be specifically selected even\\n                            if the group is selected to be installed.\\n\\n                            In most cases, it is only necessary to list the\\n                            desired groups and not individual packages. Note\\n                            that the Core group is always selected by default,\\n                            so it is not necessary to specify it in the\\n                            %packages section.\\n\\n                            The %packages section is required to be closed with\\n                            %end. Also, multiple %packages sections may be given.\\n                            This may be handy if the kickstart file is used as a\\n                            template and pulls in various other files with the\\n                            %include mechanism.\\n\\n                            Here is an example %packages selection::\\n\\n                                %packages\\n                                @X Window System\\n                                @GNOME Desktop Environment\\n                                @Graphical Internet\\n                                @Sound and Video\\n                                dhcp\\n                                %end\\n\\n                            As you can see, groups are specified, one to a line,\\n                            starting with an ``@`` symbol followed by the full\\n                            group name as given in the comps.xml file. Groups\\n                            can also be specified using the id for the group,\\n                            such as gnome-desktop. Specify individual packages\\n                            with no additional characters (the dhcp line in the\\n                            example above is an individual package).\\n\\n                            You can also specify environments using the ``@^``\\n                            prefix followed by full environment name as given in\\n                            the comps.xml file.  If multiple environments are\\n                            specified, only the last one specified will be used.\\n                            Environments can be mixed with both group\\n                            specifications (even if the given group is not part\\n                            of the specified environment) and package\\n                            specifications.\\n\\n                            Here is an example of requesting the GNOME Desktop\\n                            environment to be selected for installation::\\n\\n                                %packages\\n                                @^gnome-desktop-environment\\n                                %end\\n\\n                            Additionally, individual packages may be specified\\n                            using globs. For instance::\\n\\n                                %packages\\n                                vim*\\n                                kde-i18n-*\\n                                %end\\n\\n                            This would install all packages whose names start\\n                            with \"vim\" or \"kde-i18n-\".\\n\\n                            You can also specify which packages or groups not to\\n                            install from the default package list::\\n\\n                                %packages\\n                                -autofs\\n                                -@Sound and Video\\n                                %end\\n                            ', epilog=\"\\n                            Group-level options\\n                            -------------------\\n\\n                            In addition, group lines in the %packages section\\n                            can take the following options:\\n\\n                            ``--nodefaults``\\n\\n                                Only install the group's mandatory packages, not\\n                                the default selections.\\n\\n                            ``--optional``\\n\\n                                In addition to the mandatory and default packages,\\n                                also install the optional packages. This means all\\n                                packages in the group will be installed.\\n                            \", version=self.version)", "-        op.add_argument('--excludedocs', action='store_true', default=False, help='\\n                        Do not install any of the documentation from any packages.\\n                        For the most part, this means files in /usr/share/doc*\\n                        will not get installed though it could mean other files\\n                        as well, depending on how the package was built.', introduced=FC4)", "+        op.add_argument('--excludedocs', action='store_true', default=True, help='\\n                        Do not install any of the documentation from any packages.\\n                        For the most part, this means files in /usr/share/doc*\\n                        will not get installed though it could mean other files\\n                        as well, depending on how the package was built.', introduced=FC4)", "         op.add_argument('--ignoremissing', action='store_true', default=False, help='\\n                        Ignore any packages or groups specified in the packages\\n                        section that are not found in any configured repository.\\n                        The default behavior is to halt the installation and ask\\n                        the user if the installation should be aborted or\\n                        continued. This option allows fully automated\\n                        installation even in the error case.', introduced=FC4)", "         op.add_argument('--nobase', action='store_true', default=False, deprecated=F18, removed=F22, help='\\n                        Do not install the @base group (installed by default,\\n                        otherwise).')", "         op.add_argument('--nocore', action='store_true', default=False, introduced=F21, help='\\n                        Do not install the @core group (installed by default,\\n                        otherwise).\\n\\n                        **Omitting the core group can produce a system that is\\n                        not bootable or that cannot finish the install. Use\\n                        with caution.**')"]]], "op-name": "boolean_replacer", "occurrence": 7, "module-name": "pykickstart.sections"}, "46": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -66,7 +66,7 @@", "         self._script['body'].append(line)", " ", "     def finalize(self):", "-        if (' '.join(self._script['body']).strip() == ''):", "+        if (' '.join(self._script['body']).strip() not in ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "         if (self.dataObj is not None):"]]], "op-name": "replace_Eq_with_NotIn", "occurrence": 0, "module-name": "pykickstart.sections"}, "24": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -33,7 +33,7 @@", "     @property", "     def seen(self):", "         'This property is given for consistency with KickstartCommand objects\\n           only.  It simply returns whether timesSeen is non-zero.\\n        '", "-        return (self.timesSeen > 0)", "+        return (self.timesSeen == 0)", " ", " class NullSection(Section):", "     'This defines a section that pykickstart will recognize but do nothing\\n       with.  If the parser runs across a %section that has no object registered,\\n       it will raise an error.  Sometimes, you may want to simply ignore those\\n       sections instead.  This class is useful for that purpose.\\n    '"]]], "op-name": "replace_Gt_with_Eq", "occurrence": 0, "module-name": "pykickstart.sections"}, "36": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -69,7 +69,7 @@", "         if (' '.join(self._script['body']).strip() == ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "-        if (self.dataObj is not None):", "+        if (self.dataObj >= None):", "             s = self.dataObj(self._script['body'], **kwargs)", "             self._resetScript()", "             self.handler.scripts.append(s)"]]], "op-name": "replace_IsNot_with_GtE", "occurrence": 0, "module-name": "pykickstart.sections"}, "19": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 405, "occurrence": 13, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -148,7 +148,7 @@", "         op.add_argument('--default', dest='defaultPackages', action='store_true', default=False, introduced=F7, help='\\n                        Install the default package set. This corresponds to the\\n                        package set that would be installed if no other\\n                        selections were made on the package customization screen\\n                        during an interactive install.')", "         op.add_argument('--instLangs', default=None, introduced=F9, help='\\n                        Specify the list of languages that should be installed.\\n                        This is different from the package group level\\n                        selections, though. This option does not specify what\\n                        package groups should be installed. Instead, it controls\\n                        which translation files from individual packages should\\n                        be installed by setting RPM macros.')", "         op.add_argument('--multilib', dest='multiLib', action='store_true', default=False, introduced=F18, help='\\n                        Enable yum\\'s \"all\" multilib_policy as opposed to the\\n                        default of \"best\".')", "-        op.add_argument('--excludeWeakdeps', dest='excludeWeakdeps', action='store_true', default=False, introduced=F24, help='\\n                        Do not install packages from weak dependencies. These\\n                        are packages linked to the selected package set by\\n                        Recommends and Supplements flags. By default weak\\n                        dependencies will be installed.')", "+        op.add_argument('--excludeWeakdeps', dest='excludeWeakdeps', action='store_true', default=True, introduced=F24, help='\\n                        Do not install packages from weak dependencies. These\\n                        are packages linked to the selected package set by\\n                        Recommends and Supplements flags. By default weak\\n                        dependencies will be installed.')", "         ns = op.parse_args(args=args[1:], lineno=lineno)", "         if (ns.defaultPackages and ns.nobase):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=_('--default and --nobase cannot be used together')))"]]], "op-name": "boolean_replacer", "occurrence": 13, "module-name": "pykickstart.sections"}, "25": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -69,7 +69,7 @@", "         if (' '.join(self._script['body']).strip() == ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "-        if (self.dataObj is not None):", "+        if (self.dataObj != None):", "             s = self.dataObj(self._script['body'], **kwargs)", "             self._resetScript()", "             self.handler.scripts.append(s)"]]], "op-name": "replace_IsNot_with_NotEq", "occurrence": 0, "module-name": "pykickstart.sections"}, "44": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -66,7 +66,7 @@", "         self._script['body'].append(line)", " ", "     def finalize(self):", "-        if (' '.join(self._script['body']).strip() == ''):", "+        if (' '.join(self._script['body']).strip() <= ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "         if (self.dataObj is not None):"]]], "op-name": "replace_Eq_with_LtE", "occurrence": 0, "module-name": "pykickstart.sections"}, "18": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 401, "occurrence": 12, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -147,7 +147,7 @@", "         op.add_argument('--resolvedeps', dest='resolveDeps', action='store_true', deprecated=FC4, removed=F9, help='')", "         op.add_argument('--default', dest='defaultPackages', action='store_true', default=False, introduced=F7, help='\\n                        Install the default package set. This corresponds to the\\n                        package set that would be installed if no other\\n                        selections were made on the package customization screen\\n                        during an interactive install.')", "         op.add_argument('--instLangs', default=None, introduced=F9, help='\\n                        Specify the list of languages that should be installed.\\n                        This is different from the package group level\\n                        selections, though. This option does not specify what\\n                        package groups should be installed. Instead, it controls\\n                        which translation files from individual packages should\\n                        be installed by setting RPM macros.')", "-        op.add_argument('--multilib', dest='multiLib', action='store_true', default=False, introduced=F18, help='\\n                        Enable yum\\'s \"all\" multilib_policy as opposed to the\\n                        default of \"best\".')", "+        op.add_argument('--multilib', dest='multiLib', action='store_true', default=True, introduced=F18, help='\\n                        Enable yum\\'s \"all\" multilib_policy as opposed to the\\n                        default of \"best\".')", "         op.add_argument('--excludeWeakdeps', dest='excludeWeakdeps', action='store_true', default=False, introduced=F24, help='\\n                        Do not install packages from weak dependencies. These\\n                        are packages linked to the selected package set by\\n                        Recommends and Supplements flags. By default weak\\n                        dependencies will be installed.')", "         ns = op.parse_args(args=args[1:], lineno=lineno)", "         if (ns.defaultPackages and ns.nobase):"]]], "op-name": "boolean_replacer", "occurrence": 12, "module-name": "pykickstart.sections"}, "33": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -33,7 +33,7 @@", "     @property", "     def seen(self):", "         'This property is given for consistency with KickstartCommand objects\\n           only.  It simply returns whether timesSeen is non-zero.\\n        '", "-        return (self.timesSeen > 0)", "+        return (self.timesSeen in 0)", " ", " class NullSection(Section):", "     'This defines a section that pykickstart will recognize but do nothing\\n       with.  If the parser runs across a %section that has no object registered,\\n       it will raise an error.  Sometimes, you may want to simply ignore those\\n       sections instead.  This class is useful for that purpose.\\n    '"]]], "op-name": "replace_Gt_with_In", "occurrence": 0, "module-name": "pykickstart.sections"}, "41": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -162,7 +162,7 @@", "             self.handler.packages.handleMissing = KS_MISSING_PROMPT", "         if ns.defaultPackages:", "             self.handler.packages.default = True", "-        if (ns.instLangs is not None):", "+        if (ns.instLangs in None):", "             self.handler.packages.instLangs = ns.instLangs", "         self.handler.packages.nocore = ns.nocore", "         self.handler.packages.multiLib = ns.multiLib"]]], "op-name": "replace_IsNot_with_In", "occurrence": 1, "module-name": "pykickstart.sections"}, "29": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -162,7 +162,7 @@", "             self.handler.packages.handleMissing = KS_MISSING_PROMPT", "         if ns.defaultPackages:", "             self.handler.packages.default = True", "-        if (ns.instLangs is not None):", "+        if (ns.instLangs < None):", "             self.handler.packages.instLangs = ns.instLangs", "         self.handler.packages.nocore = ns.nocore", "         self.handler.packages.multiLib = ns.multiLib"]]], "op-name": "replace_IsNot_with_Lt", "occurrence": 1, "module-name": "pykickstart.sections"}, "57": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 245, "occurrence": 4, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -131,7 +131,7 @@", "     sectionOpen = '%packages'", " ", "     def handleLine(self, line):", "-        h = line.partition('#')[0]", "+        h = line.partition('#')[1]", "         line = h.rstrip()", "         self.handler.packages.add([line])", " "]]], "op-name": "number_replacer", "occurrence": 4, "module-name": "pykickstart.sections"}, "23": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -66,7 +66,7 @@", "         self._script['body'].append(line)", " ", "     def finalize(self):", "-        if (' '.join(self._script['body']).strip() == ''):", "+        if (' '.join(self._script['body']).strip() >= ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "         if (self.dataObj is not None):"]]], "op-name": "replace_Eq_with_GtE", "occurrence": 0, "module-name": "pykickstart.sections"}, "21": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 435, "occurrence": 15, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -167,5 +167,5 @@", "         self.handler.packages.nocore = ns.nocore", "         self.handler.packages.multiLib = ns.multiLib", "         self.handler.packages.excludeWeakdeps = ns.excludeWeakdeps", "-        self.handler.packages.seen = True", "+        self.handler.packages.seen = False", " "]]], "op-name": "boolean_replacer", "occurrence": 15, "module-name": "pykickstart.sections"}, "6": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 56, "occurrence": 0, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -8,7 +8,7 @@", " ", " class Section(object):", "     'The base class for defining kickstart sections.  You are free to\\n       subclass this as appropriate.\\n\\n       Class attributes:\\n\\n       allLines    -- Does this section require the parser to call handleLine\\n                      for every line in the section, even blanks and comments?\\n       sectionOpen -- The string that denotes the start of this section.  You\\n                      must start your tag with a percent sign.\\n       timesSeen   -- This attribute is for informational purposes only.  It is\\n                      incremented every time handleHeader is called to keep\\n                      track of the number of times a section of this type is\\n                      seen.\\n    '", "-    allLines = False", "+    allLines = True", "     sectionOpen = ''", "     timesSeen = 0", " "]]], "op-name": "boolean_replacer", "occurrence": 0, "module-name": "pykickstart.sections"}, "8": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 140, "occurrence": 2, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -54,7 +54,7 @@", " ", "     def _getParser(self):", "         op = KSOptionParser(prog=self.sectionOpen, description=self.description, version=self.version)", "-        op.add_argument('--erroronfail', dest='errorOnFail', action='store_true', default=False, help='\\n                        If the error script fails, this option will cause an\\n                        error dialog to be displayed and will halt installation.\\n                        The error message will direct you to where the cause of\\n                        the failure is logged.', introduced=FC4)", "+        op.add_argument('--erroronfail', dest='errorOnFail', action='store_true', default=True, help='\\n                        If the error script fails, this option will cause an\\n                        error dialog to be displayed and will halt installation.\\n                        The error message will direct you to where the cause of\\n                        the failure is logged.', introduced=FC4)", "         op.add_argument('--interpreter', dest='interpreter', default='/bin/sh', introduced=FC4, help='\\n                        Allows you to specify a different scripting language,\\n                        such as Python. Replace /usr/bin/python with the\\n                        scripting language of your choice.\\n                        ')", "         op.add_argument('--log', '--logfile', dest='log', introduced=FC4, help='\\n                        Log all messages from the script to the given log file.\\n                        ')", "         return op"]]], "op-name": "boolean_replacer", "occurrence": 2, "module-name": "pykickstart.sections"}, "52": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -162,7 +162,7 @@", "             self.handler.packages.handleMissing = KS_MISSING_PROMPT", "         if ns.defaultPackages:", "             self.handler.packages.default = True", "-        if (ns.instLangs is not None):", "+        if (ns.instLangs == None):", "             self.handler.packages.instLangs = ns.instLangs", "         self.handler.packages.nocore = ns.nocore", "         self.handler.packages.multiLib = ns.multiLib"]]], "op-name": "replace_IsNot_with_Eq", "occurrence": 1, "module-name": "pykickstart.sections"}, "42": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -69,7 +69,7 @@", "         if (' '.join(self._script['body']).strip() == ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "-        if (self.dataObj is not None):", "+        if (self.dataObj not in None):", "             s = self.dataObj(self._script['body'], **kwargs)", "             self._resetScript()", "             self.handler.scripts.append(s)"]]], "op-name": "replace_IsNot_with_NotIn", "occurrence": 0, "module-name": "pykickstart.sections"}, "12": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 224, "occurrence": 6, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -110,7 +110,7 @@", " ", "     def _resetScript(self):", "         ScriptSection._resetScript(self)", "-        self._script['chroot'] = True", "+        self._script['chroot'] = False", "         self._script['type'] = KS_SCRIPT_POST", " ", " class OnErrorScriptSection(ScriptSection):"]]], "op-name": "boolean_replacer", "occurrence": 6, "module-name": "pykickstart.sections"}, "20": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 427, "occurrence": 14, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -161,7 +161,7 @@", "         else:", "             self.handler.packages.handleMissing = KS_MISSING_PROMPT", "         if ns.defaultPackages:", "-            self.handler.packages.default = True", "+            self.handler.packages.default = False", "         if (ns.instLangs is not None):", "             self.handler.packages.instLangs = ns.instLangs", "         self.handler.packages.nocore = ns.nocore"]]], "op-name": "boolean_replacer", "occurrence": 14, "module-name": "pykickstart.sections"}, "40": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -69,7 +69,7 @@", "         if (' '.join(self._script['body']).strip() == ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "-        if (self.dataObj is not None):", "+        if (self.dataObj in None):", "             s = self.dataObj(self._script['body'], **kwargs)", "             self._resetScript()", "             self.handler.scripts.append(s)"]]], "op-name": "replace_IsNot_with_In", "occurrence": 0, "module-name": "pykickstart.sections"}, "58": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "number_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 412, "occurrence": 5, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -149,7 +149,7 @@", "         op.add_argument('--instLangs', default=None, introduced=F9, help='\\n                        Specify the list of languages that should be installed.\\n                        This is different from the package group level\\n                        selections, though. This option does not specify what\\n                        package groups should be installed. Instead, it controls\\n                        which translation files from individual packages should\\n                        be installed by setting RPM macros.')", "         op.add_argument('--multilib', dest='multiLib', action='store_true', default=False, introduced=F18, help='\\n                        Enable yum\\'s \"all\" multilib_policy as opposed to the\\n                        default of \"best\".')", "         op.add_argument('--excludeWeakdeps', dest='excludeWeakdeps', action='store_true', default=False, introduced=F24, help='\\n                        Do not install packages from weak dependencies. These\\n                        are packages linked to the selected package set by\\n                        Recommends and Supplements flags. By default weak\\n                        dependencies will be installed.')", "-        ns = op.parse_args(args=args[1:], lineno=lineno)", "+        ns = op.parse_args(args=args[2:], lineno=lineno)", "         if (ns.defaultPackages and ns.nobase):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=_('--default and --nobase cannot be used together')))", "         elif (ns.defaultPackages and ns.nocore):"]]], "op-name": "number_replacer", "occurrence": 5, "module-name": "pykickstart.sections"}, "31": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -66,7 +66,7 @@", "         self._script['body'].append(line)", " ", "     def finalize(self):", "-        if (' '.join(self._script['body']).strip() == ''):", "+        if (' '.join(self._script['body']).strip() is ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "         if (self.dataObj is not None):"]]], "op-name": "replace_Eq_with_Is", "occurrence": 0, "module-name": "pykickstart.sections"}, "32": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -33,7 +33,7 @@", "     @property", "     def seen(self):", "         'This property is given for consistency with KickstartCommand objects\\n           only.  It simply returns whether timesSeen is non-zero.\\n        '", "-        return (self.timesSeen > 0)", "+        return (self.timesSeen is 0)", " ", " class NullSection(Section):", "     'This defines a section that pykickstart will recognize but do nothing\\n       with.  If the parser runs across a %section that has no object registered,\\n       it will raise an error.  Sometimes, you may want to simply ignore those\\n       sections instead.  This class is useful for that purpose.\\n    '"]]], "op-name": "replace_Gt_with_Is", "occurrence": 0, "module-name": "pykickstart.sections"}, "1": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -69,7 +69,7 @@", "         if (' '.join(self._script['body']).strip() == ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "-        if (self.dataObj is not None):", "+        if (self.dataObj is None):", "             s = self.dataObj(self._script['body'], **kwargs)", "             self._resetScript()", "             self.handler.scripts.append(s)"]]], "op-name": "replace_IsNot_with_Is", "occurrence": 0, "module-name": "pykickstart.sections"}, "16": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 375, "occurrence": 10, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -142,7 +142,7 @@", "         op.add_argument('--excludedocs', action='store_true', default=False, help='\\n                        Do not install any of the documentation from any packages.\\n                        For the most part, this means files in /usr/share/doc*\\n                        will not get installed though it could mean other files\\n                        as well, depending on how the package was built.', introduced=FC4)", "         op.add_argument('--ignoremissing', action='store_true', default=False, help='\\n                        Ignore any packages or groups specified in the packages\\n                        section that are not found in any configured repository.\\n                        The default behavior is to halt the installation and ask\\n                        the user if the installation should be aborted or\\n                        continued. This option allows fully automated\\n                        installation even in the error case.', introduced=FC4)", "         op.add_argument('--nobase', action='store_true', default=False, deprecated=F18, removed=F22, help='\\n                        Do not install the @base group (installed by default,\\n                        otherwise).')", "-        op.add_argument('--nocore', action='store_true', default=False, introduced=F21, help='\\n                        Do not install the @core group (installed by default,\\n                        otherwise).\\n\\n                        **Omitting the core group can produce a system that is\\n                        not bootable or that cannot finish the install. Use\\n                        with caution.**')", "+        op.add_argument('--nocore', action='store_true', default=True, introduced=F21, help='\\n                        Do not install the @core group (installed by default,\\n                        otherwise).\\n\\n                        **Omitting the core group can produce a system that is\\n                        not bootable or that cannot finish the install. Use\\n                        with caution.**')", "         op.add_argument('--ignoredeps', dest='resolveDeps', action='store_false', deprecated=FC4, removed=F9, help='')", "         op.add_argument('--resolvedeps', dest='resolveDeps', action='store_true', deprecated=FC4, removed=F9, help='')", "         op.add_argument('--default', dest='defaultPackages', action='store_true', default=False, introduced=F7, help='\\n                        Install the default package set. This corresponds to the\\n                        package set that would be installed if no other\\n                        selections were made on the package customization screen\\n                        during an interactive install.')"]]], "op-name": "boolean_replacer", "occurrence": 10, "module-name": "pykickstart.sections"}, "43": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -162,7 +162,7 @@", "             self.handler.packages.handleMissing = KS_MISSING_PROMPT", "         if ns.defaultPackages:", "             self.handler.packages.default = True", "-        if (ns.instLangs is not None):", "+        if (ns.instLangs not in None):", "             self.handler.packages.instLangs = ns.instLangs", "         self.handler.packages.nocore = ns.nocore", "         self.handler.packages.multiLib = ns.multiLib"]]], "op-name": "replace_IsNot_with_NotIn", "occurrence": 1, "module-name": "pykickstart.sections"}, "7": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 127, "occurrence": 1, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -44,7 +44,7 @@", "         self.sectionOpen = kwargs.get('sectionOpen')", " ", " class ScriptSection(Section):", "-    allLines = True", "+    allLines = False", "     description = ''", " ", "     def __init__(self, *args, **kwargs):"]]], "op-name": "boolean_replacer", "occurrence": 1, "module-name": "pykickstart.sections"}, "22": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -33,7 +33,7 @@", "     @property", "     def seen(self):", "         'This property is given for consistency with KickstartCommand objects\\n           only.  It simply returns whether timesSeen is non-zero.\\n        '", "-        return (self.timesSeen > 0)", "+        return (self.timesSeen not in 0)", " ", " class NullSection(Section):", "     'This defines a section that pykickstart will recognize but do nothing\\n       with.  If the parser runs across a %section that has no object registered,\\n       it will raise an error.  Sometimes, you may want to simply ignore those\\n       sections instead.  This class is useful for that purpose.\\n    '"]]], "op-name": "replace_Gt_with_NotIn", "occurrence": 0, "module-name": "pykickstart.sections"}, "4": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -69,7 +69,7 @@", "         if (' '.join(self._script['body']).strip() == ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "-        if (self.dataObj is not None):", "+        if (self.dataObj > None):", "             s = self.dataObj(self._script['body'], **kwargs)", "             self._resetScript()", "             self.handler.scripts.append(s)"]]], "op-name": "replace_IsNot_with_Gt", "occurrence": 0, "module-name": "pykickstart.sections"}, "5": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -162,7 +162,7 @@", "             self.handler.packages.handleMissing = KS_MISSING_PROMPT", "         if ns.defaultPackages:", "             self.handler.packages.default = True", "-        if (ns.instLangs is not None):", "+        if (ns.instLangs > None):", "             self.handler.packages.instLangs = ns.instLangs", "         self.handler.packages.nocore = ns.nocore", "         self.handler.packages.multiLib = ns.multiLib"]]], "op-name": "replace_IsNot_with_Gt", "occurrence": 1, "module-name": "pykickstart.sections"}, "30": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -66,7 +66,7 @@", "         self._script['body'].append(line)", " ", "     def finalize(self):", "-        if (' '.join(self._script['body']).strip() == ''):", "+        if (' '.join(self._script['body']).strip() in ''):", "             return", "         kwargs = {'interp': self._script['interp'], 'inChroot': self._script['chroot'], 'lineno': self._script['lineno'], 'logfile': self._script['log'], 'errorOnFail': self._script['errorOnFail'], 'type': self._script['type']}", "         if (self.dataObj is not None):"]]], "op-name": "replace_Eq_with_In", "occurrence": 0, "module-name": "pykickstart.sections"}, "14": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "boolean_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 362, "occurrence": 8, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -140,7 +140,7 @@", "         Section.handleHeader(self, lineno, args)", "         op = KSOptionParser(prog=self.sectionOpen, description='\\n                            Use the %packages command to begin a kickstart file\\n                            section that lists the packages you would like to\\n                            install.\\n\\n                            Packages can be specified by group or by individual\\n                            package name. The installation program defines\\n                            several groups that contain related packages. Refer\\n                            to the repodata/*comps.xml file on the first CD-ROM\\n                            for a list of groups. Each group has an id, user\\n                            visibility value, name, description, and package\\n                            list. In the package list, the packages marked as\\n                            mandatory are always installed if the group is\\n                            selected, the packages marked default are selected\\n                            by default if the group is selected, and the packages\\n                            marked optional must be specifically selected even\\n                            if the group is selected to be installed.\\n\\n                            In most cases, it is only necessary to list the\\n                            desired groups and not individual packages. Note\\n                            that the Core group is always selected by default,\\n                            so it is not necessary to specify it in the\\n                            %packages section.\\n\\n                            The %packages section is required to be closed with\\n                            %end. Also, multiple %packages sections may be given.\\n                            This may be handy if the kickstart file is used as a\\n                            template and pulls in various other files with the\\n                            %include mechanism.\\n\\n                            Here is an example %packages selection::\\n\\n                                %packages\\n                                @X Window System\\n                                @GNOME Desktop Environment\\n                                @Graphical Internet\\n                                @Sound and Video\\n                                dhcp\\n                                %end\\n\\n                            As you can see, groups are specified, one to a line,\\n                            starting with an ``@`` symbol followed by the full\\n                            group name as given in the comps.xml file. Groups\\n                            can also be specified using the id for the group,\\n                            such as gnome-desktop. Specify individual packages\\n                            with no additional characters (the dhcp line in the\\n                            example above is an individual package).\\n\\n                            You can also specify environments using the ``@^``\\n                            prefix followed by full environment name as given in\\n                            the comps.xml file.  If multiple environments are\\n                            specified, only the last one specified will be used.\\n                            Environments can be mixed with both group\\n                            specifications (even if the given group is not part\\n                            of the specified environment) and package\\n                            specifications.\\n\\n                            Here is an example of requesting the GNOME Desktop\\n                            environment to be selected for installation::\\n\\n                                %packages\\n                                @^gnome-desktop-environment\\n                                %end\\n\\n                            Additionally, individual packages may be specified\\n                            using globs. For instance::\\n\\n                                %packages\\n                                vim*\\n                                kde-i18n-*\\n                                %end\\n\\n                            This would install all packages whose names start\\n                            with \"vim\" or \"kde-i18n-\".\\n\\n                            You can also specify which packages or groups not to\\n                            install from the default package list::\\n\\n                                %packages\\n                                -autofs\\n                                -@Sound and Video\\n                                %end\\n                            ', epilog=\"\\n                            Group-level options\\n                            -------------------\\n\\n                            In addition, group lines in the %packages section\\n                            can take the following options:\\n\\n                            ``--nodefaults``\\n\\n                                Only install the group's mandatory packages, not\\n                                the default selections.\\n\\n                            ``--optional``\\n\\n                                In addition to the mandatory and default packages,\\n                                also install the optional packages. This means all\\n                                packages in the group will be installed.\\n                            \", version=self.version)", "         op.add_argument('--excludedocs', action='store_true', default=False, help='\\n                        Do not install any of the documentation from any packages.\\n                        For the most part, this means files in /usr/share/doc*\\n                        will not get installed though it could mean other files\\n                        as well, depending on how the package was built.', introduced=FC4)", "-        op.add_argument('--ignoremissing', action='store_true', default=False, help='\\n                        Ignore any packages or groups specified in the packages\\n                        section that are not found in any configured repository.\\n                        The default behavior is to halt the installation and ask\\n                        the user if the installation should be aborted or\\n                        continued. This option allows fully automated\\n                        installation even in the error case.', introduced=FC4)", "+        op.add_argument('--ignoremissing', action='store_true', default=True, help='\\n                        Ignore any packages or groups specified in the packages\\n                        section that are not found in any configured repository.\\n                        The default behavior is to halt the installation and ask\\n                        the user if the installation should be aborted or\\n                        continued. This option allows fully automated\\n                        installation even in the error case.', introduced=FC4)", "         op.add_argument('--nobase', action='store_true', default=False, deprecated=F18, removed=F22, help='\\n                        Do not install the @base group (installed by default,\\n                        otherwise).')", "         op.add_argument('--nocore', action='store_true', default=False, introduced=F21, help='\\n                        Do not install the @core group (installed by default,\\n                        otherwise).\\n\\n                        **Omitting the core group can produce a system that is\\n                        not bootable or that cannot finish the install. Use\\n                        with caution.**')", "         op.add_argument('--ignoredeps', dest='resolveDeps', action='store_false', deprecated=FC4, removed=F9, help='')"]]], "op-name": "boolean_replacer", "occurrence": 8, "module-name": "pykickstart.sections"}, "37": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_IsNot_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -162,7 +162,7 @@", "             self.handler.packages.handleMissing = KS_MISSING_PROMPT", "         if ns.defaultPackages:", "             self.handler.packages.default = True", "-        if (ns.instLangs is not None):", "+        if (ns.instLangs >= None):", "             self.handler.packages.instLangs = ns.instLangs", "         self.handler.packages.nocore = ns.nocore", "         self.handler.packages.multiLib = ns.multiLib"]]], "op-name": "replace_IsNot_with_GtE", "occurrence": 1, "module-name": "pykickstart.sections"}, "49": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -33,7 +33,7 @@", "     @property", "     def seen(self):", "         'This property is given for consistency with KickstartCommand objects\\n           only.  It simply returns whether timesSeen is non-zero.\\n        '", "-        return (self.timesSeen > 0)", "+        return (self.timesSeen >= 0)", " ", " class NullSection(Section):", "     'This defines a section that pykickstart will recognize but do nothing\\n       with.  If the parser runs across a %section that has no object registered,\\n       it will raise an error.  Sometimes, you may want to simply ignore those\\n       sections instead.  This class is useful for that purpose.\\n    '"]]], "op-name": "replace_Gt_with_GtE", "occurrence": 0, "module-name": "pykickstart.sections"}, "56": {"command": ["cosmic-ray", "worker", "pykickstart.sections", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/sections.py"], "result-type": "normal", "result-data": [{"line_number": 188, "occurrence": 3, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/sections.py", "@@ -78,7 +78,7 @@", "         'Process the arguments to a %pre/%post/%traceback header for later\\n           setting on a Script instance once the end of the script is found.\\n           This method may be overridden in a subclass if necessary.\\n        '", "         Section.handleHeader(self, lineno, args)", "         op = self._getParser()", "-        ns = op.parse_args(args=args[1:], lineno=lineno)", "+        ns = op.parse_args(args=args[2:], lineno=lineno)", "         self._script['interp'] = ns.interpreter", "         self._script['lineno'] = lineno", "         self._script['log'] = ns.log"]]], "op-name": "number_replacer", "occurrence": 3, "module-name": "pykickstart.sections"}}, "_default": {}}