{"work-items": {"5": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -176,7 +176,7 @@", "         return (self.name < other.name)", " ", "     def __le__(self, other):", "-        return (self.name <= other.name)", "+        return (self.name in other.name)", " ", "     def __eq__(self, other):", "         return (self.name == other.name)"]]], "op-name": "replace_LtE_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_LtE_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "271": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -369,7 +369,7 @@", "             try:", "                 line = next(lineIter)", "                 if ((line == '') and (self._includeDepth == 0)):", "-                    if (self.version >= version.F8):", "+                    if (self.version not in version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)", "             except StopIteration:"]]], "op-name": "replace_GtE_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_NotIn", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "472": {"result-type": "normal", "occurrence": 25, "result-data": [{"occurrence": 25, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line != '') or (line.lstrip()[0] == '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "25", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "446": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -379,7 +379,7 @@", "                 continue", "             if line.lstrip().startswith('%'):", "                 possibleSectionStart = line.split()[0]", "-                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart not in ('%end', '%include'))):", "+                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart < ('%end', '%include'))):", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)"]]], "op-name": "replace_NotIn_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "357": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -182,7 +182,7 @@", "         return (self.name == other.name)", " ", "     def __ne__(self, other):", "-        return (self.name != other.name)", "+        return (self.name <= other.name)", " ", "     def __gt__(self, other):", "         return (self.name > other.name)"]]], "op-name": "replace_NotEq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "115": {"result-type": "normal", "occurrence": 27, "result-data": [{"occurrence": 27, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -438,7 +438,7 @@", "         while True:", "             try:", "                 self._line = next(lineIter)", "-                if (self._line == ''):", "+                if (self._line in ''):", "                     break", "             except StopIteration:", "                 break"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "27", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "114": {"result-type": "normal", "occurrence": 26, "result-data": [{"occurrence": 26, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line == '') or (line.lstrip()[0] in '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "26", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "46": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -185,7 +185,7 @@", "         return (self.name != other.name)", " ", "     def __gt__(self, other):", "-        return (self.name > other.name)", "+        return (self.name < other.name)", " ", "     def __ge__(self, other):", "         return (self.name >= other.name)"]]], "op-name": "replace_Gt_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "81": {"result-type": "normal", "occurrence": 33, "result-data": [{"occurrence": 33, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -469,7 +469,7 @@", "                     lineno = self._readSection(lineIter, lineno)", "                 else:", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "-            elif (self._state == STATE_END):", "+            elif (self._state <= STATE_END):", "                 break", "             elif (self._includeDepth > 0):", "                 lineIter.put(self._line)"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "33", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "139": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -379,7 +379,7 @@", "                 continue", "             if line.lstrip().startswith('%'):", "                 possibleSectionStart = line.split()[0]", "-                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart not in ('%end', '%include'))):", "+                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart >= ('%end', '%include'))):", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)"]]], "op-name": "replace_NotIn_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "509": {"result-type": "normal", "occurrence": 28, "result-data": [{"occurrence": 28, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -447,7 +447,7 @@", "                 self._handleSpecialComments(self._line)", "                 continue", "             args = shlex.split(self._line, comments=True)", "-            if (args[0] == '%include'):", "+            if (args[0] > '%include'):", "                 if ((len(args) == 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "28", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "262": {"result-type": "normal", "occurrence": 47, "result-data": [{"occurrence": 47, "line_number": 764, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -473,7 +473,7 @@", "                 break", "             elif (self._includeDepth > 0):", "                 lineIter.put(self._line)", "-                lineno -= 1", "+                lineno -= 2", "                 lineno = self._readSection(lineIter, lineno)", " ", "     def readKickstartFromString(self, s, reset=True):"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "47", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "582": {"result-type": "normal", "occurrence": 32, "result-data": [{"occurrence": 32, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -455,7 +455,7 @@", "             if (self._state == STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "-                elif (args[0][0] == '%'):", "+                elif (args[0][0] >= '%'):", "                     newSection = args[0]", "                     if (not self._validState(newSection)):", "                         if self.unknownSectionIsFatal:"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "32", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "259": {"result-type": "normal", "occurrence": 44, "result-data": [{"occurrence": 44, "line_number": 734, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -455,7 +455,7 @@", "             if (self._state == STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "-                elif (args[0][0] == '%'):", "+                elif (args[0][1] == '%'):", "                     newSection = args[0]", "                     if (not self._validState(newSection)):", "                         if self.unknownSectionIsFatal:"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "44", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "258": {"result-type": "normal", "occurrence": 43, "result-data": [{"occurrence": 43, "line_number": 734, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -455,7 +455,7 @@", "             if (self._state == STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "-                elif (args[0][0] == '%'):", "+                elif (args[1][0] == '%'):", "                     newSection = args[0]", "                     if (not self._validState(newSection)):", "                         if self.unknownSectionIsFatal:"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "43", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "319": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -185,7 +185,7 @@", "         return (self.name != other.name)", " ", "     def __gt__(self, other):", "-        return (self.name > other.name)", "+        return (self.name not in other.name)", " ", "     def __ge__(self, other):", "         return (self.name >= other.name)"]]], "op-name": "replace_Gt_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "11": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": 123, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -61,7 +61,7 @@", "         contents = load_to_str(f)", "     except KickstartError as e:", "         raise KickstartError(formatErrorMsg(0, msg=(_('Unable to open input kickstart file: %s') % str(e))))", "-    return _preprocessStateMachine(iter(contents.splitlines(True)))", "+    return _preprocessStateMachine(iter(contents.splitlines(False)))", " ", " def preprocessFromString(s):", "     'Preprocess the kickstart file, provided as the string s.  This\\n       method is currently only useful for handling %ksappend lines,\\n       which need to be fetched before the real kickstart parser can be\\n       run.  Returns the location of the complete kickstart file.\\n    '"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "572": {"result-type": "normal", "occurrence": 22, "result-data": [{"occurrence": 22, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -386,7 +386,7 @@", "                 if (args and (args[0] == '%end')):", "                     self._finalize(obj)", "                     break", "-                elif (args and (args[0] == '%include')):", "+                elif (args and (args[0] >= '%include')):", "                     if ((len(args) == 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "22", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "95": {"result-type": "normal", "occurrence": 7, "result-data": [{"occurrence": 7, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -165,7 +165,7 @@", " ", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "-        if (self.include == constants.GROUP_REQUIRED):", "+        if (self.include in constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "         elif (self.include == constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "47": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -471,7 +471,7 @@", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "             elif (self._state == STATE_END):", "                 break", "-            elif (self._includeDepth > 0):", "+            elif (self._includeDepth < 0):", "                 lineIter.put(self._line)", "                 lineno -= 1", "                 lineno = self._readSection(lineIter, lineno)"]]], "op-name": "replace_Gt_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "512": {"result-type": "normal", "occurrence": 31, "result-data": [{"occurrence": 31, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -453,7 +453,7 @@", "                 self._handleInclude(args[1])", "                 continue", "             if (self._state == STATE_COMMANDS):", "-                if (args[0] == '%ksappend'):", "+                if (args[0] > '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):", "                     newSection = args[0]"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "31", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "408": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -369,7 +369,7 @@", "             try:", "                 line = next(lineIter)", "                 if ((line == '') and (self._includeDepth == 0)):", "-                    if (self.version >= version.F8):", "+                    if (self.version < version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)", "             except StopIteration:"]]], "op-name": "replace_GtE_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Lt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "400": {"result-type": "normal", "occurrence": 33, "result-data": [{"occurrence": 33, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -469,7 +469,7 @@", "                     lineno = self._readSection(lineIter, lineno)", "                 else:", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "-            elif (self._state == STATE_END):", "+            elif (self._state is not STATE_END):", "                 break", "             elif (self._includeDepth > 0):", "                 lineIter.put(self._line)"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "33", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "415": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -379,7 +379,7 @@", "                 continue", "             if line.lstrip().startswith('%'):", "                 possibleSectionStart = line.split()[0]", "-                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart not in ('%end', '%include'))):", "+                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart is ('%end', '%include'))):", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)"]]], "op-name": "replace_NotIn_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "154": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -248,7 +248,7 @@", "             retval += ' --nocore'", "         if (self.handleMissing == constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "-        if (self.instLangs is not None):", "+        if (self.instLangs in None):", "             retval += (' --instLangs=%s' % self.instLangs)", "         if self.multiLib:", "             retval += ' --multilib'"]]], "op-name": "replace_IsNot_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "425": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -140,7 +140,7 @@", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "-        if (self.logfile is not None):", "+        if (self.logfile >= None):", "             retval += (' --logfile=%s' % self.logfile)", "         if self.errorOnFail:", "             retval += ' --erroronfail'"]]], "op-name": "replace_IsNot_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "569": {"result-type": "normal", "occurrence": 19, "result-data": [{"occurrence": 19, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line >= '') and (self._includeDepth == 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "19", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "194": {"result-type": "normal", "occurrence": 27, "result-data": [{"occurrence": 27, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -438,7 +438,7 @@", "         while True:", "             try:", "                 self._line = next(lineIter)", "-                if (self._line == ''):", "+                if (self._line is ''):", "                     break", "             except StopIteration:", "                 break"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "27", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "96": {"result-type": "normal", "occurrence": 8, "result-data": [{"occurrence": 8, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -167,7 +167,7 @@", "         'Return a string formatted for output to a kickstart file.'", "         if (self.include == constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "-        elif (self.include == constants.GROUP_ALL):", "+        elif (self.include in constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)", "         else:", "             return ('@%s' % self.name)"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "167": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -28,7 +28,7 @@", "             l = next(lineIter)", "         except StopIteration:", "             break", "-        if (l == ''):", "+        if (l is ''):", "             break", "         lineno += 1", "         ksurl = None"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "250": {"result-type": "normal", "occurrence": 35, "result-data": [{"occurrence": 35, "line_number": 697, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -431,7 +431,7 @@", "         except KickstartError:", "             if self.missingIncludeIsFatal:", "                 raise", "-        self._includeDepth -= 1", "+        self._includeDepth -= 2", " ", "     def _stateMachine(self, lineIter):", "         lineno = 0"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "35", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "323": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -128,7 +128,7 @@", "         retval = ''", "         if (self.type == constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "-        elif (self.type == constants.KS_SCRIPT_POST):", "+        elif (self.type < constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "480": {"result-type": "normal", "occurrence": 33, "result-data": [{"occurrence": 33, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -469,7 +469,7 @@", "                     lineno = self._readSection(lineIter, lineno)", "                 else:", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "-            elif (self._state == STATE_END):", "+            elif (self._state != STATE_END):", "                 break", "             elif (self._includeDepth > 0):", "                 lineIter.put(self._line)"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "33", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "38": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -248,7 +248,7 @@", "             retval += ' --nocore'", "         if (self.handleMissing == constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "-        if (self.instLangs is not None):", "+        if (self.instLangs < None):", "             retval += (' --instLangs=%s' % self.instLangs)", "         if self.multiLib:", "             retval += ' --multilib'"]]], "op-name": "replace_IsNot_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "243": {"result-type": "normal", "occurrence": 28, "result-data": [{"occurrence": 28, "line_number": 638, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -389,7 +389,7 @@", "                 elif (args and (args[0] == '%include')):", "                     if ((len(args) == 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "-                    self._handleInclude(args[1])", "+                    self._handleInclude(args[2])", "                     continue", "                 elif (args and (args[0] == '%ksappend')):", "                     continue"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "28", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "417": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -145,7 +145,7 @@", "         if self.errorOnFail:", "             retval += ' --erroronfail'", "         if self.script.endswith('\\n'):", "-            if (self._ver >= version.F8):", "+            if (self._ver <= version.F8):", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))"]]], "op-name": "replace_GtE_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "433": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -248,7 +248,7 @@", "             retval += ' --nocore'", "         if (self.handleMissing == constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "-        if (self.instLangs is not None):", "+        if (self.instLangs is None):", "             retval += (' --instLangs=%s' % self.instLangs)", "         if self.multiLib:", "             retval += ' --multilib'"]]], "op-name": "replace_IsNot_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "483": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -128,7 +128,7 @@", "         retval = ''", "         if (self.type == constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "-        elif (self.type == constants.KS_SCRIPT_POST):", "+        elif (self.type > constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "383": {"result-type": "normal", "occurrence": 16, "result-data": [{"occurrence": 16, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] == '@^') and (self.environment is not stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "264": {"result-type": "normal", "occurrence": 49, "result-data": [{"occurrence": 49, "line_number": 790, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -489,7 +489,7 @@", "             self._reset()", "         if (not os.path.exists(f)):", "             if ((self._includeDepth - 1) in self.currentdir):", "-                if os.path.exists(os.path.join(self.currentdir[(self._includeDepth - 1)], f)):", "+                if os.path.exists(os.path.join(self.currentdir[(self._includeDepth - 2)], f)):", "                     f = os.path.join(self.currentdir[(self._includeDepth - 1)], f)", "         cd = os.path.dirname(f)", "         if (not cd.startswith('/')):"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "49", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "468": {"result-type": "normal", "occurrence": 21, "result-data": [{"occurrence": 21, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -383,7 +383,7 @@", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)", "-                if (args and (args[0] == '%end')):", "+                if (args and (args[0] != '%end')):", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "21", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "436": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -46,7 +46,7 @@", "             contents = load_to_str(ksurl)", "         except KickstartError as e:", "             raise KickstartError(formatErrorMsg(lineno, msg=(_('Unable to open %%ksappend file: %s') % str(e))))", "-        if (contents is not None):", "+        if (contents <= None):", "             retval += contents.encode(sys.getdefaultencoding())", "     return retval", " "]]], "op-name": "replace_IsNot_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "423": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -176,7 +176,7 @@", "         return (self.name < other.name)", " ", "     def __le__(self, other):", "-        return (self.name <= other.name)", "+        return (self.name >= other.name)", " ", "     def __eq__(self, other):", "         return (self.name == other.name)"]]], "op-name": "replace_LtE_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_LtE_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "455": {"result-type": "normal", "occurrence": 8, "result-data": [{"occurrence": 8, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -167,7 +167,7 @@", "         'Return a string formatted for output to a kickstart file.'", "         if (self.include == constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "-        elif (self.include == constants.GROUP_ALL):", "+        elif (self.include != constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)", "         else:", "             return ('@%s' % self.name)"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "86": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -185,7 +185,7 @@", "         return (self.name != other.name)", " ", "     def __gt__(self, other):", "-        return (self.name > other.name)", "+        return (self.name != other.name)", " ", "     def __ge__(self, other):", "         return (self.name >= other.name)"]]], "op-name": "replace_Gt_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "333": {"result-type": "normal", "occurrence": 12, "result-data": [{"occurrence": 12, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -285,7 +285,7 @@", "         excludedGroupList = []", "         for pkg in pkgList:", "             stripped = pkg.strip()", "-            if (stripped[0:2] == '@^'):", "+            if (stripped[0:2] < '@^'):", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "7": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -379,7 +379,7 @@", "                 continue", "             if line.lstrip().startswith('%'):", "                 possibleSectionStart = line.split()[0]", "-                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart not in ('%end', '%include'))):", "+                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart != ('%end', '%include'))):", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)"]]], "op-name": "replace_NotIn_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "129": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -471,7 +471,7 @@", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "             elif (self._state == STATE_END):", "                 break", "-            elif (self._includeDepth > 0):", "+            elif (self._includeDepth >= 0):", "                 lineIter.put(self._line)", "                 lineno -= 1", "                 lineno = self._readSection(lineIter, lineno)"]]], "op-name": "replace_Gt_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "155": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp > '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "447": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -28,7 +28,7 @@", "             l = next(lineIter)", "         except StopIteration:", "             break", "-        if (l == ''):", "+        if (l != ''):", "             break", "         lineno += 1", "         ksurl = None"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "263": {"result-type": "normal", "occurrence": 48, "result-data": [{"occurrence": 48, "line_number": 789, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -488,7 +488,7 @@", "         if reset:", "             self._reset()", "         if (not os.path.exists(f)):", "-            if ((self._includeDepth - 1) in self.currentdir):", "+            if ((self._includeDepth - 2) in self.currentdir):", "                 if os.path.exists(os.path.join(self.currentdir[(self._includeDepth - 1)], f)):", "                     f = os.path.join(self.currentdir[(self._includeDepth - 1)], f)", "         cd = os.path.dirname(f)"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "48", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "536": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -176,7 +176,7 @@", "         return (self.name < other.name)", " ", "     def __le__(self, other):", "-        return (self.name <= other.name)", "+        return (self.name is not other.name)", " ", "     def __eq__(self, other):", "         return (self.name == other.name)"]]], "op-name": "replace_LtE_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_LtE_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "378": {"result-type": "normal", "occurrence": 11, "result-data": [{"occurrence": 11, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -246,7 +246,7 @@", "             retval += ' --nobase'", "         if self.nocore:", "             retval += ' --nocore'", "-        if (self.handleMissing == constants.KS_MISSING_IGNORE):", "+        if (self.handleMissing is not constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "         if (self.instLangs is not None):", "             retval += (' --instLangs=%s' % self.instLangs)"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "200": {"result-type": "normal", "occurrence": 33, "result-data": [{"occurrence": 33, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -469,7 +469,7 @@", "                     lineno = self._readSection(lineIter, lineno)", "                 else:", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "-            elif (self._state == STATE_END):", "+            elif (self._state is STATE_END):", "                 break", "             elif (self._includeDepth > 0):", "                 lineIter.put(self._line)"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "33", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "573": {"result-type": "normal", "occurrence": 23, "result-data": [{"occurrence": 23, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -387,7 +387,7 @@", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):", "-                    if ((len(args) == 1) or (not args[1])):", "+                    if ((len(args) >= 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "23", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "434": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -185,7 +185,7 @@", "         return (self.name != other.name)", " ", "     def __gt__(self, other):", "-        return (self.name > other.name)", "+        return (self.name == other.name)", " ", "     def __ge__(self, other):", "         return (self.name >= other.name)"]]], "op-name": "replace_Gt_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "445": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -299,7 +299,7 @@", "             else:", "                 newPackageSet.add(stripped)", "         excludedGroupNames = [g.name for g in excludedGroupList]", "-        self.groupList = [g for g in self.groupList if (g.name not in excludedGroupNames)]", "+        self.groupList = [g for g in self.groupList if (g.name < excludedGroupNames)]", "         self.excludedGroupList.extend(excludedGroupList)", "         existingPackageSet = ((existingPackageSet - newExcludedSet) | newPackageSet)", "         existingExcludedSet = ((existingExcludedSet - existingPackageSet) | newExcludedSet)"]]], "op-name": "replace_NotIn_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "172": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -134,7 +134,7 @@", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "-        elif (self.type == constants.KS_SCRIPT_ONERROR):", "+        elif (self.type is constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "559": {"result-type": "normal", "occurrence": 9, "result-data": [{"occurrence": 9, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -179,7 +179,7 @@", "         return (self.name <= other.name)", " ", "     def __eq__(self, other):", "-        return (self.name == other.name)", "+        return (self.name >= other.name)", " ", "     def __ne__(self, other):", "         return (self.name != other.name)"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "125": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -182,7 +182,7 @@", "         return (self.name == other.name)", " ", "     def __ne__(self, other):", "-        return (self.name != other.name)", "+        return (self.name is other.name)", " ", "     def __gt__(self, other):", "         return (self.name > other.name)"]]], "op-name": "replace_NotEq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "317": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -406,7 +406,7 @@", " ", "     def _validState(self, st):", "         'Is the given section tag one that has been registered with the parser?'", "-        return (st in list(self._sections.keys()))", "+        return (st != list(self._sections.keys()))", " ", "     def _tryFunc(self, fn):", "         \"Call the provided function (which doesn't take any arguments) and\\n           do the appropriate error handling.  If errorsAreFatal is False, this\\n           function will just print the exception and keep going.\\n        \""]]], "op-name": "replace_In_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "583": {"result-type": "normal", "occurrence": 33, "result-data": [{"occurrence": 33, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -469,7 +469,7 @@", "                     lineno = self._readSection(lineIter, lineno)", "                 else:", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "-            elif (self._state == STATE_END):", "+            elif (self._state >= STATE_END):", "                 break", "             elif (self._includeDepth > 0):", "                 lineIter.put(self._line)"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "33", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "91": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -130,7 +130,7 @@", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "-        elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "+        elif (self.type in constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "137": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -173,7 +173,7 @@", "             return ('@%s' % self.name)", " ", "     def __lt__(self, other):", "-        return (self.name < other.name)", "+        return (self.name >= other.name)", " ", "     def __le__(self, other):", "         return (self.name <= other.name)"]]], "op-name": "replace_Lt_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Lt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "272": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -394,7 +394,7 @@", "                 elif (args and (args[0] == '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "-                    if (self.version >= version.F8):", "+                    if (self.version not in version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     lineIter.put(line)", "                     lineno -= 1"]]], "op-name": "replace_GtE_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_NotIn", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "489": {"result-type": "normal", "occurrence": 8, "result-data": [{"occurrence": 8, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -167,7 +167,7 @@", "         'Return a string formatted for output to a kickstart file.'", "         if (self.include == constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "-        elif (self.include == constants.GROUP_ALL):", "+        elif (self.include > constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)", "         else:", "             return ('@%s' % self.name)"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "500": {"result-type": "normal", "occurrence": 19, "result-data": [{"occurrence": 19, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line > '') and (self._includeDepth == 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "19", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "493": {"result-type": "normal", "occurrence": 12, "result-data": [{"occurrence": 12, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -285,7 +285,7 @@", "         excludedGroupList = []", "         for pkg in pkgList:", "             stripped = pkg.strip()", "-            if (stripped[0:2] == '@^'):", "+            if (stripped[0:2] > '@^'):", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "72": {"result-type": "normal", "occurrence": 24, "result-data": [{"occurrence": 24, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -391,7 +391,7 @@", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue", "-                elif (args and (args[0] == '%ksappend')):", "+                elif (args and (args[0] <= '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "                     if (self.version >= version.F8):"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "24", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "289": {"result-type": "normal", "occurrence": 14, "result-data": [{"occurrence": 14, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -289,7 +289,7 @@", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "-            elif (stripped[0] == '-'):", "+            elif (stripped[0] not in '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "60": {"result-type": "normal", "occurrence": 12, "result-data": [{"occurrence": 12, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -285,7 +285,7 @@", "         excludedGroupList = []", "         for pkg in pkgList:", "             stripped = pkg.strip()", "-            if (stripped[0:2] == '@^'):", "+            if (stripped[0:2] <= '@^'):", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "382": {"result-type": "normal", "occurrence": 15, "result-data": [{"occurrence": 15, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] is not '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "411": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -406,7 +406,7 @@", " ", "     def _validState(self, st):", "         'Is the given section tag one that has been registered with the parser?'", "-        return (st in list(self._sections.keys()))", "+        return (st == list(self._sections.keys()))", " ", "     def _tryFunc(self, fn):", "         \"Call the provided function (which doesn't take any arguments) and\\n           do the appropriate error handling.  If errorsAreFatal is False, this\\n           function will just print the exception and keep going.\\n        \""]]], "op-name": "replace_In_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "108": {"result-type": "normal", "occurrence": 20, "result-data": [{"occurrence": 20, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line == '') and (self._includeDepth in 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "20", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "464": {"result-type": "normal", "occurrence": 17, "result-data": [{"occurrence": 17, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -292,7 +292,7 @@", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "-                elif (stripped[1] == '@'):", "+                elif (stripped[1] != '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))", "                 else:", "                     newExcludedSet.add(stripped[1:])"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "506": {"result-type": "normal", "occurrence": 25, "result-data": [{"occurrence": 25, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line > '') or (line.lstrip()[0] == '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "25", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "422": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -394,7 +394,7 @@", "                 elif (args and (args[0] == '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "-                    if (self.version >= version.F8):", "+                    if (self.version <= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     lineIter.put(line)", "                     lineno -= 1"]]], "op-name": "replace_GtE_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_LtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "69": {"result-type": "normal", "occurrence": 21, "result-data": [{"occurrence": 21, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -383,7 +383,7 @@", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)", "-                if (args and (args[0] == '%end')):", "+                if (args and (args[0] <= '%end')):", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "21", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "120": {"result-type": "normal", "occurrence": 32, "result-data": [{"occurrence": 32, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -455,7 +455,7 @@", "             if (self._state == STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "-                elif (args[0][0] == '%'):", "+                elif (args[0][0] in '%'):", "                     newSection = args[0]", "                     if (not self._validState(newSection)):", "                         if self.unknownSectionIsFatal:"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "32", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "156": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp != '/bin/sh') and (self.interp > '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "520": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -406,7 +406,7 @@", " ", "     def _validState(self, st):", "         'Is the given section tag one that has been registered with the parser?'", "-        return (st in list(self._sections.keys()))", "+        return (st >= list(self._sections.keys()))", " ", "     def _tryFunc(self, fn):", "         \"Call the provided function (which doesn't take any arguments) and\\n           do the appropriate error handling.  If errorsAreFatal is False, this\\n           function will just print the exception and keep going.\\n        \""]]], "op-name": "replace_In_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "580": {"result-type": "normal", "occurrence": 30, "result-data": [{"occurrence": 30, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -452,7 +452,7 @@", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue", "-            if (self._state == STATE_COMMANDS):", "+            if (self._state >= STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "30", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "285": {"result-type": "normal", "occurrence": 10, "result-data": [{"occurrence": 10, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -235,7 +235,7 @@", "             p.sort()", "             for pkg in p:", "                 pkgs += ('-%s\\n' % pkg)", "-            if ((pkgs == '') and (not self.seen)):", "+            if ((pkgs not in '') and (not self.seen)):", "                 return ''", "         retval = '\\n%packages'", "         if self.default:"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "186": {"result-type": "normal", "occurrence": 19, "result-data": [{"occurrence": 19, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line is '') and (self._includeDepth == 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "19", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "481": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -28,7 +28,7 @@", "             l = next(lineIter)", "         except StopIteration:", "             break", "-        if (l == ''):", "+        if (l > ''):", "             break", "         lineno += 1", "         ksurl = None"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "370": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -130,7 +130,7 @@", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "-        elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "+        elif (self.type is not constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "539": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -488,7 +488,7 @@", "         if reset:", "             self._reset()", "         if (not os.path.exists(f)):", "-            if ((self._includeDepth - 1) in self.currentdir):", "+            if ((self._includeDepth - 1) <= self.currentdir):", "                 if os.path.exists(os.path.join(self.currentdir[(self._includeDepth - 1)], f)):", "                     f = os.path.join(self.currentdir[(self._includeDepth - 1)], f)", "         cd = os.path.dirname(f)"]]], "op-name": "replace_In_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "339": {"result-type": "normal", "occurrence": 18, "result-data": [{"occurrence": 18, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -360,7 +360,7 @@", "         'Kickstart recognizes a couple special comments.'", "         if (self._state != STATE_COMMANDS):", "             return", "-        if (line[:10] == '#platform='):", "+        if (line[:10] < '#platform='):", "             self.handler.platform = self._line[10:].strip()", " ", "     def _readSection(self, lineIter, lineno):"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "451": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -132,7 +132,7 @@", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "-        elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "+        elif (self.type != constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "126": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -358,7 +358,7 @@", " ", "     def _handleSpecialComments(self, line):", "         'Kickstart recognizes a couple special comments.'", "-        if (self._state != STATE_COMMANDS):", "+        if (self._state is STATE_COMMANDS):", "             return", "         if (line[:10] == '#platform='):", "             self.handler.platform = self._line[10:].strip()"]]], "op-name": "replace_NotEq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "32": {"result-type": "normal", "occurrence": 23, "result-data": [{"occurrence": 23, "line_number": 775, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -480,7 +480,7 @@", "         'Process a kickstart file, provided as the string str.'", "         if reset:", "             self._reset()", "-        i = PutBackIterator((s.splitlines(True) + ['']))", "+        i = PutBackIterator((s.splitlines(False) + ['']))", "         self._stateMachine(i)", " ", "     def readKickstart(self, f, reset=True):"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "23", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "110": {"result-type": "normal", "occurrence": 22, "result-data": [{"occurrence": 22, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -386,7 +386,7 @@", "                 if (args and (args[0] == '%end')):", "                     self._finalize(obj)", "                     break", "-                elif (args and (args[0] == '%include')):", "+                elif (args and (args[0] in '%include')):", "                     if ((len(args) == 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "22", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "410": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -267,7 +267,7 @@", "         if (ns.nodefaults and ns.optional):", "             raise KickstartParseError(_('Group cannot specify both --nodefaults and --optional'))", "         grp = ' '.join(extra)", "-        if (grp in [g.name for g in self.groupList]):", "+        if (grp == [g.name for g in self.groupList]):", "             return", "         if ns.nodefaults:", "             self.groupList.append(Group(name=grp, include=constants.GROUP_REQUIRED))"]]], "op-name": "replace_In_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "54": {"result-type": "normal", "occurrence": 6, "result-data": [{"occurrence": 6, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -138,7 +138,7 @@", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "-        if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "+        if ((self.type <= constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "         if (self.logfile is not None):", "             retval += (' --logfile=%s' % self.logfile)"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "128": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -185,7 +185,7 @@", "         return (self.name != other.name)", " ", "     def __gt__(self, other):", "-        return (self.name > other.name)", "+        return (self.name >= other.name)", " ", "     def __ge__(self, other):", "         return (self.name >= other.name)"]]], "op-name": "replace_Gt_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "88": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -28,7 +28,7 @@", "             l = next(lineIter)", "         except StopIteration:", "             break", "-        if (l == ''):", "+        if (l in ''):", "             break", "         lineno += 1", "         ksurl = None"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "347": {"result-type": "normal", "occurrence": 26, "result-data": [{"occurrence": 26, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line == '') or (line.lstrip()[0] < '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "26", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "585": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -140,7 +140,7 @@", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "-        if (self.logfile is not None):", "+        if (self.logfile > None):", "             retval += (' --logfile=%s' % self.logfile)", "         if self.errorOnFail:", "             retval += ' --erroronfail'"]]], "op-name": "replace_IsNot_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "99": {"result-type": "normal", "occurrence": 11, "result-data": [{"occurrence": 11, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -246,7 +246,7 @@", "             retval += ' --nobase'", "         if self.nocore:", "             retval += ' --nocore'", "-        if (self.handleMissing == constants.KS_MISSING_IGNORE):", "+        if (self.handleMissing in constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "         if (self.instLangs is not None):", "             retval += (' --instLangs=%s' % self.instLangs)"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "293": {"result-type": "normal", "occurrence": 18, "result-data": [{"occurrence": 18, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -360,7 +360,7 @@", "         'Kickstart recognizes a couple special comments.'", "         if (self._state != STATE_COMMANDS):", "             return", "-        if (line[:10] == '#platform='):", "+        if (line[:10] not in '#platform='):", "             self.handler.platform = self._line[10:].strip()", " ", "     def _readSection(self, lineIter, lineno):"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "85": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -488,7 +488,7 @@", "         if reset:", "             self._reset()", "         if (not os.path.exists(f)):", "-            if ((self._includeDepth - 1) in self.currentdir):", "+            if ((self._includeDepth - 1) is not self.currentdir):", "                 if os.path.exists(os.path.join(self.currentdir[(self._includeDepth - 1)], f)):", "                     f = os.path.join(self.currentdir[(self._includeDepth - 1)], f)", "         cd = os.path.dirname(f)"]]], "op-name": "replace_In_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "208": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -188,7 +188,7 @@", "         return (self.name > other.name)", " ", "     def __ge__(self, other):", "-        return (self.name >= other.name)", "+        return (self.name == other.name)", "     __hash__ = KickstartObject.__hash__", " ", " class Packages(KickstartObject):"]]], "op-name": "replace_GtE_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "149": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -254,7 +254,7 @@", "             retval += ' --multilib'", "         if self.excludeWeakdeps:", "             retval += ' --excludeWeakdeps'", "-        if (self._ver >= version.F8):", "+        if (self._ver is not version.F8):", "             return (((retval + '\\n') + pkgs) + '\\n%end\\n')", "         else:", "             return (((retval + '\\n') + pkgs) + '\\n')"]]], "op-name": "replace_GtE_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_IsNot", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "198": {"result-type": "normal", "occurrence": 31, "result-data": [{"occurrence": 31, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -453,7 +453,7 @@", "                 self._handleInclude(args[1])", "                 continue", "             if (self._state == STATE_COMMANDS):", "-                if (args[0] == '%ksappend'):", "+                if (args[0] is '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):", "                     newSection = args[0]"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "31", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "342": {"result-type": "normal", "occurrence": 21, "result-data": [{"occurrence": 21, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -383,7 +383,7 @@", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)", "-                if (args and (args[0] == '%end')):", "+                if (args and (args[0] < '%end')):", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "21", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "326": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -134,7 +134,7 @@", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "-        elif (self.type == constants.KS_SCRIPT_ONERROR):", "+        elif (self.type < constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "517": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -182,7 +182,7 @@", "         return (self.name == other.name)", " ", "     def __ne__(self, other):", "-        return (self.name != other.name)", "+        return (self.name == other.name)", " ", "     def __gt__(self, other):", "         return (self.name > other.name)"]]], "op-name": "replace_NotEq_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "165": {"result-type": "normal", "occurrence": 6, "result-data": [{"occurrence": 6, "line_number": 710, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -441,7 +441,7 @@", "                 if (self._line == ''):", "                     break", "             except StopIteration:", "-                break", "+                continue", "             lineno += 1", "             if self._isBlankOrComment(self._line):", "                 self._handleSpecialComments(self._line)"]]], "op-name": "break_continue_replacement", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "break_continue_replacement", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "92": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -132,7 +132,7 @@", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "-        elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "+        elif (self.type in constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "26": {"result-type": "normal", "occurrence": 17, "result-data": [{"occurrence": 17, "line_number": 502, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -309,7 +309,7 @@", " class KickstartParser(object):", "     \"The kickstart file parser class as represented by a basic state\\n       machine.  To create a specialized parser, make a subclass and override\\n       any of the methods you care about.  Methods that don't need to do\\n       anything may just pass.  However, _stateMachine should never be\\n       overridden.\\n    \"", " ", "-    def __init__(self, handler, followIncludes=True, errorsAreFatal=True, missingIncludeIsFatal=True, unknownSectionIsFatal=True):", "+    def __init__(self, handler, followIncludes=True, errorsAreFatal=True, missingIncludeIsFatal=True, unknownSectionIsFatal=False):", "         'Create a new KickstartParser instance.  Instance attributes:\\n\\n           errorsAreFatal        -- Should errors cause processing to halt, or\\n                                    just print a message to the screen?  This\\n                                    is most useful for writing syntax checkers\\n                                    that may want to continue after an error is\\n                                    encountered.\\n           followIncludes        -- If %include is seen, should the included\\n                                    file be checked as well or skipped?\\n           handler               -- An instance of a BaseHandler subclass.  If\\n                                    None, the input file will still be parsed\\n                                    but no data will be saved and no commands\\n                                    will be executed.\\n           missingIncludeIsFatal -- Should missing include files be fatal, even\\n                                    if errorsAreFatal is False?\\n           unknownSectionIsFatal -- Should an unknown %section be fatal?  Not all\\n                                    sections are handled by pykickstart.  Some are\\n                                    user-defined, so there should be a way to have\\n                                    pykickstart ignore them.\\n        '", "         self.errorsAreFatal = errorsAreFatal", "         self.errorsCount = 0"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "202": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -379,7 +379,7 @@", "                 continue", "             if line.lstrip().startswith('%'):", "                 possibleSectionStart = line.split()[0]", "-                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart not in ('%end', '%include'))):", "+                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart > ('%end', '%include'))):", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)"]]], "op-name": "replace_NotIn_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "113": {"result-type": "normal", "occurrence": 25, "result-data": [{"occurrence": 25, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line in '') or (line.lstrip()[0] == '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "25", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "62": {"result-type": "normal", "occurrence": 14, "result-data": [{"occurrence": 14, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -289,7 +289,7 @@", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "-            elif (stripped[0] == '-'):", "+            elif (stripped[0] <= '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "385": {"result-type": "normal", "occurrence": 18, "result-data": [{"occurrence": 18, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -360,7 +360,7 @@", "         'Kickstart recognizes a couple special comments.'", "         if (self._state != STATE_COMMANDS):", "             return", "-        if (line[:10] == '#platform='):", "+        if (line[:10] is not '#platform='):", "             self.handler.platform = self._line[10:].strip()", " ", "     def _readSection(self, lineIter, lineno):"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "392": {"result-type": "normal", "occurrence": 25, "result-data": [{"occurrence": 25, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line is not '') or (line.lstrip()[0] == '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "25", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "353": {"result-type": "normal", "occurrence": 32, "result-data": [{"occurrence": 32, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -455,7 +455,7 @@", "             if (self._state == STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "-                elif (args[0][0] == '%'):", "+                elif (args[0][0] < '%'):", "                     newSection = args[0]", "                     if (not self._validState(newSection)):", "                         if self.unknownSectionIsFatal:"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "32", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "159": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": 68, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -27,7 +27,7 @@", "         try:", "             l = next(lineIter)", "         except StopIteration:", "-            break", "+            continue", "         if (l == ''):", "             break", "         lineno += 1"]]], "op-name": "break_continue_replacement", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "break_continue_replacement", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "93": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -134,7 +134,7 @@", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "-        elif (self.type == constants.KS_SCRIPT_ONERROR):", "+        elif (self.type in constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "213": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -406,7 +406,7 @@", " ", "     def _validState(self, st):", "         'Is the given section tag one that has been registered with the parser?'", "-        return (st in list(self._sections.keys()))", "+        return (st is list(self._sections.keys()))", " ", "     def _tryFunc(self, fn):", "         \"Call the provided function (which doesn't take any arguments) and\\n           do the appropriate error handling.  If errorsAreFatal is False, this\\n           function will just print the exception and keep going.\\n        \""]]], "op-name": "replace_In_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "36": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -46,7 +46,7 @@", "             contents = load_to_str(ksurl)", "         except KickstartError as e:", "             raise KickstartError(formatErrorMsg(lineno, msg=(_('Unable to open %%ksappend file: %s') % str(e))))", "-        if (contents is not None):", "+        if (contents < None):", "             retval += contents.encode(sys.getdefaultencoding())", "     return retval", " "]]], "op-name": "replace_IsNot_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "575": {"result-type": "normal", "occurrence": 25, "result-data": [{"occurrence": 25, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line >= '') or (line.lstrip()[0] == '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "25", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "299": {"result-type": "normal", "occurrence": 24, "result-data": [{"occurrence": 24, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -391,7 +391,7 @@", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue", "-                elif (args and (args[0] == '%ksappend')):", "+                elif (args and (args[0] not in '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "                     if (self.version >= version.F8):"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "24", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "403": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -488,7 +488,7 @@", "         if reset:", "             self._reset()", "         if (not os.path.exists(f)):", "-            if ((self._includeDepth - 1) in self.currentdir):", "+            if ((self._includeDepth - 1) not in self.currentdir):", "                 if os.path.exists(os.path.join(self.currentdir[(self._includeDepth - 1)], f)):", "                     f = os.path.join(self.currentdir[(self._includeDepth - 1)], f)", "         cd = os.path.dirname(f)"]]], "op-name": "replace_In_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "584": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -46,7 +46,7 @@", "             contents = load_to_str(ksurl)", "         except KickstartError as e:", "             raise KickstartError(formatErrorMsg(lineno, msg=(_('Unable to open %%ksappend file: %s') % str(e))))", "-        if (contents is not None):", "+        if (contents > None):", "             retval += contents.encode(sys.getdefaultencoding())", "     return retval", " "]]], "op-name": "replace_IsNot_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "473": {"result-type": "normal", "occurrence": 26, "result-data": [{"occurrence": 26, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line == '') or (line.lstrip()[0] != '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "26", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "469": {"result-type": "normal", "occurrence": 22, "result-data": [{"occurrence": 22, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -386,7 +386,7 @@", "                 if (args and (args[0] == '%end')):", "                     self._finalize(obj)", "                     break", "-                elif (args and (args[0] == '%include')):", "+                elif (args and (args[0] != '%include')):", "                     if ((len(args) == 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "22", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "254": {"result-type": "normal", "occurrence": 39, "result-data": [{"occurrence": 39, "line_number": 723, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -448,7 +448,7 @@", "                 continue", "             args = shlex.split(self._line, comments=True)", "             if (args[0] == '%include'):", "-                if ((len(args) == 1) or (not args[1])):", "+                if ((len(args) == 2) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "39", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "278": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -130,7 +130,7 @@", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "-        elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "+        elif (self.type not in constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "252": {"result-type": "normal", "occurrence": 37, "result-data": [{"occurrence": 37, "line_number": 712, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -442,7 +442,7 @@", "                     break", "             except StopIteration:", "                 break", "-            lineno += 1", "+            lineno += 2", "             if self._isBlankOrComment(self._line):", "                 self._handleSpecialComments(self._line)", "                 continue"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "37", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "407": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -254,7 +254,7 @@", "             retval += ' --multilib'", "         if self.excludeWeakdeps:", "             retval += ' --excludeWeakdeps'", "-        if (self._ver >= version.F8):", "+        if (self._ver < version.F8):", "             return (((retval + '\\n') + pkgs) + '\\n%end\\n')", "         else:", "             return (((retval + '\\n') + pkgs) + '\\n')"]]], "op-name": "replace_GtE_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "234": {"result-type": "normal", "occurrence": 19, "result-data": [{"occurrence": 19, "line_number": 592, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -360,7 +360,7 @@", "         'Kickstart recognizes a couple special comments.'", "         if (self._state != STATE_COMMANDS):", "             return", "-        if (line[:10] == '#platform='):", "+        if (line[:11] == '#platform='):", "             self.handler.platform = self._line[10:].strip()", " ", "     def _readSection(self, lineIter, lineno):"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "19", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "261": {"result-type": "normal", "occurrence": 46, "result-data": [{"occurrence": 46, "line_number": 762, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -471,7 +471,7 @@", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "             elif (self._state == STATE_END):", "                 break", "-            elif (self._includeDepth > 0):", "+            elif (self._includeDepth > 1):", "                 lineIter.put(self._line)", "                 lineno -= 1", "                 lineno = self._readSection(lineIter, lineno)"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "46", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "337": {"result-type": "normal", "occurrence": 16, "result-data": [{"occurrence": 16, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] == '@^') and (self.environment < stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "424": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -46,7 +46,7 @@", "             contents = load_to_str(ksurl)", "         except KickstartError as e:", "             raise KickstartError(formatErrorMsg(lineno, msg=(_('Unable to open %%ksappend file: %s') % str(e))))", "-        if (contents is not None):", "+        if (contents >= None):", "             retval += contents.encode(sys.getdefaultencoding())", "     return retval", " "]]], "op-name": "replace_IsNot_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "366": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -379,7 +379,7 @@", "                 continue", "             if line.lstrip().startswith('%'):", "                 possibleSectionStart = line.split()[0]", "-                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart not in ('%end', '%include'))):", "+                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart in ('%end', '%include'))):", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)"]]], "op-name": "replace_NotIn_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "335": {"result-type": "normal", "occurrence": 14, "result-data": [{"occurrence": 14, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -289,7 +289,7 @@", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "-            elif (stripped[0] == '-'):", "+            elif (stripped[0] < '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "269": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -188,7 +188,7 @@", "         return (self.name > other.name)", " ", "     def __ge__(self, other):", "-        return (self.name >= other.name)", "+        return (self.name not in other.name)", "     __hash__ = KickstartObject.__hash__", " ", " class Packages(KickstartObject):"]]], "op-name": "replace_GtE_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "303": {"result-type": "normal", "occurrence": 28, "result-data": [{"occurrence": 28, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -447,7 +447,7 @@", "                 self._handleSpecialComments(self._line)", "                 continue", "             args = shlex.split(self._line, comments=True)", "-            if (args[0] == '%include'):", "+            if (args[0] not in '%include'):", "                 if ((len(args) == 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "28", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "465": {"result-type": "normal", "occurrence": 18, "result-data": [{"occurrence": 18, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -360,7 +360,7 @@", "         'Kickstart recognizes a couple special comments.'", "         if (self._state != STATE_COMMANDS):", "             return", "-        if (line[:10] == '#platform='):", "+        if (line[:10] != '#platform='):", "             self.handler.platform = self._line[10:].strip()", " ", "     def _readSection(self, lineIter, lineno):"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "494": {"result-type": "normal", "occurrence": 13, "result-data": [{"occurrence": 13, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -287,7 +287,7 @@", "             stripped = pkg.strip()", "             if (stripped[0:2] == '@^'):", "                 self.environment = stripped[2:]", "-            elif (stripped[0] == '@'):", "+            elif (stripped[0] > '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "358": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -358,7 +358,7 @@", " ", "     def _handleSpecialComments(self, line):", "         'Kickstart recognizes a couple special comments.'", "-        if (self._state != STATE_COMMANDS):", "+        if (self._state <= STATE_COMMANDS):", "             return", "         if (line[:10] == '#platform='):", "             self.handler.platform = self._line[10:].strip()"]]], "op-name": "replace_NotEq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "268": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -149,7 +149,7 @@", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))", "-        elif (self._ver >= version.F8):", "+        elif (self._ver not in version.F8):", "             return (retval + ('\\n%s\\n%%end\\n' % self.script))", "         else:", "             return (retval + ('\\n%s\\n' % self.script))"]]], "op-name": "replace_GtE_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "248": {"result-type": "normal", "occurrence": 33, "result-data": [{"occurrence": 33, "line_number": 679, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line == '') or (line.lstrip()[1] == '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "33", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "577": {"result-type": "normal", "occurrence": 27, "result-data": [{"occurrence": 27, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -438,7 +438,7 @@", "         while True:", "             try:", "                 self._line = next(lineIter)", "-                if (self._line == ''):", "+                if (self._line >= ''):", "                     break", "             except StopIteration:", "                 break"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "27", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "376": {"result-type": "normal", "occurrence": 9, "result-data": [{"occurrence": 9, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -179,7 +179,7 @@", "         return (self.name <= other.name)", " ", "     def __eq__(self, other):", "-        return (self.name == other.name)", "+        return (self.name is not other.name)", " ", "     def __ne__(self, other):", "         return (self.name != other.name)"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "237": {"result-type": "normal", "occurrence": 22, "result-data": [{"occurrence": 22, "line_number": 610, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -374,7 +374,7 @@", "                     self._finalize(obj)", "             except StopIteration:", "                 break", "-            lineno += 1", "+            lineno += 2", "             if (self._isBlankOrComment(line) and (not obj.allLines)):", "                 continue", "             if line.lstrip().startswith('%'):"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "22", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "519": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -267,7 +267,7 @@", "         if (ns.nodefaults and ns.optional):", "             raise KickstartParseError(_('Group cannot specify both --nodefaults and --optional'))", "         grp = ' '.join(extra)", "-        if (grp in [g.name for g in self.groupList]):", "+        if (grp >= [g.name for g in self.groupList]):", "             return", "         if ns.nodefaults:", "             self.groupList.append(Group(name=grp, include=constants.GROUP_REQUIRED))"]]], "op-name": "replace_In_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "100": {"result-type": "normal", "occurrence": 12, "result-data": [{"occurrence": 12, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -285,7 +285,7 @@", "         excludedGroupList = []", "         for pkg in pkgList:", "             stripped = pkg.strip()", "-            if (stripped[0:2] == '@^'):", "+            if (stripped[0:2] in '@^'):", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "529": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -358,7 +358,7 @@", " ", "     def _handleSpecialComments(self, line):", "         'Kickstart recognizes a couple special comments.'", "-        if (self._state != STATE_COMMANDS):", "+        if (self._state >= STATE_COMMANDS):", "             return", "         if (line[:10] == '#platform='):", "             self.handler.platform = self._line[10:].strip()"]]], "op-name": "replace_NotEq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "304": {"result-type": "normal", "occurrence": 29, "result-data": [{"occurrence": 29, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -448,7 +448,7 @@", "                 continue", "             args = shlex.split(self._line, comments=True)", "             if (args[0] == '%include'):", "-                if ((len(args) == 1) or (not args[1])):", "+                if ((len(args) not in 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "29", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "273": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -185,7 +185,7 @@", "         return (self.name != other.name)", " ", "     def __gt__(self, other):", "-        return (self.name > other.name)", "+        return (self.name <= other.name)", " ", "     def __ge__(self, other):", "         return (self.name >= other.name)"]]], "op-name": "replace_Gt_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "195": {"result-type": "normal", "occurrence": 28, "result-data": [{"occurrence": 28, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -447,7 +447,7 @@", "                 self._handleSpecialComments(self._line)", "                 continue", "             args = shlex.split(self._line, comments=True)", "-            if (args[0] == '%include'):", "+            if (args[0] is '%include'):", "                 if ((len(args) == 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "28", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "298": {"result-type": "normal", "occurrence": 23, "result-data": [{"occurrence": 23, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -387,7 +387,7 @@", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):", "-                    if ((len(args) == 1) or (not args[1])):", "+                    if ((len(args) not in 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "23", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "189": {"result-type": "normal", "occurrence": 22, "result-data": [{"occurrence": 22, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -386,7 +386,7 @@", "                 if (args and (args[0] == '%end')):", "                     self._finalize(obj)", "                     break", "-                elif (args and (args[0] == '%include')):", "+                elif (args and (args[0] is '%include')):", "                     if ((len(args) == 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "22", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "450": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -130,7 +130,7 @@", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "-        elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "+        elif (self.type != constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "547": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -267,7 +267,7 @@", "         if (ns.nodefaults and ns.optional):", "             raise KickstartParseError(_('Group cannot specify both --nodefaults and --optional'))", "         grp = ' '.join(extra)", "-        if (grp in [g.name for g in self.groupList]):", "+        if (grp < [g.name for g in self.groupList]):", "             return", "         if ns.nodefaults:", "             self.groupList.append(Group(name=grp, include=constants.GROUP_REQUIRED))"]]], "op-name": "replace_In_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "185": {"result-type": "normal", "occurrence": 18, "result-data": [{"occurrence": 18, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -360,7 +360,7 @@", "         'Kickstart recognizes a couple special comments.'", "         if (self._state != STATE_COMMANDS):", "             return", "-        if (line[:10] == '#platform='):", "+        if (line[:10] is '#platform='):", "             self.handler.platform = self._line[10:].strip()", " ", "     def _readSection(self, lineIter, lineno):"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "492": {"result-type": "normal", "occurrence": 11, "result-data": [{"occurrence": 11, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -246,7 +246,7 @@", "             retval += ' --nobase'", "         if self.nocore:", "             retval += ' --nocore'", "-        if (self.handleMissing == constants.KS_MISSING_IGNORE):", "+        if (self.handleMissing > constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "         if (self.instLangs is not None):", "             retval += (' --instLangs=%s' % self.instLangs)"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "437": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -140,7 +140,7 @@", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "-        if (self.logfile is not None):", "+        if (self.logfile <= None):", "             retval += (' --logfile=%s' % self.logfile)", "         if self.errorOnFail:", "             retval += ' --erroronfail'"]]], "op-name": "replace_IsNot_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "516": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp != '/bin/sh') and (self.interp == '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "371": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -132,7 +132,7 @@", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "-        elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "+        elif (self.type is not constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "77": {"result-type": "normal", "occurrence": 29, "result-data": [{"occurrence": 29, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -448,7 +448,7 @@", "                 continue", "             args = shlex.split(self._line, comments=True)", "             if (args[0] == '%include'):", "-                if ((len(args) == 1) or (not args[1])):", "+                if ((len(args) <= 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "29", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "530": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -145,7 +145,7 @@", "         if self.errorOnFail:", "             retval += ' --erroronfail'", "         if self.script.endswith('\\n'):", "-            if (self._ver >= version.F8):", "+            if (self._ver is version.F8):", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))"]]], "op-name": "replace_GtE_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "550": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -28,7 +28,7 @@", "             l = next(lineIter)", "         except StopIteration:", "             break", "-        if (l == ''):", "+        if (l >= ''):", "             break", "         lineno += 1", "         ksurl = None"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "393": {"result-type": "normal", "occurrence": 26, "result-data": [{"occurrence": 26, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line == '') or (line.lstrip()[0] is not '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "26", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "239": {"result-type": "normal", "occurrence": 24, "result-data": [{"occurrence": 24, "line_number": 630, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -383,7 +383,7 @@", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)", "-                if (args and (args[0] == '%end')):", "+                if (args and (args[1] == '%end')):", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "24", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "346": {"result-type": "normal", "occurrence": 25, "result-data": [{"occurrence": 25, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line < '') or (line.lstrip()[0] == '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "25", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "322": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -126,7 +126,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.type == constants.KS_SCRIPT_PRE):", "+        if (self.type < constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "203": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -46,7 +46,7 @@", "             contents = load_to_str(ksurl)", "         except KickstartError as e:", "             raise KickstartError(formatErrorMsg(lineno, msg=(_('Unable to open %%ksappend file: %s') % str(e))))", "-        if (contents is not None):", "+        if (contents != None):", "             retval += contents.encode(sys.getdefaultencoding())", "     return retval", " "]]], "op-name": "replace_IsNot_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "233": {"result-type": "normal", "occurrence": 18, "result-data": [{"occurrence": 18, "line_number": 545, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -330,7 +330,7 @@", "     def _reset(self):", "         'Reset the internal variables of the state machine for a new kickstart file.'", "         self._state = STATE_COMMANDS", "-        self._includeDepth = 0", "+        self._includeDepth = 1", " ", "     def getSection(self, s):", "         \"Return a reference to the requested section (s must start with '%'s),\\n           or raise KeyError if not found.\\n        \""]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "558": {"result-type": "normal", "occurrence": 8, "result-data": [{"occurrence": 8, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -167,7 +167,7 @@", "         'Return a string formatted for output to a kickstart file.'", "         if (self.include == constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "-        elif (self.include == constants.GROUP_ALL):", "+        elif (self.include >= constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)", "         else:", "             return ('@%s' % self.name)"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "549": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -488,7 +488,7 @@", "         if reset:", "             self._reset()", "         if (not os.path.exists(f)):", "-            if ((self._includeDepth - 1) in self.currentdir):", "+            if ((self._includeDepth - 1) < self.currentdir):", "                 if os.path.exists(os.path.join(self.currentdir[(self._includeDepth - 1)], f)):", "                     f = os.path.join(self.currentdir[(self._includeDepth - 1)], f)", "         cd = os.path.dirname(f)"]]], "op-name": "replace_In_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "510": {"result-type": "normal", "occurrence": 29, "result-data": [{"occurrence": 29, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -448,7 +448,7 @@", "                 continue", "             args = shlex.split(self._line, comments=True)", "             if (args[0] == '%include'):", "-                if ((len(args) == 1) or (not args[1])):", "+                if ((len(args) > 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "29", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "87": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -471,7 +471,7 @@", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "             elif (self._state == STATE_END):", "                 break", "-            elif (self._includeDepth > 0):", "+            elif (self._includeDepth != 0):", "                 lineIter.put(self._line)", "                 lineno -= 1", "                 lineno = self._readSection(lineIter, lineno)"]]], "op-name": "replace_Gt_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "22": {"result-type": "normal", "occurrence": 13, "result-data": [{"occurrence": 13, "line_number": 419, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -262,7 +262,7 @@", "     def _processGroup(self, line):", "         op = KSOptionParser(prog='', description='', version=version.DEVEL)", "         op.add_argument('--nodefaults', action='store_true', default=False, help='', version=version.DEVEL)", "-        op.add_argument('--optional', action='store_true', default=False, help='', version=version.DEVEL)", "+        op.add_argument('--optional', action='store_true', default=True, help='', version=version.DEVEL)", "         (ns, extra) = op.parse_known_args(args=line.split())", "         if (ns.nodefaults and ns.optional):", "             raise KickstartParseError(_('Group cannot specify both --nodefaults and --optional'))"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "327": {"result-type": "normal", "occurrence": 6, "result-data": [{"occurrence": 6, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -138,7 +138,7 @@", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "-        if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "+        if ((self.type < constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "         if (self.logfile is not None):", "             retval += (' --logfile=%s' % self.logfile)"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "101": {"result-type": "normal", "occurrence": 13, "result-data": [{"occurrence": 13, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -287,7 +287,7 @@", "             stripped = pkg.strip()", "             if (stripped[0:2] == '@^'):", "                 self.environment = stripped[2:]", "-            elif (stripped[0] == '@'):", "+            elif (stripped[0] in '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "356": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp != '/bin/sh') and (self.interp <= '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "118": {"result-type": "normal", "occurrence": 30, "result-data": [{"occurrence": 30, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -452,7 +452,7 @@", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue", "-            if (self._state == STATE_COMMANDS):", "+            if (self._state in STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "30", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "537": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -267,7 +267,7 @@", "         if (ns.nodefaults and ns.optional):", "             raise KickstartParseError(_('Group cannot specify both --nodefaults and --optional'))", "         grp = ' '.join(extra)", "-        if (grp in [g.name for g in self.groupList]):", "+        if (grp <= [g.name for g in self.groupList]):", "             return", "         if ns.nodefaults:", "             self.groupList.append(Group(name=grp, include=constants.GROUP_REQUIRED))"]]], "op-name": "replace_In_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "144": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -369,7 +369,7 @@", "             try:", "                 line = next(lineIter)", "                 if ((line == '') and (self._includeDepth == 0)):", "-                    if (self.version >= version.F8):", "+                    if (self.version in version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)", "             except StopIteration:"]]], "op-name": "replace_GtE_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_In", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "27": {"result-type": "normal", "occurrence": 18, "result-data": [{"occurrence": 18, "line_number": 598, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -365,7 +365,7 @@", " ", "     def _readSection(self, lineIter, lineno):", "         obj = self._sections[self._state]", "-        while True:", "+        while False:", "             try:", "                 line = next(lineIter)", "                 if ((line == '') and (self._includeDepth == 0)):"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "224": {"result-type": "normal", "occurrence": 9, "result-data": [{"occurrence": 9, "line_number": 459, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -289,7 +289,7 @@", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "-            elif (stripped[0] == '-'):", "+            elif (stripped[1] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "242": {"result-type": "normal", "occurrence": 27, "result-data": [{"occurrence": 27, "line_number": 635, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -387,7 +387,7 @@", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):", "-                    if ((len(args) == 1) or (not args[1])):", "+                    if ((len(args) == 1) or (not args[2])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "27", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "43": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -471,7 +471,7 @@", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "             elif (self._state == STATE_END):", "                 break", "-            elif (self._includeDepth > 0):", "+            elif (self._includeDepth is not 0):", "                 lineIter.put(self._line)", "                 lineno -= 1", "                 lineno = self._readSection(lineIter, lineno)"]]], "op-name": "replace_Gt_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "238": {"result-type": "normal", "occurrence": 23, "result-data": [{"occurrence": 23, "line_number": 622, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -378,7 +378,7 @@", "             if (self._isBlankOrComment(line) and (not obj.allLines)):", "                 continue", "             if line.lstrip().startswith('%'):", "-                possibleSectionStart = line.split()[0]", "+                possibleSectionStart = line.split()[1]", "                 if ((not self._validState(possibleSectionStart)) and (possibleSectionStart not in ('%end', '%include'))):", "                     obj.handleLine(line)", "                     continue"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "23", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "375": {"result-type": "normal", "occurrence": 8, "result-data": [{"occurrence": 8, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -167,7 +167,7 @@", "         'Return a string formatted for output to a kickstart file.'", "         if (self.include == constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "-        elif (self.include == constants.GROUP_ALL):", "+        elif (self.include is not constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)", "         else:", "             return ('@%s' % self.name)"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "160": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": 72, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -29,7 +29,7 @@", "         except StopIteration:", "             break", "         if (l == ''):", "-            break", "+            continue", "         lineno += 1", "         ksurl = None", "         ll = l.strip()"]]], "op-name": "break_continue_replacement", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "break_continue_replacement", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "579": {"result-type": "normal", "occurrence": 29, "result-data": [{"occurrence": 29, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -448,7 +448,7 @@", "                 continue", "             args = shlex.split(self._line, comments=True)", "             if (args[0] == '%include'):", "-                if ((len(args) == 1) or (not args[1])):", "+                if ((len(args) >= 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "29", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "546": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -379,7 +379,7 @@", "                 continue", "             if line.lstrip().startswith('%'):", "                 possibleSectionStart = line.split()[0]", "-                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart not in ('%end', '%include'))):", "+                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart is not ('%end', '%include'))):", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)"]]], "op-name": "replace_NotIn_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "430": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -176,7 +176,7 @@", "         return (self.name < other.name)", " ", "     def __le__(self, other):", "-        return (self.name <= other.name)", "+        return (self.name != other.name)", " ", "     def __eq__(self, other):", "         return (self.name == other.name)"]]], "op-name": "replace_LtE_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_LtE_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "484": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -130,7 +130,7 @@", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "-        elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "+        elif (self.type > constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "127": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -176,7 +176,7 @@", "         return (self.name < other.name)", " ", "     def __le__(self, other):", "-        return (self.name <= other.name)", "+        return (self.name > other.name)", " ", "     def __eq__(self, other):", "         return (self.name == other.name)"]]], "op-name": "replace_LtE_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_LtE_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "567": {"result-type": "normal", "occurrence": 17, "result-data": [{"occurrence": 17, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -292,7 +292,7 @@", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "-                elif (stripped[1] == '@'):", "+                elif (stripped[1] >= '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))", "                 else:", "                     newExcludedSet.add(stripped[1:])"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "184": {"result-type": "normal", "occurrence": 17, "result-data": [{"occurrence": 17, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -292,7 +292,7 @@", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "-                elif (stripped[1] == '@'):", "+                elif (stripped[1] is '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))", "                 else:", "                     newExcludedSet.add(stripped[1:])"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "235": {"result-type": "normal", "occurrence": 20, "result-data": [{"occurrence": 20, "line_number": 593, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -361,7 +361,7 @@", "         if (self._state != STATE_COMMANDS):", "             return", "         if (line[:10] == '#platform='):", "-            self.handler.platform = self._line[10:].strip()", "+            self.handler.platform = self._line[11:].strip()", " ", "     def _readSection(self, lineIter, lineno):", "         obj = self._sections[self._state]"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "20", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "409": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -394,7 +394,7 @@", "                 elif (args and (args[0] == '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "-                    if (self.version >= version.F8):", "+                    if (self.version < version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     lineIter.put(line)", "                     lineno -= 1"]]], "op-name": "replace_GtE_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Lt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "257": {"result-type": "normal", "occurrence": 42, "result-data": [{"occurrence": 42, "line_number": 731, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -453,7 +453,7 @@", "                 self._handleInclude(args[1])", "                 continue", "             if (self._state == STATE_COMMANDS):", "-                if (args[0] == '%ksappend'):", "+                if (args[1] == '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):", "                     newSection = args[0]"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "42", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "214": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -488,7 +488,7 @@", "         if reset:", "             self._reset()", "         if (not os.path.exists(f)):", "-            if ((self._includeDepth - 1) in self.currentdir):", "+            if ((self._includeDepth - 1) is self.currentdir):", "                 if os.path.exists(os.path.join(self.currentdir[(self._includeDepth - 1)], f)):", "                     f = os.path.join(self.currentdir[(self._includeDepth - 1)], f)", "         cd = os.path.dirname(f)"]]], "op-name": "replace_In_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "106": {"result-type": "normal", "occurrence": 18, "result-data": [{"occurrence": 18, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -360,7 +360,7 @@", "         'Kickstart recognizes a couple special comments.'", "         if (self._state != STATE_COMMANDS):", "             return", "-        if (line[:10] == '#platform='):", "+        if (line[:10] in '#platform='):", "             self.handler.platform = self._line[10:].strip()", " ", "     def _readSection(self, lineIter, lineno):"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "498": {"result-type": "normal", "occurrence": 17, "result-data": [{"occurrence": 17, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -292,7 +292,7 @@", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "-                elif (stripped[1] == '@'):", "+                elif (stripped[1] > '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))", "                 else:", "                     newExcludedSet.add(stripped[1:])"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "535": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -394,7 +394,7 @@", "                 elif (args and (args[0] == '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "-                    if (self.version >= version.F8):", "+                    if (self.version is version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     lineIter.put(line)", "                     lineno -= 1"]]], "op-name": "replace_GtE_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Is", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "191": {"result-type": "normal", "occurrence": 24, "result-data": [{"occurrence": 24, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -391,7 +391,7 @@", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue", "-                elif (args and (args[0] == '%ksappend')):", "+                elif (args and (args[0] is '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "                     if (self.version >= version.F8):"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "24", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "452": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -134,7 +134,7 @@", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "-        elif (self.type == constants.KS_SCRIPT_ONERROR):", "+        elif (self.type != constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "50": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -128,7 +128,7 @@", "         retval = ''", "         if (self.type == constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "-        elif (self.type == constants.KS_SCRIPT_POST):", "+        elif (self.type <= constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "133": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -140,7 +140,7 @@", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "-        if (self.logfile is not None):", "+        if (self.logfile not in None):", "             retval += (' --logfile=%s' % self.logfile)", "         if self.errorOnFail:", "             retval += ' --erroronfail'"]]], "op-name": "replace_IsNot_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "309": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -173,7 +173,7 @@", "             return ('@%s' % self.name)", " ", "     def __lt__(self, other):", "-        return (self.name < other.name)", "+        return (self.name is other.name)", " ", "     def __le__(self, other):", "         return (self.name <= other.name)"]]], "op-name": "replace_Lt_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Lt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "283": {"result-type": "normal", "occurrence": 8, "result-data": [{"occurrence": 8, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -167,7 +167,7 @@", "         'Return a string formatted for output to a kickstart file.'", "         if (self.include == constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "-        elif (self.include == constants.GROUP_ALL):", "+        elif (self.include not in constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)", "         else:", "             return ('@%s' % self.name)"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "406": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -188,7 +188,7 @@", "         return (self.name > other.name)", " ", "     def __ge__(self, other):", "-        return (self.name >= other.name)", "+        return (self.name < other.name)", "     __hash__ = KickstartObject.__hash__", " ", " class Packages(KickstartObject):"]]], "op-name": "replace_GtE_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "147": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -149,7 +149,7 @@", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))", "-        elif (self._ver >= version.F8):", "+        elif (self._ver is not version.F8):", "             return (retval + ('\\n%s\\n%%end\\n' % self.script))", "         else:", "             return (retval + ('\\n%s\\n' % self.script))"]]], "op-name": "replace_GtE_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "279": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -132,7 +132,7 @@", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "-        elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "+        elif (self.type not in constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "13": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": 222, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -120,7 +120,7 @@", "         self.inChroot = kwargs.get('inChroot', False)", "         self.lineno = kwargs.get('lineno', None)", "         self.logfile = kwargs.get('logfile', None)", "-        self.errorOnFail = kwargs.get('errorOnFail', False)", "+        self.errorOnFail = kwargs.get('errorOnFail', True)", "         self.type = kwargs.get('type', constants.KS_SCRIPT_PRE)", " ", "     def __str__(self):"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "359": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -145,7 +145,7 @@", "         if self.errorOnFail:", "             retval += ' --erroronfail'", "         if self.script.endswith('\\n'):", "-            if (self._ver >= version.F8):", "+            if (self._ver != version.F8):", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))"]]], "op-name": "replace_GtE_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "399": {"result-type": "normal", "occurrence": 32, "result-data": [{"occurrence": 32, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -455,7 +455,7 @@", "             if (self._state == STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "-                elif (args[0][0] == '%'):", "+                elif (args[0][0] is not '%'):", "                     newSection = args[0]", "                     if (not self._validState(newSection)):", "                         if self.unknownSectionIsFatal:"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "32", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "312": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -188,7 +188,7 @@", "         return (self.name > other.name)", " ", "     def __ge__(self, other):", "-        return (self.name >= other.name)", "+        return (self.name > other.name)", "     __hash__ = KickstartObject.__hash__", " ", " class Packages(KickstartObject):"]]], "op-name": "replace_GtE_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "562": {"result-type": "normal", "occurrence": 12, "result-data": [{"occurrence": 12, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -285,7 +285,7 @@", "         excludedGroupList = []", "         for pkg in pkgList:", "             stripped = pkg.strip()", "-            if (stripped[0:2] == '@^'):", "+            if (stripped[0:2] >= '@^'):", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "102": {"result-type": "normal", "occurrence": 14, "result-data": [{"occurrence": 14, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -289,7 +289,7 @@", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "-            elif (stripped[0] == '-'):", "+            elif (stripped[0] in '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "336": {"result-type": "normal", "occurrence": 15, "result-data": [{"occurrence": 15, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] < '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "170": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -130,7 +130,7 @@", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "-        elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "+        elif (self.type is constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "345": {"result-type": "normal", "occurrence": 24, "result-data": [{"occurrence": 24, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -391,7 +391,7 @@", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue", "-                elif (args and (args[0] == '%ksappend')):", "+                elif (args and (args[0] < '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "                     if (self.version >= version.F8):"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "24", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "12": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": 219, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -117,7 +117,7 @@", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.script = ''.join(script)", "         self.interp = kwargs.get('interp', '/bin/sh')", "-        self.inChroot = kwargs.get('inChroot', False)", "+        self.inChroot = kwargs.get('inChroot', True)", "         self.lineno = kwargs.get('lineno', None)", "         self.logfile = kwargs.get('logfile', None)", "         self.errorOnFail = kwargs.get('errorOnFail', False)"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "206": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -145,7 +145,7 @@", "         if self.errorOnFail:", "             retval += ' --erroronfail'", "         if self.script.endswith('\\n'):", "-            if (self._ver >= version.F8):", "+            if (self._ver == version.F8):", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))"]]], "op-name": "replace_GtE_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "542": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp != '/bin/sh') and (self.interp not in '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "30": {"result-type": "normal", "occurrence": 21, "result-data": [{"occurrence": 21, "line_number": 720, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -446,7 +446,7 @@", "             if self._isBlankOrComment(self._line):", "                 self._handleSpecialComments(self._line)", "                 continue", "-            args = shlex.split(self._line, comments=True)", "+            args = shlex.split(self._line, comments=False)", "             if (args[0] == '%include'):", "                 if ((len(args) == 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "21", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "581": {"result-type": "normal", "occurrence": 31, "result-data": [{"occurrence": 31, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -453,7 +453,7 @@", "                 self._handleInclude(args[1])", "                 continue", "             if (self._state == STATE_COMMANDS):", "-                if (args[0] == '%ksappend'):", "+                if (args[0] >= '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):", "                     newSection = args[0]"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "31", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "508": {"result-type": "normal", "occurrence": 27, "result-data": [{"occurrence": 27, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -438,7 +438,7 @@", "         while True:", "             try:", "                 self._line = next(lineIter)", "-                if (self._line == ''):", "+                if (self._line > ''):", "                     break", "             except StopIteration:", "                 break"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "27", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "332": {"result-type": "normal", "occurrence": 11, "result-data": [{"occurrence": 11, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -246,7 +246,7 @@", "             retval += ' --nobase'", "         if self.nocore:", "             retval += ' --nocore'", "-        if (self.handleMissing == constants.KS_MISSING_IGNORE):", "+        if (self.handleMissing < constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "         if (self.instLangs is not None):", "             retval += (' --instLangs=%s' % self.instLangs)"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "565": {"result-type": "normal", "occurrence": 15, "result-data": [{"occurrence": 15, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] >= '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "310": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -145,7 +145,7 @@", "         if self.errorOnFail:", "             retval += ' --erroronfail'", "         if self.script.endswith('\\n'):", "-            if (self._ver >= version.F8):", "+            if (self._ver > version.F8):", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))"]]], "op-name": "replace_GtE_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "21": {"result-type": "normal", "occurrence": 12, "result-data": [{"occurrence": 12, "line_number": 417, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -261,7 +261,7 @@", " ", "     def _processGroup(self, line):", "         op = KSOptionParser(prog='', description='', version=version.DEVEL)", "-        op.add_argument('--nodefaults', action='store_true', default=False, help='', version=version.DEVEL)", "+        op.add_argument('--nodefaults', action='store_true', default=True, help='', version=version.DEVEL)", "         op.add_argument('--optional', action='store_true', default=False, help='', version=version.DEVEL)", "         (ns, extra) = op.parse_known_args(args=line.split())", "         if (ns.nodefaults and ns.optional):"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "340": {"result-type": "normal", "occurrence": 19, "result-data": [{"occurrence": 19, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line < '') and (self._includeDepth == 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "19", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "502": {"result-type": "normal", "occurrence": 21, "result-data": [{"occurrence": 21, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -383,7 +383,7 @@", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)", "-                if (args and (args[0] == '%end')):", "+                if (args and (args[0] > '%end')):", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "21", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "538": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -406,7 +406,7 @@", " ", "     def _validState(self, st):", "         'Is the given section tag one that has been registered with the parser?'", "-        return (st in list(self._sections.keys()))", "+        return (st <= list(self._sections.keys()))", " ", "     def _tryFunc(self, fn):", "         \"Call the provided function (which doesn't take any arguments) and\\n           do the appropriate error handling.  If errorsAreFatal is False, this\\n           function will just print the exception and keep going.\\n        \""]]], "op-name": "replace_In_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "225": {"result-type": "normal", "occurrence": 10, "result-data": [{"occurrence": 10, "line_number": 460, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[2:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "256": {"result-type": "normal", "occurrence": 41, "result-data": [{"occurrence": 41, "line_number": 726, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -450,7 +450,7 @@", "             if (args[0] == '%include'):", "                 if ((len(args) == 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "-                self._handleInclude(args[1])", "+                self._handleInclude(args[2])", "                 continue", "             if (self._state == STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "41", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "116": {"result-type": "normal", "occurrence": 28, "result-data": [{"occurrence": 28, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -447,7 +447,7 @@", "                 self._handleSpecialComments(self._line)", "                 continue", "             args = shlex.split(self._line, comments=True)", "-            if (args[0] == '%include'):", "+            if (args[0] in '%include'):", "                 if ((len(args) == 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "28", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "368": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -126,7 +126,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.type == constants.KS_SCRIPT_PRE):", "+        if (self.type is not constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "381": {"result-type": "normal", "occurrence": 14, "result-data": [{"occurrence": 14, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -289,7 +289,7 @@", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "-            elif (stripped[0] == '-'):", "+            elif (stripped[0] is not '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "58": {"result-type": "normal", "occurrence": 10, "result-data": [{"occurrence": 10, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -235,7 +235,7 @@", "             p.sort()", "             for pkg in p:", "                 pkgs += ('-%s\\n' % pkg)", "-            if ((pkgs == '') and (not self.seen)):", "+            if ((pkgs <= '') and (not self.seen)):", "                 return ''", "         retval = '\\n%packages'", "         if self.default:"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "94": {"result-type": "normal", "occurrence": 6, "result-data": [{"occurrence": 6, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -138,7 +138,7 @@", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "-        if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "+        if ((self.type in constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "         if (self.logfile is not None):", "             retval += (' --logfile=%s' % self.logfile)"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "488": {"result-type": "normal", "occurrence": 7, "result-data": [{"occurrence": 7, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -165,7 +165,7 @@", " ", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "-        if (self.include == constants.GROUP_REQUIRED):", "+        if (self.include > constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "         elif (self.include == constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "364": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -394,7 +394,7 @@", "                 elif (args and (args[0] == '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "-                    if (self.version >= version.F8):", "+                    if (self.version != version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     lineIter.put(line)", "                     lineno -= 1"]]], "op-name": "replace_GtE_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_NotEq", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "16": {"result-type": "normal", "occurrence": 7, "result-data": [{"occurrence": 7, "line_number": 347, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -200,7 +200,7 @@", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.addBase = True", "         self.nocore = False", "-        self.default = False", "+        self.default = True", "         self.environment = None", "         self.excludedList = []", "         self.excludedGroupList = []"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "294": {"result-type": "normal", "occurrence": 19, "result-data": [{"occurrence": 19, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line not in '') and (self._includeDepth == 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "19", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "209": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -254,7 +254,7 @@", "             retval += ' --multilib'", "         if self.excludeWeakdeps:", "             retval += ' --excludeWeakdeps'", "-        if (self._ver >= version.F8):", "+        if (self._ver == version.F8):", "             return (((retval + '\\n') + pkgs) + '\\n%end\\n')", "         else:", "             return (((retval + '\\n') + pkgs) + '\\n')"]]], "op-name": "replace_GtE_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Eq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "548": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -406,7 +406,7 @@", " ", "     def _validState(self, st):", "         'Is the given section tag one that has been registered with the parser?'", "-        return (st in list(self._sections.keys()))", "+        return (st < list(self._sections.keys()))", " ", "     def _tryFunc(self, fn):", "         \"Call the provided function (which doesn't take any arguments) and\\n           do the appropriate error handling.  If errorsAreFatal is False, this\\n           function will just print the exception and keep going.\\n        \""]]], "op-name": "replace_In_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "174": {"result-type": "normal", "occurrence": 7, "result-data": [{"occurrence": 7, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -165,7 +165,7 @@", " ", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "-        if (self.include == constants.GROUP_REQUIRED):", "+        if (self.include is constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "         elif (self.include == constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "280": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -134,7 +134,7 @@", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "-        elif (self.type == constants.KS_SCRIPT_ONERROR):", "+        elif (self.type not in constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "148": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -188,7 +188,7 @@", "         return (self.name > other.name)", " ", "     def __ge__(self, other):", "-        return (self.name >= other.name)", "+        return (self.name is not other.name)", "     __hash__ = KickstartObject.__hash__", " ", " class Packages(KickstartObject):"]]], "op-name": "replace_GtE_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "379": {"result-type": "normal", "occurrence": 12, "result-data": [{"occurrence": 12, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -285,7 +285,7 @@", "         excludedGroupList = []", "         for pkg in pkgList:", "             stripped = pkg.strip()", "-            if (stripped[0:2] == '@^'):", "+            if (stripped[0:2] is not '@^'):", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "157": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -182,7 +182,7 @@", "         return (self.name == other.name)", " ", "     def __ne__(self, other):", "-        return (self.name != other.name)", "+        return (self.name > other.name)", " ", "     def __gt__(self, other):", "         return (self.name > other.name)"]]], "op-name": "replace_NotEq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "260": {"result-type": "normal", "occurrence": 45, "result-data": [{"occurrence": 45, "line_number": 737, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -456,7 +456,7 @@", "                 if (args[0] == '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):", "-                    newSection = args[0]", "+                    newSection = args[1]", "                     if (not self._validState(newSection)):", "                         if self.unknownSectionIsFatal:", "                             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown kickstart section: %s') % newSection)))"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "45", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "348": {"result-type": "normal", "occurrence": 27, "result-data": [{"occurrence": 27, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -438,7 +438,7 @@", "         while True:", "             try:", "                 self._line = next(lineIter)", "-                if (self._line == ''):", "+                if (self._line < ''):", "                     break", "             except StopIteration:", "                 break"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "27", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "162": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": 633, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -385,7 +385,7 @@", "                 args = shlex.split(line)", "                 if (args and (args[0] == '%end')):", "                     self._finalize(obj)", "-                    break", "+                    continue", "                 elif (args and (args[0] == '%include')):", "                     if ((len(args) == 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))"]]], "op-name": "break_continue_replacement", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "break_continue_replacement", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "499": {"result-type": "normal", "occurrence": 18, "result-data": [{"occurrence": 18, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -360,7 +360,7 @@", "         'Kickstart recognizes a couple special comments.'", "         if (self._state != STATE_COMMANDS):", "             return", "-        if (line[:10] == '#platform='):", "+        if (line[:10] > '#platform='):", "             self.handler.platform = self._line[10:].strip()", " ", "     def _readSection(self, lineIter, lineno):"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "553": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -130,7 +130,7 @@", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "-        elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "+        elif (self.type >= constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "249": {"result-type": "normal", "occurrence": 34, "result-data": [{"occurrence": 34, "line_number": 686, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -425,7 +425,7 @@", "     def _handleInclude(self, f):", "         if (not self.followIncludes):", "             return", "-        self._includeDepth += 1", "+        self._includeDepth += 2", "         try:", "             self.readKickstart(f, reset=False)", "         except KickstartError:"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "34", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "277": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -128,7 +128,7 @@", "         retval = ''", "         if (self.type == constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "-        elif (self.type == constants.KS_SCRIPT_POST):", "+        elif (self.type not in constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "301": {"result-type": "normal", "occurrence": 26, "result-data": [{"occurrence": 26, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line == '') or (line.lstrip()[0] not in '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "26", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "71": {"result-type": "normal", "occurrence": 23, "result-data": [{"occurrence": 23, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -387,7 +387,7 @@", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):", "-                    if ((len(args) == 1) or (not args[1])):", "+                    if ((len(args) <= 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "23", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "578": {"result-type": "normal", "occurrence": 28, "result-data": [{"occurrence": 28, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -447,7 +447,7 @@", "                 self._handleSpecialComments(self._line)", "                 continue", "             args = shlex.split(self._line, comments=True)", "-            if (args[0] == '%include'):", "+            if (args[0] >= '%include'):", "                 if ((len(args) == 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "28", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "23": {"result-type": "normal", "occurrence": 14, "result-data": [{"occurrence": 14, "line_number": 501, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -309,7 +309,7 @@", " class KickstartParser(object):", "     \"The kickstart file parser class as represented by a basic state\\n       machine.  To create a specialized parser, make a subclass and override\\n       any of the methods you care about.  Methods that don't need to do\\n       anything may just pass.  However, _stateMachine should never be\\n       overridden.\\n    \"", " ", "-    def __init__(self, handler, followIncludes=True, errorsAreFatal=True, missingIncludeIsFatal=True, unknownSectionIsFatal=True):", "+    def __init__(self, handler, followIncludes=False, errorsAreFatal=True, missingIncludeIsFatal=True, unknownSectionIsFatal=True):", "         'Create a new KickstartParser instance.  Instance attributes:\\n\\n           errorsAreFatal        -- Should errors cause processing to halt, or\\n                                    just print a message to the screen?  This\\n                                    is most useful for writing syntax checkers\\n                                    that may want to continue after an error is\\n                                    encountered.\\n           followIncludes        -- If %include is seen, should the included\\n                                    file be checked as well or skipped?\\n           handler               -- An instance of a BaseHandler subclass.  If\\n                                    None, the input file will still be parsed\\n                                    but no data will be saved and no commands\\n                                    will be executed.\\n           missingIncludeIsFatal -- Should missing include files be fatal, even\\n                                    if errorsAreFatal is False?\\n           unknownSectionIsFatal -- Should an unknown %section be fatal?  Not all\\n                                    sections are handled by pykickstart.  Some are\\n                                    user-defined, so there should be a way to have\\n                                    pykickstart ignore them.\\n        '", "         self.errorsAreFatal = errorsAreFatal", "         self.errorsCount = 0"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "141": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -149,7 +149,7 @@", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))", "-        elif (self._ver >= version.F8):", "+        elif (self._ver in version.F8):", "             return (retval + ('\\n%s\\n%%end\\n' % self.script))", "         else:", "             return (retval + ('\\n%s\\n' % self.script))"]]], "op-name": "replace_GtE_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "240": {"result-type": "normal", "occurrence": 25, "result-data": [{"occurrence": 25, "line_number": 634, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -386,7 +386,7 @@", "                 if (args and (args[0] == '%end')):", "                     self._finalize(obj)", "                     break", "-                elif (args and (args[0] == '%include')):", "+                elif (args and (args[1] == '%include')):", "                     if ((len(args) == 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "25", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "19": {"result-type": "normal", "occurrence": 10, "result-data": [{"occurrence": 10, "line_number": 357, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -210,7 +210,7 @@", "         self.packageList = []", "         self.instLangs = None", "         self.multiLib = False", "-        self.excludeWeakdeps = False", "+        self.excludeWeakdeps = True", "         self.seen = False", " ", "     def __str__(self):"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "6": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -299,7 +299,7 @@", "             else:", "                 newPackageSet.add(stripped)", "         excludedGroupNames = [g.name for g in excludedGroupList]", "-        self.groupList = [g for g in self.groupList if (g.name not in excludedGroupNames)]", "+        self.groupList = [g for g in self.groupList if (g.name != excludedGroupNames)]", "         self.excludedGroupList.extend(excludedGroupList)", "         existingPackageSet = ((existingPackageSet - newExcludedSet) | newPackageSet)", "         existingExcludedSet = ((existingExcludedSet - existingPackageSet) | newExcludedSet)"]]], "op-name": "replace_NotIn_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "290": {"result-type": "normal", "occurrence": 15, "result-data": [{"occurrence": 15, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] not in '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "556": {"result-type": "normal", "occurrence": 6, "result-data": [{"occurrence": 6, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -138,7 +138,7 @@", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "-        if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "+        if ((self.type >= constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "         if (self.logfile is not None):", "             retval += (' --logfile=%s' % self.logfile)"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "564": {"result-type": "normal", "occurrence": 14, "result-data": [{"occurrence": 14, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -289,7 +289,7 @@", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "-            elif (stripped[0] == '-'):", "+            elif (stripped[0] >= '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "479": {"result-type": "normal", "occurrence": 32, "result-data": [{"occurrence": 32, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -455,7 +455,7 @@", "             if (self._state == STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "-                elif (args[0][0] == '%'):", "+                elif (args[0][0] != '%'):", "                     newSection = args[0]", "                     if (not self._validState(newSection)):", "                         if self.unknownSectionIsFatal:"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "32", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "503": {"result-type": "normal", "occurrence": 22, "result-data": [{"occurrence": 22, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -386,7 +386,7 @@", "                 if (args and (args[0] == '%end')):", "                     self._finalize(obj)", "                     break", "-                elif (args and (args[0] == '%include')):", "+                elif (args and (args[0] > '%include')):", "                     if ((len(args) == 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "22", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "389": {"result-type": "normal", "occurrence": 22, "result-data": [{"occurrence": 22, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -386,7 +386,7 @@", "                 if (args and (args[0] == '%end')):", "                     self._finalize(obj)", "                     break", "-                elif (args and (args[0] == '%include')):", "+                elif (args and (args[0] is not '%include')):", "                     if ((len(args) == 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "22", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "274": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -471,7 +471,7 @@", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "             elif (self._state == STATE_END):", "                 break", "-            elif (self._includeDepth > 0):", "+            elif (self._includeDepth <= 0):", "                 lineIter.put(self._line)", "                 lineno -= 1", "                 lineno = self._readSection(lineIter, lineno)"]]], "op-name": "replace_Gt_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "33": {"result-type": "normal", "occurrence": 24, "result-data": [{"occurrence": 24, "line_number": 778, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -483,7 +483,7 @@", "         i = PutBackIterator((s.splitlines(True) + ['']))", "         self._stateMachine(i)", " ", "-    def readKickstart(self, f, reset=True):", "+    def readKickstart(self, f, reset=False):", "         'Process a kickstart file, given by the filename f.'", "         if reset:", "             self._reset()"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "24", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "181": {"result-type": "normal", "occurrence": 14, "result-data": [{"occurrence": 14, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -289,7 +289,7 @@", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "-            elif (stripped[0] == '-'):", "+            elif (stripped[0] is '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "97": {"result-type": "normal", "occurrence": 9, "result-data": [{"occurrence": 9, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -179,7 +179,7 @@", "         return (self.name <= other.name)", " ", "     def __eq__(self, other):", "-        return (self.name == other.name)", "+        return (self.name in other.name)", " ", "     def __ne__(self, other):", "         return (self.name != other.name)"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "98": {"result-type": "normal", "occurrence": 10, "result-data": [{"occurrence": 10, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -235,7 +235,7 @@", "             p.sort()", "             for pkg in p:", "                 pkgs += ('-%s\\n' % pkg)", "-            if ((pkgs == '') and (not self.seen)):", "+            if ((pkgs in '') and (not self.seen)):", "                 return ''", "         retval = '\\n%packages'", "         if self.default:"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "477": {"result-type": "normal", "occurrence": 30, "result-data": [{"occurrence": 30, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -452,7 +452,7 @@", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue", "-            if (self._state == STATE_COMMANDS):", "+            if (self._state != STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "30", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "228": {"result-type": "normal", "occurrence": 13, "result-data": [{"occurrence": 13, "line_number": 462, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -292,7 +292,7 @@", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "-                elif (stripped[1] == '@'):", "+                elif (stripped[2] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))", "                 else:", "                     newExcludedSet.add(stripped[1:])"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "320": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -471,7 +471,7 @@", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "             elif (self._state == STATE_END):", "                 break", "-            elif (self._includeDepth > 0):", "+            elif (self._includeDepth not in 0):", "                 lineIter.put(self._line)", "                 lineno -= 1", "                 lineno = self._readSection(lineIter, lineno)"]]], "op-name": "replace_Gt_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "8": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -176,7 +176,7 @@", "         return (self.name < other.name)", " ", "     def __le__(self, other):", "-        return (self.name <= other.name)", "+        return (self.name == other.name)", " ", "     def __eq__(self, other):", "         return (self.name == other.name)"]]], "op-name": "replace_LtE_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_LtE_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "210": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -369,7 +369,7 @@", "             try:", "                 line = next(lineIter)", "                 if ((line == '') and (self._includeDepth == 0)):", "-                    if (self.version >= version.F8):", "+                    if (self.version == version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)", "             except StopIteration:"]]], "op-name": "replace_GtE_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Eq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "461": {"result-type": "normal", "occurrence": 14, "result-data": [{"occurrence": 14, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -289,7 +289,7 @@", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "-            elif (stripped[0] == '-'):", "+            elif (stripped[0] != '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "83": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -267,7 +267,7 @@", "         if (ns.nodefaults and ns.optional):", "             raise KickstartParseError(_('Group cannot specify both --nodefaults and --optional'))", "         grp = ' '.join(extra)", "-        if (grp in [g.name for g in self.groupList]):", "+        if (grp is not [g.name for g in self.groupList]):", "             return", "         if ns.nodefaults:", "             self.groupList.append(Group(name=grp, include=constants.GROUP_REQUIRED))"]]], "op-name": "replace_In_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "466": {"result-type": "normal", "occurrence": 19, "result-data": [{"occurrence": 19, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line != '') and (self._includeDepth == 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "19", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "199": {"result-type": "normal", "occurrence": 32, "result-data": [{"occurrence": 32, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -455,7 +455,7 @@", "             if (self._state == STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "-                elif (args[0][0] == '%'):", "+                elif (args[0][0] is '%'):", "                     newSection = args[0]", "                     if (not self._validState(newSection)):", "                         if self.unknownSectionIsFatal:"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "32", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "218": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": 121, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -60,7 +60,7 @@", "     try:", "         contents = load_to_str(f)", "     except KickstartError as e:", "-        raise KickstartError(formatErrorMsg(0, msg=(_('Unable to open input kickstart file: %s') % str(e))))", "+        raise KickstartError(formatErrorMsg(1, msg=(_('Unable to open input kickstart file: %s') % str(e))))", "     return _preprocessStateMachine(iter(contents.splitlines(True)))", " ", " def preprocessFromString(s):"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "153": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -140,7 +140,7 @@", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "-        if (self.logfile is not None):", "+        if (self.logfile in None):", "             retval += (' --logfile=%s' % self.logfile)", "         if self.errorOnFail:", "             retval += ' --erroronfail'"]]], "op-name": "replace_IsNot_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "89": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -126,7 +126,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.type == constants.KS_SCRIPT_PRE):", "+        if (self.type in constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "136": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -471,7 +471,7 @@", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "             elif (self._state == STATE_END):", "                 break", "-            elif (self._includeDepth > 0):", "+            elif (self._includeDepth in 0):", "                 lineIter.put(self._line)", "                 lineno -= 1", "                 lineno = self._readSection(lineIter, lineno)"]]], "op-name": "replace_Gt_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "31": {"result-type": "normal", "occurrence": 22, "result-data": [{"occurrence": 22, "line_number": 767, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -476,7 +476,7 @@", "                 lineno -= 1", "                 lineno = self._readSection(lineIter, lineno)", " ", "-    def readKickstartFromString(self, s, reset=True):", "+    def readKickstartFromString(self, s, reset=False):", "         'Process a kickstart file, provided as the string str.'", "         if reset:", "             self._reset()"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "22", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "84": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -406,7 +406,7 @@", " ", "     def _validState(self, st):", "         'Is the given section tag one that has been registered with the parser?'", "-        return (st in list(self._sections.keys()))", "+        return (st is not list(self._sections.keys()))", " ", "     def _tryFunc(self, fn):", "         \"Call the provided function (which doesn't take any arguments) and\\n           do the appropriate error handling.  If errorsAreFatal is False, this\\n           function will just print the exception and keep going.\\n        \""]]], "op-name": "replace_In_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "454": {"result-type": "normal", "occurrence": 7, "result-data": [{"occurrence": 7, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -165,7 +165,7 @@", " ", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "-        if (self.include == constants.GROUP_REQUIRED):", "+        if (self.include != constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "         elif (self.include == constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "103": {"result-type": "normal", "occurrence": 15, "result-data": [{"occurrence": 15, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] in '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "132": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -46,7 +46,7 @@", "             contents = load_to_str(ksurl)", "         except KickstartError as e:", "             raise KickstartError(formatErrorMsg(lineno, msg=(_('Unable to open %%ksappend file: %s') % str(e))))", "-        if (contents is not None):", "+        if (contents not in None):", "             retval += contents.encode(sys.getdefaultencoding())", "     return retval", " "]]], "op-name": "replace_IsNot_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "138": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -299,7 +299,7 @@", "             else:", "                 newPackageSet.add(stripped)", "         excludedGroupNames = [g.name for g in excludedGroupList]", "-        self.groupList = [g for g in self.groupList if (g.name not in excludedGroupNames)]", "+        self.groupList = [g for g in self.groupList if (g.name >= excludedGroupNames)]", "         self.excludedGroupList.extend(excludedGroupList)", "         existingPackageSet = ((existingPackageSet - newExcludedSet) | newPackageSet)", "         existingExcludedSet = ((existingExcludedSet - existingPackageSet) | newExcludedSet)"]]], "op-name": "replace_NotIn_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "300": {"result-type": "normal", "occurrence": 25, "result-data": [{"occurrence": 25, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line not in '') or (line.lstrip()[0] == '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "25", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "571": {"result-type": "normal", "occurrence": 21, "result-data": [{"occurrence": 21, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -383,7 +383,7 @@", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)", "-                if (args and (args[0] == '%end')):", "+                if (args and (args[0] >= '%end')):", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "21", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "555": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -134,7 +134,7 @@", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "-        elif (self.type == constants.KS_SCRIPT_ONERROR):", "+        elif (self.type >= constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "330": {"result-type": "normal", "occurrence": 9, "result-data": [{"occurrence": 9, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -179,7 +179,7 @@", "         return (self.name <= other.name)", " ", "     def __eq__(self, other):", "-        return (self.name == other.name)", "+        return (self.name < other.name)", " ", "     def __ne__(self, other):", "         return (self.name != other.name)"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "49": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -126,7 +126,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.type == constants.KS_SCRIPT_PRE):", "+        if (self.type <= constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "566": {"result-type": "normal", "occurrence": 16, "result-data": [{"occurrence": 16, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] == '@^') and (self.environment >= stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "211": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -394,7 +394,7 @@", "                 elif (args and (args[0] == '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "-                    if (self.version >= version.F8):", "+                    if (self.version == version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     lineIter.put(line)", "                     lineno -= 1"]]], "op-name": "replace_GtE_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Eq", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "232": {"result-type": "normal", "occurrence": 17, "result-data": [{"occurrence": 17, "line_number": 532, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -319,7 +319,7 @@", "         self.missingIncludeIsFatal = missingIncludeIsFatal", "         self.unknownSectionIsFatal = unknownSectionIsFatal", "         self._state = STATE_COMMANDS", "-        self._includeDepth = 0", "+        self._includeDepth = 1", "         self._line = ''", "         self.version = self.handler.version", "         Script._ver = self.version"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "521": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -488,7 +488,7 @@", "         if reset:", "             self._reset()", "         if (not os.path.exists(f)):", "-            if ((self._includeDepth - 1) in self.currentdir):", "+            if ((self._includeDepth - 1) >= self.currentdir):", "                 if os.path.exists(os.path.join(self.currentdir[(self._includeDepth - 1)], f)):", "                     f = os.path.join(self.currentdir[(self._includeDepth - 1)], f)", "         cd = os.path.dirname(f)"]]], "op-name": "replace_In_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "111": {"result-type": "normal", "occurrence": 23, "result-data": [{"occurrence": 23, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -387,7 +387,7 @@", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):", "-                    if ((len(args) == 1) or (not args[1])):", "+                    if ((len(args) in 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "23", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "146": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -145,7 +145,7 @@", "         if self.errorOnFail:", "             retval += ' --erroronfail'", "         if self.script.endswith('\\n'):", "-            if (self._ver >= version.F8):", "+            if (self._ver is not version.F8):", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))"]]], "op-name": "replace_GtE_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "467": {"result-type": "normal", "occurrence": 20, "result-data": [{"occurrence": 20, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line == '') and (self._includeDepth != 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "20", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "367": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -28,7 +28,7 @@", "             l = next(lineIter)", "         except StopIteration:", "             break", "-        if (l == ''):", "+        if (l is not ''):", "             break", "         lineno += 1", "         ksurl = None"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "246": {"result-type": "normal", "occurrence": 31, "result-data": [{"occurrence": 31, "line_number": 650, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -397,7 +397,7 @@", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     lineIter.put(line)", "-                    lineno -= 1", "+                    lineno -= 2", "                     self._finalize(obj)", "                     break", "             else:"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "31", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "112": {"result-type": "normal", "occurrence": 24, "result-data": [{"occurrence": 24, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -391,7 +391,7 @@", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue", "-                elif (args and (args[0] == '%ksappend')):", "+                elif (args and (args[0] in '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "                     if (self.version >= version.F8):"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "24", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "490": {"result-type": "normal", "occurrence": 9, "result-data": [{"occurrence": 9, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -179,7 +179,7 @@", "         return (self.name <= other.name)", " ", "     def __eq__(self, other):", "-        return (self.name == other.name)", "+        return (self.name > other.name)", " ", "     def __ne__(self, other):", "         return (self.name != other.name)"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "568": {"result-type": "normal", "occurrence": 18, "result-data": [{"occurrence": 18, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -360,7 +360,7 @@", "         'Kickstart recognizes a couple special comments.'", "         if (self._state != STATE_COMMANDS):", "             return", "-        if (line[:10] == '#platform='):", "+        if (line[:10] >= '#platform='):", "             self.handler.platform = self._line[10:].strip()", " ", "     def _readSection(self, lineIter, lineno):"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "18": {"result-type": "normal", "occurrence": 9, "result-data": [{"occurrence": 9, "line_number": 356, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -209,7 +209,7 @@", "         self.handleMissing = constants.KS_MISSING_PROMPT", "         self.packageList = []", "         self.instLangs = None", "-        self.multiLib = False", "+        self.multiLib = True", "         self.excludeWeakdeps = False", "         self.seen = False", " "]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "175": {"result-type": "normal", "occurrence": 8, "result-data": [{"occurrence": 8, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -167,7 +167,7 @@", "         'Return a string formatted for output to a kickstart file.'", "         if (self.include == constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "-        elif (self.include == constants.GROUP_ALL):", "+        elif (self.include is constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)", "         else:", "             return ('@%s' % self.name)"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "57": {"result-type": "normal", "occurrence": 9, "result-data": [{"occurrence": 9, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -179,7 +179,7 @@", "         return (self.name <= other.name)", " ", "     def __eq__(self, other):", "-        return (self.name == other.name)", "+        return (self.name <= other.name)", " ", "     def __ne__(self, other):", "         return (self.name != other.name)"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "166": {"result-type": "normal", "occurrence": 7, "result-data": [{"occurrence": 7, "line_number": 761, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -470,7 +470,7 @@", "                 else:", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "             elif (self._state == STATE_END):", "-                break", "+                continue", "             elif (self._includeDepth > 0):", "                 lineIter.put(self._line)", "                 lineno -= 1"]]], "op-name": "break_continue_replacement", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "break_continue_replacement", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "458": {"result-type": "normal", "occurrence": 11, "result-data": [{"occurrence": 11, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -246,7 +246,7 @@", "             retval += ' --nobase'", "         if self.nocore:", "             retval += ' --nocore'", "-        if (self.handleMissing == constants.KS_MISSING_IGNORE):", "+        if (self.handleMissing != constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "         if (self.instLangs is not None):", "             retval += (' --instLangs=%s' % self.instLangs)"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "561": {"result-type": "normal", "occurrence": 11, "result-data": [{"occurrence": 11, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -246,7 +246,7 @@", "             retval += ' --nobase'", "         if self.nocore:", "             retval += ' --nocore'", "-        if (self.handleMissing == constants.KS_MISSING_IGNORE):", "+        if (self.handleMissing >= constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "         if (self.instLangs is not None):", "             retval += (' --instLangs=%s' % self.instLangs)"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "586": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -248,7 +248,7 @@", "             retval += ' --nocore'", "         if (self.handleMissing == constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "-        if (self.instLangs is not None):", "+        if (self.instLangs > None):", "             retval += (' --instLangs=%s' % self.instLangs)", "         if self.multiLib:", "             retval += ' --multilib'"]]], "op-name": "replace_IsNot_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "338": {"result-type": "normal", "occurrence": 17, "result-data": [{"occurrence": 17, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -292,7 +292,7 @@", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "-                elif (stripped[1] == '@'):", "+                elif (stripped[1] < '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))", "                 else:", "                     newExcludedSet.add(stripped[1:])"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "163": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": 652, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -399,7 +399,7 @@", "                     lineIter.put(line)", "                     lineno -= 1", "                     self._finalize(obj)", "-                    break", "+                    continue", "             else:", "                 obj.handleLine(line)", "         return lineno"]]], "op-name": "break_continue_replacement", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "break_continue_replacement", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "315": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -394,7 +394,7 @@", "                 elif (args and (args[0] == '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "-                    if (self.version >= version.F8):", "+                    if (self.version > version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     lineIter.put(line)", "                     lineno -= 1"]]], "op-name": "replace_GtE_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Gt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "482": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -126,7 +126,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.type == constants.KS_SCRIPT_PRE):", "+        if (self.type > constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "462": {"result-type": "normal", "occurrence": 15, "result-data": [{"occurrence": 15, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] != '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "37": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -140,7 +140,7 @@", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "-        if (self.logfile is not None):", "+        if (self.logfile < None):", "             retval += (' --logfile=%s' % self.logfile)", "         if self.errorOnFail:", "             retval += ' --erroronfail'"]]], "op-name": "replace_IsNot_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "534": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -369,7 +369,7 @@", "             try:", "                 line = next(lineIter)", "                 if ((line == '') and (self._includeDepth == 0)):", "-                    if (self.version >= version.F8):", "+                    if (self.version is version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)", "             except StopIteration:"]]], "op-name": "replace_GtE_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Is", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "470": {"result-type": "normal", "occurrence": 23, "result-data": [{"occurrence": 23, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -387,7 +387,7 @@", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):", "-                    if ((len(args) == 1) or (not args[1])):", "+                    if ((len(args) != 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "23", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "440": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp != '/bin/sh') and (self.interp in '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "325": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -132,7 +132,7 @@", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "-        elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "+        elif (self.type < constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "504": {"result-type": "normal", "occurrence": 23, "result-data": [{"occurrence": 23, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -387,7 +387,7 @@", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):", "-                    if ((len(args) == 1) or (not args[1])):", "+                    if ((len(args) > 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "23", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "373": {"result-type": "normal", "occurrence": 6, "result-data": [{"occurrence": 6, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -138,7 +138,7 @@", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "-        if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "+        if ((self.type is not constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "         if (self.logfile is not None):", "             retval += (' --logfile=%s' % self.logfile)"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "545": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -299,7 +299,7 @@", "             else:", "                 newPackageSet.add(stripped)", "         excludedGroupNames = [g.name for g in excludedGroupList]", "-        self.groupList = [g for g in self.groupList if (g.name not in excludedGroupNames)]", "+        self.groupList = [g for g in self.groupList if (g.name is not excludedGroupNames)]", "         self.excludedGroupList.extend(excludedGroupList)", "         existingPackageSet = ((existingPackageSet - newExcludedSet) | newPackageSet)", "         existingExcludedSet = ((existingExcludedSet - existingPackageSet) | newExcludedSet)"]]], "op-name": "replace_NotIn_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "318": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -488,7 +488,7 @@", "         if reset:", "             self._reset()", "         if (not os.path.exists(f)):", "-            if ((self._includeDepth - 1) in self.currentdir):", "+            if ((self._includeDepth - 1) != self.currentdir):", "                 if os.path.exists(os.path.join(self.currentdir[(self._includeDepth - 1)], f)):", "                     f = os.path.join(self.currentdir[(self._includeDepth - 1)], f)", "         cd = os.path.dirname(f)"]]], "op-name": "replace_In_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "324": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -130,7 +130,7 @@", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "-        elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "+        elif (self.type < constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "229": {"result-type": "normal", "occurrence": 14, "result-data": [{"occurrence": 14, "line_number": 463, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -293,7 +293,7 @@", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "-                    excludedGroupList.append(Group(name=stripped[2:]))", "+                    excludedGroupList.append(Group(name=stripped[3:]))", "                 else:", "                     newExcludedSet.add(stripped[1:])", "             else:"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "401": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -267,7 +267,7 @@", "         if (ns.nodefaults and ns.optional):", "             raise KickstartParseError(_('Group cannot specify both --nodefaults and --optional'))", "         grp = ' '.join(extra)", "-        if (grp in [g.name for g in self.groupList]):", "+        if (grp not in [g.name for g in self.groupList]):", "             return", "         if ns.nodefaults:", "             self.groupList.append(Group(name=grp, include=constants.GROUP_REQUIRED))"]]], "op-name": "replace_In_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "34": {"result-type": "normal", "occurrence": 25, "result-data": [{"occurrence": 25, "line_number": 803, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -499,7 +499,7 @@", "             s = load_to_str(f)", "         except KickstartError as e:", "             raise KickstartError(formatErrorMsg(0, msg=(_('Unable to open input kickstart file: %s') % str(e))))", "-        self.readKickstartFromString(s, reset=False)", "+        self.readKickstartFromString(s, reset=True)", " ", "     def setupSections(self):", "         \"Install the sections all kickstart files support.  You may override\\n           this method in a subclass, but should avoid doing so unless you know\\n           what you're doing.\\n        \""]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "25", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "190": {"result-type": "normal", "occurrence": 23, "result-data": [{"occurrence": 23, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -387,7 +387,7 @@", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):", "-                    if ((len(args) == 1) or (not args[1])):", "+                    if ((len(args) is 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "23", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "524": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -379,7 +379,7 @@", "                 continue", "             if line.lstrip().startswith('%'):", "                 possibleSectionStart = line.split()[0]", "-                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart not in ('%end', '%include'))):", "+                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart == ('%end', '%include'))):", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)"]]], "op-name": "replace_NotIn_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "426": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -248,7 +248,7 @@", "             retval += ' --nocore'", "         if (self.handleMissing == constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "-        if (self.instLangs is not None):", "+        if (self.instLangs >= None):", "             retval += (' --instLangs=%s' % self.instLangs)", "         if self.multiLib:", "             retval += ' --multilib'"]]], "op-name": "replace_IsNot_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "124": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp != '/bin/sh') and (self.interp is '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "79": {"result-type": "normal", "occurrence": 31, "result-data": [{"occurrence": 31, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -453,7 +453,7 @@", "                 self._handleInclude(args[1])", "                 continue", "             if (self._state == STATE_COMMANDS):", "-                if (args[0] == '%ksappend'):", "+                if (args[0] <= '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):", "                     newSection = args[0]"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "31", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "405": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -149,7 +149,7 @@", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))", "-        elif (self._ver >= version.F8):", "+        elif (self._ver < version.F8):", "             return (retval + ('\\n%s\\n%%end\\n' % self.script))", "         else:", "             return (retval + ('\\n%s\\n' % self.script))"]]], "op-name": "replace_GtE_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "442": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -358,7 +358,7 @@", " ", "     def _handleSpecialComments(self, line):", "         'Kickstart recognizes a couple special comments.'", "-        if (self._state != STATE_COMMANDS):", "+        if (self._state in STATE_COMMANDS):", "             return", "         if (line[:10] == '#platform='):", "             self.handler.platform = self._line[10:].strip()"]]], "op-name": "replace_NotEq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "282": {"result-type": "normal", "occurrence": 7, "result-data": [{"occurrence": 7, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -165,7 +165,7 @@", " ", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "-        if (self.include == constants.GROUP_REQUIRED):", "+        if (self.include not in constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "         elif (self.include == constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "443": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -299,7 +299,7 @@", "             else:", "                 newPackageSet.add(stripped)", "         excludedGroupNames = [g.name for g in excludedGroupList]", "-        self.groupList = [g for g in self.groupList if (g.name not in excludedGroupNames)]", "+        self.groupList = [g for g in self.groupList if (g.name <= excludedGroupNames)]", "         self.excludedGroupList.extend(excludedGroupList)", "         existingPackageSet = ((existingPackageSet - newExcludedSet) | newPackageSet)", "         existingExcludedSet = ((existingExcludedSet - existingPackageSet) | newExcludedSet)"]]], "op-name": "replace_NotIn_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "52": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -132,7 +132,7 @@", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "-        elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "+        elif (self.type <= constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "501": {"result-type": "normal", "occurrence": 20, "result-data": [{"occurrence": 20, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line == '') and (self._includeDepth > 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "20", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "341": {"result-type": "normal", "occurrence": 20, "result-data": [{"occurrence": 20, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line == '') and (self._includeDepth < 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "20", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "68": {"result-type": "normal", "occurrence": 20, "result-data": [{"occurrence": 20, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line == '') and (self._includeDepth <= 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "20", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "448": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -126,7 +126,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.type == constants.KS_SCRIPT_PRE):", "+        if (self.type != constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "533": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -254,7 +254,7 @@", "             retval += ' --multilib'", "         if self.excludeWeakdeps:", "             retval += ' --excludeWeakdeps'", "-        if (self._ver >= version.F8):", "+        if (self._ver is version.F8):", "             return (((retval + '\\n') + pkgs) + '\\n%end\\n')", "         else:", "             return (((retval + '\\n') + pkgs) + '\\n')"]]], "op-name": "replace_GtE_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "25": {"result-type": "normal", "occurrence": 16, "result-data": [{"occurrence": 16, "line_number": 502, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -309,7 +309,7 @@", " class KickstartParser(object):", "     \"The kickstart file parser class as represented by a basic state\\n       machine.  To create a specialized parser, make a subclass and override\\n       any of the methods you care about.  Methods that don't need to do\\n       anything may just pass.  However, _stateMachine should never be\\n       overridden.\\n    \"", " ", "-    def __init__(self, handler, followIncludes=True, errorsAreFatal=True, missingIncludeIsFatal=True, unknownSectionIsFatal=True):", "+    def __init__(self, handler, followIncludes=True, errorsAreFatal=True, missingIncludeIsFatal=False, unknownSectionIsFatal=True):", "         'Create a new KickstartParser instance.  Instance attributes:\\n\\n           errorsAreFatal        -- Should errors cause processing to halt, or\\n                                    just print a message to the screen?  This\\n                                    is most useful for writing syntax checkers\\n                                    that may want to continue after an error is\\n                                    encountered.\\n           followIncludes        -- If %include is seen, should the included\\n                                    file be checked as well or skipped?\\n           handler               -- An instance of a BaseHandler subclass.  If\\n                                    None, the input file will still be parsed\\n                                    but no data will be saved and no commands\\n                                    will be executed.\\n           missingIncludeIsFatal -- Should missing include files be fatal, even\\n                                    if errorsAreFatal is False?\\n           unknownSectionIsFatal -- Should an unknown %section be fatal?  Not all\\n                                    sections are handled by pykickstart.  Some are\\n                                    user-defined, so there should be a way to have\\n                                    pykickstart ignore them.\\n        '", "         self.errorsAreFatal = errorsAreFatal", "         self.errorsCount = 0"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "236": {"result-type": "normal", "occurrence": 21, "result-data": [{"occurrence": 21, "line_number": 601, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line == '') and (self._includeDepth == 1)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "21", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "196": {"result-type": "normal", "occurrence": 29, "result-data": [{"occurrence": 29, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -448,7 +448,7 @@", "                 continue", "             args = shlex.split(self._line, comments=True)", "             if (args[0] == '%include'):", "-                if ((len(args) == 1) or (not args[1])):", "+                if ((len(args) is 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "29", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "14": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": 345, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -198,7 +198,7 @@", "     def __init__(self, *args, **kwargs):", "         'Create a new Packages instance.  Instance attributes:\\n\\n           addBase       -- Should the Base group be installed even if it is\\n                            not specified?\\n           nocore        -- Should the Core group be skipped?  This results in\\n                            a %packages section that basically only installs the\\n                            packages you list, and may not be a usable system.\\n           default       -- Should the default package set be selected?\\n           environment   -- What base environment should be selected?  Only one\\n                            may be chosen at a time.\\n           excludedList  -- A list of all the packages marked for exclusion in\\n                            the %packages section, without the leading minus\\n                            symbol.\\n           excludeDocs   -- Should documentation in each package be excluded?\\n           groupList     -- A list of Group objects representing all the groups\\n                            specified in the %packages section.  Names will be\\n                            stripped of the leading @ symbol.\\n           excludedGroupList -- A list of Group objects representing all the\\n                                groups specified for removal in the %packages\\n                                section.  Names will be stripped of the leading\\n                                -@ symbols.\\n           handleMissing -- If unknown packages are specified in the %packages\\n                            section, should it be ignored or not?  Values can\\n                            be KS_MISSING_* from pykickstart.constants.\\n           packageList   -- A list of all the packages specified in the\\n                            %packages section.\\n           instLangs     -- A list of languages to install.\\n           multiLib      -- Whether to use yum\\'s \"all\" multilib policy.\\n           excludeWeakdeps -- Whether to exclude weak dependencies.\\n           seen          -- If %packages was ever used in the kickstart file,\\n                            this attribute will be set to True.\\n\\n        '", "         KickstartObject.__init__(self, *args, **kwargs)", "-        self.addBase = True", "+        self.addBase = False", "         self.nocore = False", "         self.default = False", "         self.environment = None"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "460": {"result-type": "normal", "occurrence": 13, "result-data": [{"occurrence": 13, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -287,7 +287,7 @@", "             stripped = pkg.strip()", "             if (stripped[0:2] == '@^'):", "                 self.environment = stripped[2:]", "-            elif (stripped[0] == '@'):", "+            elif (stripped[0] != '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "513": {"result-type": "normal", "occurrence": 32, "result-data": [{"occurrence": 32, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -455,7 +455,7 @@", "             if (self._state == STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "-                elif (args[0][0] == '%'):", "+                elif (args[0][0] > '%'):", "                     newSection = args[0]", "                     if (not self._validState(newSection)):", "                         if self.unknownSectionIsFatal:"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "32", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "350": {"result-type": "normal", "occurrence": 29, "result-data": [{"occurrence": 29, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -448,7 +448,7 @@", "                 continue", "             args = shlex.split(self._line, comments=True)", "             if (args[0] == '%include'):", "-                if ((len(args) == 1) or (not args[1])):", "+                if ((len(args) < 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "29", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "369": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -128,7 +128,7 @@", "         retval = ''", "         if (self.type == constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "-        elif (self.type == constants.KS_SCRIPT_POST):", "+        elif (self.type is not constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "351": {"result-type": "normal", "occurrence": 30, "result-data": [{"occurrence": 30, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -452,7 +452,7 @@", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue", "-            if (self._state == STATE_COMMANDS):", "+            if (self._state < STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "30", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "515": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp == '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "151": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -394,7 +394,7 @@", "                 elif (args and (args[0] == '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "-                    if (self.version >= version.F8):", "+                    if (self.version is not version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     lineIter.put(line)", "                     lineno -= 1"]]], "op-name": "replace_GtE_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_IsNot", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "182": {"result-type": "normal", "occurrence": 15, "result-data": [{"occurrence": 15, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] is '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "560": {"result-type": "normal", "occurrence": 10, "result-data": [{"occurrence": 10, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -235,7 +235,7 @@", "             p.sort()", "             for pkg in p:", "                 pkgs += ('-%s\\n' % pkg)", "-            if ((pkgs == '') and (not self.seen)):", "+            if ((pkgs >= '') and (not self.seen)):", "                 return ''", "         retval = '\\n%packages'", "         if self.default:"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "476": {"result-type": "normal", "occurrence": 29, "result-data": [{"occurrence": 29, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -448,7 +448,7 @@", "                 continue", "             args = shlex.split(self._line, comments=True)", "             if (args[0] == '%include'):", "-                if ((len(args) == 1) or (not args[1])):", "+                if ((len(args) != 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "29", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "117": {"result-type": "normal", "occurrence": 29, "result-data": [{"occurrence": 29, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -448,7 +448,7 @@", "                 continue", "             args = shlex.split(self._line, comments=True)", "             if (args[0] == '%include'):", "-                if ((len(args) == 1) or (not args[1])):", "+                if ((len(args) in 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "29", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "40": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -406,7 +406,7 @@", " ", "     def _validState(self, st):", "         'Is the given section tag one that has been registered with the parser?'", "-        return (st in list(self._sections.keys()))", "+        return (st > list(self._sections.keys()))", " ", "     def _tryFunc(self, fn):", "         \"Call the provided function (which doesn't take any arguments) and\\n           do the appropriate error handling.  If errorsAreFatal is False, this\\n           function will just print the exception and keep going.\\n        \""]]], "op-name": "replace_In_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "486": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -134,7 +134,7 @@", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "-        elif (self.type == constants.KS_SCRIPT_ONERROR):", "+        elif (self.type > constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "475": {"result-type": "normal", "occurrence": 28, "result-data": [{"occurrence": 28, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -447,7 +447,7 @@", "                 self._handleSpecialComments(self._line)", "                 continue", "             args = shlex.split(self._line, comments=True)", "-            if (args[0] == '%include'):", "+            if (args[0] != '%include'):", "                 if ((len(args) == 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "28", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "64": {"result-type": "normal", "occurrence": 16, "result-data": [{"occurrence": 16, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] == '@^') and (self.environment <= stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "51": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -130,7 +130,7 @@", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "-        elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "+        elif (self.type <= constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "551": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -126,7 +126,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.type == constants.KS_SCRIPT_PRE):", "+        if (self.type >= constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "526": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp >= '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "216": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": 74, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -30,7 +30,7 @@", "             break", "         if (l == ''):", "             break", "-        lineno += 1", "+        lineno += 2", "         ksurl = None", "         ll = l.strip()", "         if (not ll.startswith('%ksappend')):"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "61": {"result-type": "normal", "occurrence": 13, "result-data": [{"occurrence": 13, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -287,7 +287,7 @@", "             stripped = pkg.strip()", "             if (stripped[0:2] == '@^'):", "                 self.environment = stripped[2:]", "-            elif (stripped[0] == '@'):", "+            elif (stripped[0] <= '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "227": {"result-type": "normal", "occurrence": 12, "result-data": [{"occurrence": 12, "line_number": 460, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] == '@^') and (self.environment == stripped[4:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "390": {"result-type": "normal", "occurrence": 23, "result-data": [{"occurrence": 23, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -387,7 +387,7 @@", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):", "-                    if ((len(args) == 1) or (not args[1])):", "+                    if ((len(args) is not 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "23", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "311": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -149,7 +149,7 @@", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))", "-        elif (self._ver >= version.F8):", "+        elif (self._ver > version.F8):", "             return (retval + ('\\n%s\\n%%end\\n' % self.script))", "         else:", "             return (retval + ('\\n%s\\n' % self.script))"]]], "op-name": "replace_GtE_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "222": {"result-type": "normal", "occurrence": 7, "result-data": [{"occurrence": 7, "line_number": 457, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -287,7 +287,7 @@", "             stripped = pkg.strip()", "             if (stripped[0:2] == '@^'):", "                 self.environment = stripped[2:]", "-            elif (stripped[0] == '@'):", "+            elif (stripped[1] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "453": {"result-type": "normal", "occurrence": 6, "result-data": [{"occurrence": 6, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -138,7 +138,7 @@", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "-        if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "+        if ((self.type != constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "         if (self.logfile is not None):", "             retval += (' --logfile=%s' % self.logfile)"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "329": {"result-type": "normal", "occurrence": 8, "result-data": [{"occurrence": 8, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -167,7 +167,7 @@", "         'Return a string formatted for output to a kickstart file.'", "         if (self.include == constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "-        elif (self.include == constants.GROUP_ALL):", "+        elif (self.include < constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)", "         else:", "             return ('@%s' % self.name)"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "187": {"result-type": "normal", "occurrence": 20, "result-data": [{"occurrence": 20, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line == '') and (self._includeDepth is 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "20", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "316": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -267,7 +267,7 @@", "         if (ns.nodefaults and ns.optional):", "             raise KickstartParseError(_('Group cannot specify both --nodefaults and --optional'))", "         grp = ' '.join(extra)", "-        if (grp in [g.name for g in self.groupList]):", "+        if (grp != [g.name for g in self.groupList]):", "             return", "         if ns.nodefaults:", "             self.groupList.append(Group(name=grp, include=constants.GROUP_REQUIRED))"]]], "op-name": "replace_In_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "44": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -185,7 +185,7 @@", "         return (self.name != other.name)", " ", "     def __gt__(self, other):", "-        return (self.name > other.name)", "+        return (self.name is other.name)", " ", "     def __ge__(self, other):", "         return (self.name >= other.name)"]]], "op-name": "replace_Gt_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "431": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -46,7 +46,7 @@", "             contents = load_to_str(ksurl)", "         except KickstartError as e:", "             raise KickstartError(formatErrorMsg(lineno, msg=(_('Unable to open %%ksappend file: %s') % str(e))))", "-        if (contents is not None):", "+        if (contents is None):", "             retval += contents.encode(sys.getdefaultencoding())", "     return retval", " "]]], "op-name": "replace_IsNot_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "428": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -140,7 +140,7 @@", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "-        if (self.logfile is not None):", "+        if (self.logfile == None):", "             retval += (' --logfile=%s' % self.logfile)", "         if self.errorOnFail:", "             retval += ' --erroronfail'"]]], "op-name": "replace_IsNot_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "412": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -488,7 +488,7 @@", "         if reset:", "             self._reset()", "         if (not os.path.exists(f)):", "-            if ((self._includeDepth - 1) in self.currentdir):", "+            if ((self._includeDepth - 1) == self.currentdir):", "                 if os.path.exists(os.path.join(self.currentdir[(self._includeDepth - 1)], f)):", "                     f = os.path.join(self.currentdir[(self._includeDepth - 1)], f)", "         cd = os.path.dirname(f)"]]], "op-name": "replace_In_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "388": {"result-type": "normal", "occurrence": 21, "result-data": [{"occurrence": 21, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -383,7 +383,7 @@", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)", "-                if (args and (args[0] == '%end')):", "+                if (args and (args[0] is not '%end')):", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "21", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "135": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -185,7 +185,7 @@", "         return (self.name != other.name)", " ", "     def __gt__(self, other):", "-        return (self.name > other.name)", "+        return (self.name in other.name)", " ", "     def __ge__(self, other):", "         return (self.name >= other.name)"]]], "op-name": "replace_Gt_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "525": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -173,7 +173,7 @@", "             return ('@%s' % self.name)", " ", "     def __lt__(self, other):", "-        return (self.name < other.name)", "+        return (self.name in other.name)", " ", "     def __le__(self, other):", "         return (self.name <= other.name)"]]], "op-name": "replace_Lt_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Lt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "528": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -182,7 +182,7 @@", "         return (self.name == other.name)", " ", "     def __ne__(self, other):", "-        return (self.name != other.name)", "+        return (self.name >= other.name)", " ", "     def __gt__(self, other):", "         return (self.name > other.name)"]]], "op-name": "replace_NotEq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "295": {"result-type": "normal", "occurrence": 20, "result-data": [{"occurrence": 20, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line == '') and (self._includeDepth not in 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "20", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "75": {"result-type": "normal", "occurrence": 27, "result-data": [{"occurrence": 27, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -438,7 +438,7 @@", "         while True:", "             try:", "                 self._line = next(lineIter)", "-                if (self._line == ''):", "+                if (self._line <= ''):", "                     break", "             except StopIteration:", "                 break"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "27", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "281": {"result-type": "normal", "occurrence": 6, "result-data": [{"occurrence": 6, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -138,7 +138,7 @@", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "-        if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "+        if ((self.type not in constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "         if (self.logfile is not None):", "             retval += (' --logfile=%s' % self.logfile)"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "291": {"result-type": "normal", "occurrence": 16, "result-data": [{"occurrence": 16, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] == '@^') and (self.environment not in stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "404": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -145,7 +145,7 @@", "         if self.errorOnFail:", "             retval += ' --erroronfail'", "         if self.script.endswith('\\n'):", "-            if (self._ver >= version.F8):", "+            if (self._ver < version.F8):", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))"]]], "op-name": "replace_GtE_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "514": {"result-type": "normal", "occurrence": 33, "result-data": [{"occurrence": 33, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -469,7 +469,7 @@", "                     lineno = self._readSection(lineIter, lineno)", "                 else:", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "-            elif (self._state == STATE_END):", "+            elif (self._state > STATE_END):", "                 break", "             elif (self._includeDepth > 0):", "                 lineIter.put(self._line)"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "33", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "215": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": 58, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -19,7 +19,7 @@", " ", " def _preprocessStateMachine(lineIter):", "     l = None", "-    lineno = 0", "+    lineno = 1", "     retval = ''", "     if six.PY3:", "         retval = retval.encode(sys.getdefaultencoding())"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "505": {"result-type": "normal", "occurrence": 24, "result-data": [{"occurrence": 24, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -391,7 +391,7 @@", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue", "-                elif (args and (args[0] == '%ksappend')):", "+                elif (args and (args[0] > '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "                     if (self.version >= version.F8):"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "24", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "284": {"result-type": "normal", "occurrence": 9, "result-data": [{"occurrence": 9, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -179,7 +179,7 @@", "         return (self.name <= other.name)", " ", "     def __eq__(self, other):", "-        return (self.name == other.name)", "+        return (self.name not in other.name)", " ", "     def __ne__(self, other):", "         return (self.name != other.name)"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "544": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -358,7 +358,7 @@", " ", "     def _handleSpecialComments(self, line):", "         'Kickstart recognizes a couple special comments.'", "-        if (self._state != STATE_COMMANDS):", "+        if (self._state not in STATE_COMMANDS):", "             return", "         if (line[:10] == '#platform='):", "             self.handler.platform = self._line[10:].strip()"]]], "op-name": "replace_NotEq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "343": {"result-type": "normal", "occurrence": 22, "result-data": [{"occurrence": 22, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -386,7 +386,7 @@", "                 if (args and (args[0] == '%end')):", "                     self._finalize(obj)", "                     break", "-                elif (args and (args[0] == '%include')):", "+                elif (args and (args[0] < '%include')):", "                     if ((len(args) == 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "22", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "306": {"result-type": "normal", "occurrence": 31, "result-data": [{"occurrence": 31, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -453,7 +453,7 @@", "                 self._handleInclude(args[1])", "                 continue", "             if (self._state == STATE_COMMANDS):", "-                if (args[0] == '%ksappend'):", "+                if (args[0] not in '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):", "                     newSection = args[0]"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "31", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "420": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -254,7 +254,7 @@", "             retval += ' --multilib'", "         if self.excludeWeakdeps:", "             retval += ' --excludeWeakdeps'", "-        if (self._ver >= version.F8):", "+        if (self._ver <= version.F8):", "             return (((retval + '\\n') + pkgs) + '\\n%end\\n')", "         else:", "             return (((retval + '\\n') + pkgs) + '\\n')"]]], "op-name": "replace_GtE_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "1": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp < '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "495": {"result-type": "normal", "occurrence": 14, "result-data": [{"occurrence": 14, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -289,7 +289,7 @@", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "-            elif (stripped[0] == '-'):", "+            elif (stripped[0] > '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "292": {"result-type": "normal", "occurrence": 17, "result-data": [{"occurrence": 17, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -292,7 +292,7 @@", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "-                elif (stripped[1] == '@'):", "+                elif (stripped[1] not in '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))", "                 else:", "                     newExcludedSet.add(stripped[1:])"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "485": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -132,7 +132,7 @@", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "-        elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "+        elif (self.type > constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "4": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -358,7 +358,7 @@", " ", "     def _handleSpecialComments(self, line):", "         'Kickstart recognizes a couple special comments.'", "-        if (self._state != STATE_COMMANDS):", "+        if (self._state < STATE_COMMANDS):", "             return", "         if (line[:10] == '#platform='):", "             self.handler.platform = self._line[10:].strip()"]]], "op-name": "replace_NotEq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "511": {"result-type": "normal", "occurrence": 30, "result-data": [{"occurrence": 30, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -452,7 +452,7 @@", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue", "-            if (self._state == STATE_COMMANDS):", "+            if (self._state > STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "30", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "176": {"result-type": "normal", "occurrence": 9, "result-data": [{"occurrence": 9, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -179,7 +179,7 @@", "         return (self.name <= other.name)", " ", "     def __eq__(self, other):", "-        return (self.name == other.name)", "+        return (self.name is other.name)", " ", "     def __ne__(self, other):", "         return (self.name != other.name)"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "432": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -140,7 +140,7 @@", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "-        if (self.logfile is not None):", "+        if (self.logfile is None):", "             retval += (' --logfile=%s' % self.logfile)", "         if self.errorOnFail:", "             retval += ' --erroronfail'"]]], "op-name": "replace_IsNot_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "418": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -149,7 +149,7 @@", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))", "-        elif (self._ver >= version.F8):", "+        elif (self._ver <= version.F8):", "             return (retval + ('\\n%s\\n%%end\\n' % self.script))", "         else:", "             return (retval + ('\\n%s\\n' % self.script))"]]], "op-name": "replace_GtE_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "244": {"result-type": "normal", "occurrence": 29, "result-data": [{"occurrence": 29, "line_number": 640, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -391,7 +391,7 @@", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue", "-                elif (args and (args[0] == '%ksappend')):", "+                elif (args and (args[1] == '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "                     if (self.version >= version.F8):"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "29", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "363": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -369,7 +369,7 @@", "             try:", "                 line = next(lineIter)", "                 if ((line == '') and (self._includeDepth == 0)):", "-                    if (self.version >= version.F8):", "+                    if (self.version != version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)", "             except StopIteration:"]]], "op-name": "replace_GtE_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_NotEq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "245": {"result-type": "normal", "occurrence": 30, "result-data": [{"occurrence": 30, "line_number": 642, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -393,7 +393,7 @@", "                     continue", "                 elif (args and (args[0] == '%ksappend')):", "                     continue", "-                elif (args and self._validState(args[0])):", "+                elif (args and self._validState(args[1])):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     lineIter.put(line)"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "30", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "205": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -248,7 +248,7 @@", "             retval += ' --nocore'", "         if (self.handleMissing == constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "-        if (self.instLangs is not None):", "+        if (self.instLangs != None):", "             retval += (' --instLangs=%s' % self.instLangs)", "         if self.multiLib:", "             retval += ' --multilib'"]]], "op-name": "replace_IsNot_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "17": {"result-type": "normal", "occurrence": 8, "result-data": [{"occurrence": 8, "line_number": 351, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -204,7 +204,7 @@", "         self.environment = None", "         self.excludedList = []", "         self.excludedGroupList = []", "-        self.excludeDocs = False", "+        self.excludeDocs = True", "         self.groupList = []", "         self.handleMissing = constants.KS_MISSING_PROMPT", "         self.packageList = []"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "449": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -128,7 +128,7 @@", "         retval = ''", "         if (self.type == constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "-        elif (self.type == constants.KS_SCRIPT_POST):", "+        elif (self.type != constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "491": {"result-type": "normal", "occurrence": 10, "result-data": [{"occurrence": 10, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -235,7 +235,7 @@", "             p.sort()", "             for pkg in p:", "                 pkgs += ('-%s\\n' % pkg)", "-            if ((pkgs == '') and (not self.seen)):", "+            if ((pkgs > '') and (not self.seen)):", "                 return ''", "         retval = '\\n%packages'", "         if self.default:"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "391": {"result-type": "normal", "occurrence": 24, "result-data": [{"occurrence": 24, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -391,7 +391,7 @@", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue", "-                elif (args and (args[0] == '%ksappend')):", "+                elif (args and (args[0] is not '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "                     if (self.version >= version.F8):"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "24", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "145": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -394,7 +394,7 @@", "                 elif (args and (args[0] == '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "-                    if (self.version >= version.F8):", "+                    if (self.version in version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     lineIter.put(line)", "                     lineno -= 1"]]], "op-name": "replace_GtE_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_In", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "105": {"result-type": "normal", "occurrence": 17, "result-data": [{"occurrence": 17, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -292,7 +292,7 @@", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "-                elif (stripped[1] == '@'):", "+                elif (stripped[1] in '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))", "                 else:", "                     newExcludedSet.add(stripped[1:])"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "352": {"result-type": "normal", "occurrence": 31, "result-data": [{"occurrence": 31, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -453,7 +453,7 @@", "                 self._handleInclude(args[1])", "                 continue", "             if (self._state == STATE_COMMANDS):", "-                if (args[0] == '%ksappend'):", "+                if (args[0] < '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):", "                     newSection = args[0]"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "31", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "438": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -248,7 +248,7 @@", "             retval += ' --nocore'", "         if (self.handleMissing == constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "-        if (self.instLangs is not None):", "+        if (self.instLangs <= None):", "             retval += (' --instLangs=%s' % self.instLangs)", "         if self.multiLib:", "             retval += ' --multilib'"]]], "op-name": "replace_IsNot_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "507": {"result-type": "normal", "occurrence": 26, "result-data": [{"occurrence": 26, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line == '') or (line.lstrip()[0] > '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "26", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "76": {"result-type": "normal", "occurrence": 28, "result-data": [{"occurrence": 28, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -447,7 +447,7 @@", "                 self._handleSpecialComments(self._line)", "                 continue", "             args = shlex.split(self._line, comments=True)", "-            if (args[0] == '%include'):", "+            if (args[0] <= '%include'):", "                 if ((len(args) == 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "28", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "109": {"result-type": "normal", "occurrence": 21, "result-data": [{"occurrence": 21, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -383,7 +383,7 @@", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)", "-                if (args and (args[0] == '%end')):", "+                if (args and (args[0] in '%end')):", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "21", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "384": {"result-type": "normal", "occurrence": 17, "result-data": [{"occurrence": 17, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -292,7 +292,7 @@", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "-                elif (stripped[1] == '@'):", "+                elif (stripped[1] is not '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))", "                 else:", "                     newExcludedSet.add(stripped[1:])"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "193": {"result-type": "normal", "occurrence": 26, "result-data": [{"occurrence": 26, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line == '') or (line.lstrip()[0] is '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "26", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "387": {"result-type": "normal", "occurrence": 20, "result-data": [{"occurrence": 20, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line == '') and (self._includeDepth is not 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "20", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "63": {"result-type": "normal", "occurrence": 15, "result-data": [{"occurrence": 15, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] <= '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "122": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -173,7 +173,7 @@", "             return ('@%s' % self.name)", " ", "     def __lt__(self, other):", "-        return (self.name < other.name)", "+        return (self.name <= other.name)", " ", "     def __le__(self, other):", "         return (self.name <= other.name)"]]], "op-name": "replace_Lt_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Lt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "152": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -46,7 +46,7 @@", "             contents = load_to_str(ksurl)", "         except KickstartError as e:", "             raise KickstartError(formatErrorMsg(lineno, msg=(_('Unable to open %%ksappend file: %s') % str(e))))", "-        if (contents is not None):", "+        if (contents in None):", "             retval += contents.encode(sys.getdefaultencoding())", "     return retval", " "]]], "op-name": "replace_IsNot_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "288": {"result-type": "normal", "occurrence": 13, "result-data": [{"occurrence": 13, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -287,7 +287,7 @@", "             stripped = pkg.strip()", "             if (stripped[0:2] == '@^'):", "                 self.environment = stripped[2:]", "-            elif (stripped[0] == '@'):", "+            elif (stripped[0] not in '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "253": {"result-type": "normal", "occurrence": 38, "result-data": [{"occurrence": 38, "line_number": 722, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -447,7 +447,7 @@", "                 self._handleSpecialComments(self._line)", "                 continue", "             args = shlex.split(self._line, comments=True)", "-            if (args[0] == '%include'):", "+            if (args[1] == '%include'):", "                 if ((len(args) == 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "38", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "70": {"result-type": "normal", "occurrence": 22, "result-data": [{"occurrence": 22, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -386,7 +386,7 @@", "                 if (args and (args[0] == '%end')):", "                     self._finalize(obj)", "                     break", "-                elif (args and (args[0] == '%include')):", "+                elif (args and (args[0] <= '%include')):", "                     if ((len(args) == 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "22", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "287": {"result-type": "normal", "occurrence": 12, "result-data": [{"occurrence": 12, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -285,7 +285,7 @@", "         excludedGroupList = []", "         for pkg in pkgList:", "             stripped = pkg.strip()", "-            if (stripped[0:2] == '@^'):", "+            if (stripped[0:2] not in '@^'):", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "131": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -173,7 +173,7 @@", "             return ('@%s' % self.name)", " ", "     def __lt__(self, other):", "-        return (self.name < other.name)", "+        return (self.name > other.name)", " ", "     def __le__(self, other):", "         return (self.name <= other.name)"]]], "op-name": "replace_Lt_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Lt_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "527": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp != '/bin/sh') and (self.interp >= '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "540": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -176,7 +176,7 @@", "         return (self.name < other.name)", " ", "     def __le__(self, other):", "-        return (self.name <= other.name)", "+        return (self.name not in other.name)", " ", "     def __eq__(self, other):", "         return (self.name == other.name)"]]], "op-name": "replace_LtE_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_LtE_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "80": {"result-type": "normal", "occurrence": 32, "result-data": [{"occurrence": 32, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -455,7 +455,7 @@", "             if (self._state == STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "-                elif (args[0][0] == '%'):", "+                elif (args[0][0] <= '%'):", "                     newSection = args[0]", "                     if (not self._validState(newSection)):", "                         if self.unknownSectionIsFatal:"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "32", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "361": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -188,7 +188,7 @@", "         return (self.name > other.name)", " ", "     def __ge__(self, other):", "-        return (self.name >= other.name)", "+        return (self.name != other.name)", "     __hash__ = KickstartObject.__hash__", " ", " class Packages(KickstartObject):"]]], "op-name": "replace_GtE_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "360": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -149,7 +149,7 @@", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))", "-        elif (self._ver >= version.F8):", "+        elif (self._ver != version.F8):", "             return (retval + ('\\n%s\\n%%end\\n' % self.script))", "         else:", "             return (retval + ('\\n%s\\n' % self.script))"]]], "op-name": "replace_GtE_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "532": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -188,7 +188,7 @@", "         return (self.name > other.name)", " ", "     def __ge__(self, other):", "-        return (self.name >= other.name)", "+        return (self.name is other.name)", "     __hash__ = KickstartObject.__hash__", " ", " class Packages(KickstartObject):"]]], "op-name": "replace_GtE_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "179": {"result-type": "normal", "occurrence": 12, "result-data": [{"occurrence": 12, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -285,7 +285,7 @@", "         excludedGroupList = []", "         for pkg in pkgList:", "             stripped = pkg.strip()", "-            if (stripped[0:2] == '@^'):", "+            if (stripped[0:2] is '@^'):", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "56": {"result-type": "normal", "occurrence": 8, "result-data": [{"occurrence": 8, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -167,7 +167,7 @@", "         'Return a string formatted for output to a kickstart file.'", "         if (self.include == constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "-        elif (self.include == constants.GROUP_ALL):", "+        elif (self.include <= constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)", "         else:", "             return ('@%s' % self.name)"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "313": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -254,7 +254,7 @@", "             retval += ' --multilib'", "         if self.excludeWeakdeps:", "             retval += ' --excludeWeakdeps'", "-        if (self._ver >= version.F8):", "+        if (self._ver > version.F8):", "             return (((retval + '\\n') + pkgs) + '\\n%end\\n')", "         else:", "             return (((retval + '\\n') + pkgs) + '\\n')"]]], "op-name": "replace_GtE_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "255": {"result-type": "normal", "occurrence": 40, "result-data": [{"occurrence": 40, "line_number": 723, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -448,7 +448,7 @@", "                 continue", "             args = shlex.split(self._line, comments=True)", "             if (args[0] == '%include'):", "-                if ((len(args) == 1) or (not args[1])):", "+                if ((len(args) == 1) or (not args[2])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "40", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "10": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": 109, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -52,7 +52,7 @@", " ", " def preprocessFromStringToString(s):", "     'Preprocess the kickstart file, provided as the string s.  This\\n       method is currently only useful for handling %ksappend lines, which\\n       need to be fetched before the real kickstart parser can be run.\\n       Returns the complete kickstart file as a string.\\n    '", "-    i = iter((s.splitlines(True) + ['']))", "+    i = iter((s.splitlines(False) + ['']))", "     return _preprocessStateMachine(i)", " ", " def preprocessKickstartToString(f):"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "435": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -471,7 +471,7 @@", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "             elif (self._state == STATE_END):", "                 break", "-            elif (self._includeDepth > 0):", "+            elif (self._includeDepth == 0):", "                 lineIter.put(self._line)", "                 lineno -= 1", "                 lineno = self._readSection(lineIter, lineno)"]]], "op-name": "replace_Gt_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "192": {"result-type": "normal", "occurrence": 25, "result-data": [{"occurrence": 25, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line is '') or (line.lstrip()[0] == '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "25", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "496": {"result-type": "normal", "occurrence": 15, "result-data": [{"occurrence": 15, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] > '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "168": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -126,7 +126,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.type == constants.KS_SCRIPT_PRE):", "+        if (self.type is constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "9": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": 64, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -23,7 +23,7 @@", "     retval = ''", "     if six.PY3:", "         retval = retval.encode(sys.getdefaultencoding())", "-    while True:", "+    while False:", "         try:", "             l = next(lineIter)", "         except StopIteration:"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "372": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -134,7 +134,7 @@", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "-        elif (self.type == constants.KS_SCRIPT_ONERROR):", "+        elif (self.type is not constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "444": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -379,7 +379,7 @@", "                 continue", "             if line.lstrip().startswith('%'):", "                 possibleSectionStart = line.split()[0]", "-                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart not in ('%end', '%include'))):", "+                if ((not self._validState(possibleSectionStart)) and (possibleSectionStart <= ('%end', '%include'))):", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)"]]], "op-name": "replace_NotIn_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "223": {"result-type": "normal", "occurrence": 8, "result-data": [{"occurrence": 8, "line_number": 458, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -288,7 +288,7 @@", "             if (stripped[0:2] == '@^'):", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "-                self._processGroup(stripped[1:])", "+                self._processGroup(stripped[2:])", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "362": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -254,7 +254,7 @@", "             retval += ' --multilib'", "         if self.excludeWeakdeps:", "             retval += ' --excludeWeakdeps'", "-        if (self._ver >= version.F8):", "+        if (self._ver != version.F8):", "             return (((retval + '\\n') + pkgs) + '\\n%end\\n')", "         else:", "             return (((retval + '\\n') + pkgs) + '\\n')"]]], "op-name": "replace_GtE_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_NotEq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "226": {"result-type": "normal", "occurrence": 11, "result-data": [{"occurrence": 11, "line_number": 460, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:4] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "354": {"result-type": "normal", "occurrence": 33, "result-data": [{"occurrence": 33, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -469,7 +469,7 @@", "                     lineno = self._readSection(lineIter, lineno)", "                 else:", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "-            elif (self._state == STATE_END):", "+            elif (self._state < STATE_END):", "                 break", "             elif (self._includeDepth > 0):", "                 lineIter.put(self._line)"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "33", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "161": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": 608, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -373,7 +373,7 @@", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)", "             except StopIteration:", "-                break", "+                continue", "             lineno += 1", "             if (self._isBlankOrComment(line) and (not obj.allLines)):", "                 continue"]]], "op-name": "break_continue_replacement", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "break_continue_replacement", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "42": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -185,7 +185,7 @@", "         return (self.name != other.name)", " ", "     def __gt__(self, other):", "-        return (self.name > other.name)", "+        return (self.name is not other.name)", " ", "     def __ge__(self, other):", "         return (self.name >= other.name)"]]], "op-name": "replace_Gt_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "28": {"result-type": "normal", "occurrence": 19, "result-data": [{"occurrence": 19, "line_number": 689, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -427,7 +427,7 @@", "             return", "         self._includeDepth += 1", "         try:", "-            self.readKickstart(f, reset=False)", "+            self.readKickstart(f, reset=True)", "         except KickstartError:", "             if self.missingIncludeIsFatal:", "                 raise"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "19", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "398": {"result-type": "normal", "occurrence": 31, "result-data": [{"occurrence": 31, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -453,7 +453,7 @@", "                 self._handleInclude(args[1])", "                 continue", "             if (self._state == STATE_COMMANDS):", "-                if (args[0] == '%ksappend'):", "+                if (args[0] is not '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):", "                     newSection = args[0]"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "31", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "107": {"result-type": "normal", "occurrence": 19, "result-data": [{"occurrence": 19, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line in '') and (self._includeDepth == 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "19", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "221": {"result-type": "normal", "occurrence": 6, "result-data": [{"occurrence": 6, "line_number": 456, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -286,7 +286,7 @@", "         for pkg in pkgList:", "             stripped = pkg.strip()", "             if (stripped[0:2] == '@^'):", "-                self.environment = stripped[2:]", "+                self.environment = stripped[3:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "123": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp is '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "177": {"result-type": "normal", "occurrence": 10, "result-data": [{"occurrence": 10, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -235,7 +235,7 @@", "             p.sort()", "             for pkg in p:", "                 pkgs += ('-%s\\n' % pkg)", "-            if ((pkgs == '') and (not self.seen)):", "+            if ((pkgs is '') and (not self.seen)):", "                 return ''", "         retval = '\\n%packages'", "         if self.default:"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "413": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -176,7 +176,7 @@", "         return (self.name < other.name)", " ", "     def __le__(self, other):", "-        return (self.name <= other.name)", "+        return (self.name < other.name)", " ", "     def __eq__(self, other):", "         return (self.name == other.name)"]]], "op-name": "replace_LtE_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_LtE_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "197": {"result-type": "normal", "occurrence": 30, "result-data": [{"occurrence": 30, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -452,7 +452,7 @@", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue", "-            if (self._state == STATE_COMMANDS):", "+            if (self._state is STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "30", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "169": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -128,7 +128,7 @@", "         retval = ''", "         if (self.type == constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "-        elif (self.type == constants.KS_SCRIPT_POST):", "+        elif (self.type is constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "220": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": 455, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -285,7 +285,7 @@", "         excludedGroupList = []", "         for pkg in pkgList:", "             stripped = pkg.strip()", "-            if (stripped[0:2] == '@^'):", "+            if (stripped[0:3] == '@^'):", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "557": {"result-type": "normal", "occurrence": 7, "result-data": [{"occurrence": 7, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -165,7 +165,7 @@", " ", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "-        if (self.include == constants.GROUP_REQUIRED):", "+        if (self.include >= constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "         elif (self.include == constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "419": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -188,7 +188,7 @@", "         return (self.name > other.name)", " ", "     def __ge__(self, other):", "-        return (self.name >= other.name)", "+        return (self.name <= other.name)", "     __hash__ = KickstartObject.__hash__", " ", " class Packages(KickstartObject):"]]], "op-name": "replace_GtE_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "2": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp != '/bin/sh') and (self.interp < '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "286": {"result-type": "normal", "occurrence": 11, "result-data": [{"occurrence": 11, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -246,7 +246,7 @@", "             retval += ' --nobase'", "         if self.nocore:", "             retval += ' --nocore'", "-        if (self.handleMissing == constants.KS_MISSING_IGNORE):", "+        if (self.handleMissing not in constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "         if (self.instLangs is not None):", "             retval += (' --instLangs=%s' % self.instLangs)"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "67": {"result-type": "normal", "occurrence": 19, "result-data": [{"occurrence": 19, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line <= '') and (self._includeDepth == 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "19", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "247": {"result-type": "normal", "occurrence": 32, "result-data": [{"occurrence": 32, "line_number": 672, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -413,7 +413,7 @@", "         try:", "             fn()", "         except Exception as msg:", "-            self.errorsCount += 1", "+            self.errorsCount += 2", "             if self.errorsAreFatal:", "                 raise", "             else:"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "32", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "78": {"result-type": "normal", "occurrence": 30, "result-data": [{"occurrence": 30, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -452,7 +452,7 @@", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue", "-            if (self._state == STATE_COMMANDS):", "+            if (self._state <= STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "30", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "570": {"result-type": "normal", "occurrence": 20, "result-data": [{"occurrence": 20, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line == '') and (self._includeDepth >= 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "20", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "377": {"result-type": "normal", "occurrence": 10, "result-data": [{"occurrence": 10, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -235,7 +235,7 @@", "             p.sort()", "             for pkg in p:", "                 pkgs += ('-%s\\n' % pkg)", "-            if ((pkgs == '') and (not self.seen)):", "+            if ((pkgs is not '') and (not self.seen)):", "                 return ''", "         retval = '\\n%packages'", "         if self.default:"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "349": {"result-type": "normal", "occurrence": 28, "result-data": [{"occurrence": 28, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -447,7 +447,7 @@", "                 self._handleSpecialComments(self._line)", "                 continue", "             args = shlex.split(self._line, comments=True)", "-            if (args[0] == '%include'):", "+            if (args[0] < '%include'):", "                 if ((len(args) == 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "28", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "380": {"result-type": "normal", "occurrence": 13, "result-data": [{"occurrence": 13, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -287,7 +287,7 @@", "             stripped = pkg.strip()", "             if (stripped[0:2] == '@^'):", "                 self.environment = stripped[2:]", "-            elif (stripped[0] == '@'):", "+            elif (stripped[0] is not '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "183": {"result-type": "normal", "occurrence": 16, "result-data": [{"occurrence": 16, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] == '@^') and (self.environment is stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "334": {"result-type": "normal", "occurrence": 13, "result-data": [{"occurrence": 13, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -287,7 +287,7 @@", "             stripped = pkg.strip()", "             if (stripped[0:2] == '@^'):", "                 self.environment = stripped[2:]", "-            elif (stripped[0] == '@'):", "+            elif (stripped[0] < '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "20": {"result-type": "normal", "occurrence": 11, "result-data": [{"occurrence": 11, "line_number": 358, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -211,7 +211,7 @@", "         self.instLangs = None", "         self.multiLib = False", "         self.excludeWeakdeps = False", "-        self.seen = False", "+        self.seen = True", " ", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "3": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -182,7 +182,7 @@", "         return (self.name == other.name)", " ", "     def __ne__(self, other):", "-        return (self.name != other.name)", "+        return (self.name < other.name)", " ", "     def __gt__(self, other):", "         return (self.name > other.name)"]]], "op-name": "replace_NotEq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "158": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -358,7 +358,7 @@", " ", "     def _handleSpecialComments(self, line):", "         'Kickstart recognizes a couple special comments.'", "-        if (self._state != STATE_COMMANDS):", "+        if (self._state > STATE_COMMANDS):", "             return", "         if (line[:10] == '#platform='):", "             self.handler.platform = self._line[10:].strip()"]]], "op-name": "replace_NotEq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "421": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -369,7 +369,7 @@", "             try:", "                 line = next(lineIter)", "                 if ((line == '') and (self._includeDepth == 0)):", "-                    if (self.version >= version.F8):", "+                    if (self.version <= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)", "             except StopIteration:"]]], "op-name": "replace_GtE_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_LtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "459": {"result-type": "normal", "occurrence": 12, "result-data": [{"occurrence": 12, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -285,7 +285,7 @@", "         excludedGroupList = []", "         for pkg in pkgList:", "             stripped = pkg.strip()", "-            if (stripped[0:2] == '@^'):", "+            if (stripped[0:2] != '@^'):", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "474": {"result-type": "normal", "occurrence": 27, "result-data": [{"occurrence": 27, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -438,7 +438,7 @@", "         while True:", "             try:", "                 self._line = next(lineIter)", "-                if (self._line == ''):", "+                if (self._line != ''):", "                     break", "             except StopIteration:", "                 break"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "27", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "140": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -145,7 +145,7 @@", "         if self.errorOnFail:", "             retval += ' --erroronfail'", "         if self.script.endswith('\\n'):", "-            if (self._ver >= version.F8):", "+            if (self._ver in version.F8):", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))"]]], "op-name": "replace_GtE_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "576": {"result-type": "normal", "occurrence": 26, "result-data": [{"occurrence": 26, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line == '') or (line.lstrip()[0] >= '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "26", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "204": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -140,7 +140,7 @@", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "-        if (self.logfile is not None):", "+        if (self.logfile != None):", "             retval += (' --logfile=%s' % self.logfile)", "         if self.errorOnFail:", "             retval += ' --erroronfail'"]]], "op-name": "replace_IsNot_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "251": {"result-type": "normal", "occurrence": 36, "result-data": [{"occurrence": 36, "line_number": 701, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -434,7 +434,7 @@", "         self._includeDepth -= 1", " ", "     def _stateMachine(self, lineIter):", "-        lineno = 0", "+        lineno = 1", "         while True:", "             try:", "                 self._line = next(lineIter)"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "36", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "302": {"result-type": "normal", "occurrence": 27, "result-data": [{"occurrence": 27, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -438,7 +438,7 @@", "         while True:", "             try:", "                 self._line = next(lineIter)", "-                if (self._line == ''):", "+                if (self._line not in ''):", "                     break", "             except StopIteration:", "                 break"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "27", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "74": {"result-type": "normal", "occurrence": 26, "result-data": [{"occurrence": 26, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line == '') or (line.lstrip()[0] <= '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "26", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "142": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -188,7 +188,7 @@", "         return (self.name > other.name)", " ", "     def __ge__(self, other):", "-        return (self.name >= other.name)", "+        return (self.name in other.name)", "     __hash__ = KickstartObject.__hash__", " ", " class Packages(KickstartObject):"]]], "op-name": "replace_GtE_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "39": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -267,7 +267,7 @@", "         if (ns.nodefaults and ns.optional):", "             raise KickstartParseError(_('Group cannot specify both --nodefaults and --optional'))", "         grp = ' '.join(extra)", "-        if (grp in [g.name for g in self.groupList]):", "+        if (grp > [g.name for g in self.groupList]):", "             return", "         if ns.nodefaults:", "             self.groupList.append(Group(name=grp, include=constants.GROUP_REQUIRED))"]]], "op-name": "replace_In_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "402": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -406,7 +406,7 @@", " ", "     def _validState(self, st):", "         'Is the given section tag one that has been registered with the parser?'", "-        return (st in list(self._sections.keys()))", "+        return (st not in list(self._sections.keys()))", " ", "     def _tryFunc(self, fn):", "         \"Call the provided function (which doesn't take any arguments) and\\n           do the appropriate error handling.  If errorsAreFatal is False, this\\n           function will just print the exception and keep going.\\n        \""]]], "op-name": "replace_In_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "305": {"result-type": "normal", "occurrence": 30, "result-data": [{"occurrence": 30, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -452,7 +452,7 @@", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue", "-            if (self._state == STATE_COMMANDS):", "+            if (self._state not in STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "30", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "164": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": 708, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -439,7 +439,7 @@", "             try:", "                 self._line = next(lineIter)", "                 if (self._line == ''):", "-                    break", "+                    continue", "             except StopIteration:", "                 break", "             lineno += 1"]]], "op-name": "break_continue_replacement", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "break_continue_replacement", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "24": {"result-type": "normal", "occurrence": 15, "result-data": [{"occurrence": 15, "line_number": 501, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -309,7 +309,7 @@", " class KickstartParser(object):", "     \"The kickstart file parser class as represented by a basic state\\n       machine.  To create a specialized parser, make a subclass and override\\n       any of the methods you care about.  Methods that don't need to do\\n       anything may just pass.  However, _stateMachine should never be\\n       overridden.\\n    \"", " ", "-    def __init__(self, handler, followIncludes=True, errorsAreFatal=True, missingIncludeIsFatal=True, unknownSectionIsFatal=True):", "+    def __init__(self, handler, followIncludes=True, errorsAreFatal=False, missingIncludeIsFatal=True, unknownSectionIsFatal=True):", "         'Create a new KickstartParser instance.  Instance attributes:\\n\\n           errorsAreFatal        -- Should errors cause processing to halt, or\\n                                    just print a message to the screen?  This\\n                                    is most useful for writing syntax checkers\\n                                    that may want to continue after an error is\\n                                    encountered.\\n           followIncludes        -- If %include is seen, should the included\\n                                    file be checked as well or skipped?\\n           handler               -- An instance of a BaseHandler subclass.  If\\n                                    None, the input file will still be parsed\\n                                    but no data will be saved and no commands\\n                                    will be executed.\\n           missingIncludeIsFatal -- Should missing include files be fatal, even\\n                                    if errorsAreFatal is False?\\n           unknownSectionIsFatal -- Should an unknown %section be fatal?  Not all\\n                                    sections are handled by pykickstart.  Some are\\n                                    user-defined, so there should be a way to have\\n                                    pykickstart ignore them.\\n        '", "         self.errorsAreFatal = errorsAreFatal", "         self.errorsCount = 0"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "188": {"result-type": "normal", "occurrence": 21, "result-data": [{"occurrence": 21, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -383,7 +383,7 @@", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)", "-                if (args and (args[0] == '%end')):", "+                if (args and (args[0] is '%end')):", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "21", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "59": {"result-type": "normal", "occurrence": 11, "result-data": [{"occurrence": 11, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -246,7 +246,7 @@", "             retval += ' --nobase'", "         if self.nocore:", "             retval += ' --nocore'", "-        if (self.handleMissing == constants.KS_MISSING_IGNORE):", "+        if (self.handleMissing <= constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "         if (self.instLangs is not None):", "             retval += (' --instLangs=%s' % self.instLangs)"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "48": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -28,7 +28,7 @@", "             l = next(lineIter)", "         except StopIteration:", "             break", "-        if (l == ''):", "+        if (l <= ''):", "             break", "         lineno += 1", "         ksurl = None"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "121": {"result-type": "normal", "occurrence": 33, "result-data": [{"occurrence": 33, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -469,7 +469,7 @@", "                     lineno = self._readSection(lineIter, lineno)", "                 else:", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "-            elif (self._state == STATE_END):", "+            elif (self._state in STATE_END):", "                 break", "             elif (self._includeDepth > 0):", "                 lineIter.put(self._line)"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "33", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "374": {"result-type": "normal", "occurrence": 7, "result-data": [{"occurrence": 7, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -165,7 +165,7 @@", " ", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "-        if (self.include == constants.GROUP_REQUIRED):", "+        if (self.include is not constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "         elif (self.include == constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "29": {"result-type": "normal", "occurrence": 20, "result-data": [{"occurrence": 20, "line_number": 703, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -435,7 +435,7 @@", " ", "     def _stateMachine(self, lineIter):", "         lineno = 0", "-        while True:", "+        while False:", "             try:", "                 self._line = next(lineIter)", "                 if (self._line == ''):"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "20", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "395": {"result-type": "normal", "occurrence": 28, "result-data": [{"occurrence": 28, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -447,7 +447,7 @@", "                 self._handleSpecialComments(self._line)", "                 continue", "             args = shlex.split(self._line, comments=True)", "-            if (args[0] == '%include'):", "+            if (args[0] is not '%include'):", "                 if ((len(args) == 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "28", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "201": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -299,7 +299,7 @@", "             else:", "                 newPackageSet.add(stripped)", "         excludedGroupNames = [g.name for g in excludedGroupList]", "-        self.groupList = [g for g in self.groupList if (g.name not in excludedGroupNames)]", "+        self.groupList = [g for g in self.groupList if (g.name > excludedGroupNames)]", "         self.excludedGroupList.extend(excludedGroupList)", "         existingPackageSet = ((existingPackageSet - newExcludedSet) | newPackageSet)", "         existingExcludedSet = ((existingExcludedSet - existingPackageSet) | newExcludedSet)"]]], "op-name": "replace_NotIn_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "212": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -267,7 +267,7 @@", "         if (ns.nodefaults and ns.optional):", "             raise KickstartParseError(_('Group cannot specify both --nodefaults and --optional'))", "         grp = ' '.join(extra)", "-        if (grp in [g.name for g in self.groupList]):", "+        if (grp is [g.name for g in self.groupList]):", "             return", "         if ns.nodefaults:", "             self.groupList.append(Group(name=grp, include=constants.GROUP_REQUIRED))"]]], "op-name": "replace_In_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "523": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -299,7 +299,7 @@", "             else:", "                 newPackageSet.add(stripped)", "         excludedGroupNames = [g.name for g in excludedGroupList]", "-        self.groupList = [g for g in self.groupList if (g.name not in excludedGroupNames)]", "+        self.groupList = [g for g in self.groupList if (g.name == excludedGroupNames)]", "         self.excludedGroupList.extend(excludedGroupList)", "         existingPackageSet = ((existingPackageSet - newExcludedSet) | newPackageSet)", "         existingExcludedSet = ((existingExcludedSet - existingPackageSet) | newExcludedSet)"]]], "op-name": "replace_NotIn_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "518": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -358,7 +358,7 @@", " ", "     def _handleSpecialComments(self, line):", "         'Kickstart recognizes a couple special comments.'", "-        if (self._state != STATE_COMMANDS):", "+        if (self._state == STATE_COMMANDS):", "             return", "         if (line[:10] == '#platform='):", "             self.handler.platform = self._line[10:].strip()"]]], "op-name": "replace_NotEq_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_Eq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "554": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -132,7 +132,7 @@", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "-        elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "+        elif (self.type >= constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "456": {"result-type": "normal", "occurrence": 9, "result-data": [{"occurrence": 9, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -179,7 +179,7 @@", "         return (self.name <= other.name)", " ", "     def __eq__(self, other):", "-        return (self.name == other.name)", "+        return (self.name != other.name)", " ", "     def __ne__(self, other):", "         return (self.name != other.name)"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "441": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -182,7 +182,7 @@", "         return (self.name == other.name)", " ", "     def __ne__(self, other):", "-        return (self.name != other.name)", "+        return (self.name in other.name)", " ", "     def __gt__(self, other):", "         return (self.name > other.name)"]]], "op-name": "replace_NotEq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "275": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -28,7 +28,7 @@", "             l = next(lineIter)", "         except StopIteration:", "             break", "-        if (l == ''):", "+        if (l not in ''):", "             break", "         lineno += 1", "         ksurl = None"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "314": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -369,7 +369,7 @@", "             try:", "                 line = next(lineIter)", "                 if ((line == '') and (self._includeDepth == 0)):", "-                    if (self.version >= version.F8):", "+                    if (self.version > version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)", "             except StopIteration:"]]], "op-name": "replace_GtE_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Gt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "414": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -299,7 +299,7 @@", "             else:", "                 newPackageSet.add(stripped)", "         excludedGroupNames = [g.name for g in excludedGroupList]", "-        self.groupList = [g for g in self.groupList if (g.name not in excludedGroupNames)]", "+        self.groupList = [g for g in self.groupList if (g.name is excludedGroupNames)]", "         self.excludedGroupList.extend(excludedGroupList)", "         existingPackageSet = ((existingPackageSet - newExcludedSet) | newPackageSet)", "         existingExcludedSet = ((existingExcludedSet - existingPackageSet) | newExcludedSet)"]]], "op-name": "replace_NotIn_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "45": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -471,7 +471,7 @@", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "             elif (self._state == STATE_END):", "                 break", "-            elif (self._includeDepth > 0):", "+            elif (self._includeDepth is 0):", "                 lineIter.put(self._line)", "                 lineno -= 1", "                 lineno = self._readSection(lineIter, lineno)"]]], "op-name": "replace_Gt_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Gt_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "308": {"result-type": "normal", "occurrence": 33, "result-data": [{"occurrence": 33, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -469,7 +469,7 @@", "                     lineno = self._readSection(lineIter, lineno)", "                 else:", "                     self._tryFunc((lambda : self.handleCommand(lineno, args)))", "-            elif (self._state == STATE_END):", "+            elif (self._state not in STATE_END):", "                 break", "             elif (self._includeDepth > 0):", "                 lineIter.put(self._line)"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "33", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "328": {"result-type": "normal", "occurrence": 7, "result-data": [{"occurrence": 7, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -165,7 +165,7 @@", " ", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "-        if (self.include == constants.GROUP_REQUIRED):", "+        if (self.include < constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "         elif (self.include == constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "119": {"result-type": "normal", "occurrence": 31, "result-data": [{"occurrence": 31, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -453,7 +453,7 @@", "                 self._handleInclude(args[1])", "                 continue", "             if (self._state == STATE_COMMANDS):", "-                if (args[0] == '%ksappend'):", "+                if (args[0] in '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):", "                     newSection = args[0]"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "31", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "296": {"result-type": "normal", "occurrence": 21, "result-data": [{"occurrence": 21, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -383,7 +383,7 @@", "                     obj.handleLine(line)", "                     continue", "                 args = shlex.split(line)", "-                if (args and (args[0] == '%end')):", "+                if (args and (args[0] not in '%end')):", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "21", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "231": {"result-type": "normal", "occurrence": 16, "result-data": [{"occurrence": 16, "line_number": 524, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -312,7 +312,7 @@", "     def __init__(self, handler, followIncludes=True, errorsAreFatal=True, missingIncludeIsFatal=True, unknownSectionIsFatal=True):", "         'Create a new KickstartParser instance.  Instance attributes:\\n\\n           errorsAreFatal        -- Should errors cause processing to halt, or\\n                                    just print a message to the screen?  This\\n                                    is most useful for writing syntax checkers\\n                                    that may want to continue after an error is\\n                                    encountered.\\n           followIncludes        -- If %include is seen, should the included\\n                                    file be checked as well or skipped?\\n           handler               -- An instance of a BaseHandler subclass.  If\\n                                    None, the input file will still be parsed\\n                                    but no data will be saved and no commands\\n                                    will be executed.\\n           missingIncludeIsFatal -- Should missing include files be fatal, even\\n                                    if errorsAreFatal is False?\\n           unknownSectionIsFatal -- Should an unknown %section be fatal?  Not all\\n                                    sections are handled by pykickstart.  Some are\\n                                    user-defined, so there should be a way to have\\n                                    pykickstart ignore them.\\n        '", "         self.errorsAreFatal = errorsAreFatal", "-        self.errorsCount = 0", "+        self.errorsCount = 1", "         self.followIncludes = followIncludes", "         self.handler = handler", "         self.currentdir = {}"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "463": {"result-type": "normal", "occurrence": 16, "result-data": [{"occurrence": 16, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] == '@^') and (self.environment != stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "230": {"result-type": "normal", "occurrence": 15, "result-data": [{"occurrence": 15, "line_number": 465, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -295,7 +295,7 @@", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))", "                 else:", "-                    newExcludedSet.add(stripped[1:])", "+                    newExcludedSet.add(stripped[2:])", "             else:", "                 newPackageSet.add(stripped)", "         excludedGroupNames = [g.name for g in excludedGroupList]"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "82": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -173,7 +173,7 @@", "             return ('@%s' % self.name)", " ", "     def __lt__(self, other):", "-        return (self.name < other.name)", "+        return (self.name == other.name)", " ", "     def __le__(self, other):", "         return (self.name <= other.name)"]]], "op-name": "replace_Lt_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Lt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "66": {"result-type": "normal", "occurrence": 18, "result-data": [{"occurrence": 18, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -360,7 +360,7 @@", "         'Kickstart recognizes a couple special comments.'", "         if (self._state != STATE_COMMANDS):", "             return", "-        if (line[:10] == '#platform='):", "+        if (line[:10] <= '#platform='):", "             self.handler.platform = self._line[10:].strip()", " ", "     def _readSection(self, lineIter, lineno):"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "241": {"result-type": "normal", "occurrence": 26, "result-data": [{"occurrence": 26, "line_number": 635, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -387,7 +387,7 @@", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):", "-                    if ((len(args) == 1) or (not args[1])):", "+                    if ((len(args) == 2) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "26", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "267": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -145,7 +145,7 @@", "         if self.errorOnFail:", "             retval += ' --erroronfail'", "         if self.script.endswith('\\n'):", "-            if (self._ver >= version.F8):", "+            if (self._ver not in version.F8):", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))"]]], "op-name": "replace_GtE_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "178": {"result-type": "normal", "occurrence": 11, "result-data": [{"occurrence": 11, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -246,7 +246,7 @@", "             retval += ' --nobase'", "         if self.nocore:", "             retval += ' --nocore'", "-        if (self.handleMissing == constants.KS_MISSING_IGNORE):", "+        if (self.handleMissing is constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "         if (self.instLangs is not None):", "             retval += (' --instLangs=%s' % self.instLangs)"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "297": {"result-type": "normal", "occurrence": 22, "result-data": [{"occurrence": 22, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -386,7 +386,7 @@", "                 if (args and (args[0] == '%end')):", "                     self._finalize(obj)", "                     break", "-                elif (args and (args[0] == '%include')):", "+                elif (args and (args[0] not in '%include')):", "                     if ((len(args) == 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "22", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "394": {"result-type": "normal", "occurrence": 27, "result-data": [{"occurrence": 27, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -438,7 +438,7 @@", "         while True:", "             try:", "                 self._line = next(lineIter)", "-                if (self._line == ''):", "+                if (self._line is not ''):", "                     break", "             except StopIteration:", "                 break"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "27", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "171": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -132,7 +132,7 @@", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'", "-        elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "+        elif (self.type is constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "73": {"result-type": "normal", "occurrence": 25, "result-data": [{"occurrence": 25, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -420,7 +420,7 @@", "                 print(msg)", " ", "     def _isBlankOrComment(self, line):", "-        return (line.isspace() or (line == '') or (line.lstrip()[0] == '#'))", "+        return (line.isspace() or (line <= '') or (line.lstrip()[0] == '#'))", " ", "     def _handleInclude(self, f):", "         if (not self.followIncludes):"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "25", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "276": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -126,7 +126,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.type == constants.KS_SCRIPT_PRE):", "+        if (self.type not in constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "         elif (self.type == constants.KS_SCRIPT_POST):", "             retval += '\\n%post'"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "541": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp not in '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "522": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -173,7 +173,7 @@", "             return ('@%s' % self.name)", " ", "     def __lt__(self, other):", "-        return (self.name < other.name)", "+        return (self.name not in other.name)", " ", "     def __le__(self, other):", "         return (self.name <= other.name)"]]], "op-name": "replace_Lt_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Lt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "478": {"result-type": "normal", "occurrence": 31, "result-data": [{"occurrence": 31, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -453,7 +453,7 @@", "                 self._handleInclude(args[1])", "                 continue", "             if (self._state == STATE_COMMANDS):", "-                if (args[0] == '%ksappend'):", "+                if (args[0] != '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):", "                     newSection = args[0]"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "31", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "386": {"result-type": "normal", "occurrence": 19, "result-data": [{"occurrence": 19, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -368,7 +368,7 @@", "         while True:", "             try:", "                 line = next(lineIter)", "-                if ((line == '') and (self._includeDepth == 0)):", "+                if ((line is not '') and (self._includeDepth == 0)):", "                     if (self.version >= version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "19", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "355": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp <= '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "427": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -46,7 +46,7 @@", "             contents = load_to_str(ksurl)", "         except KickstartError as e:", "             raise KickstartError(formatErrorMsg(lineno, msg=(_('Unable to open %%ksappend file: %s') % str(e))))", "-        if (contents is not None):", "+        if (contents == None):", "             retval += contents.encode(sys.getdefaultencoding())", "     return retval", " "]]], "op-name": "replace_IsNot_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "457": {"result-type": "normal", "occurrence": 10, "result-data": [{"occurrence": 10, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -235,7 +235,7 @@", "             p.sort()", "             for pkg in p:", "                 pkgs += ('-%s\\n' % pkg)", "-            if ((pkgs == '') and (not self.seen)):", "+            if ((pkgs != '') and (not self.seen)):", "                 return ''", "         retval = '\\n%packages'", "         if self.default:"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "531": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -149,7 +149,7 @@", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))", "-        elif (self._ver >= version.F8):", "+        elif (self._ver is version.F8):", "             return (retval + ('\\n%s\\n%%end\\n' % self.script))", "         else:", "             return (retval + ('\\n%s\\n' % self.script))"]]], "op-name": "replace_GtE_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "416": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -173,7 +173,7 @@", "             return ('@%s' % self.name)", " ", "     def __lt__(self, other):", "-        return (self.name < other.name)", "+        return (self.name != other.name)", " ", "     def __le__(self, other):", "         return (self.name <= other.name)"]]], "op-name": "replace_Lt_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Lt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "173": {"result-type": "normal", "occurrence": 6, "result-data": [{"occurrence": 6, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -138,7 +138,7 @@", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "-        if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "+        if ((self.type is constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "         if (self.logfile is not None):", "             retval += (' --logfile=%s' % self.logfile)"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "471": {"result-type": "normal", "occurrence": 24, "result-data": [{"occurrence": 24, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -391,7 +391,7 @@", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue", "-                elif (args and (args[0] == '%ksappend')):", "+                elif (args and (args[0] != '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "                     if (self.version >= version.F8):"]]], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotEq", "24", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "497": {"result-type": "normal", "occurrence": 16, "result-data": [{"occurrence": 16, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] == '@^') and (self.environment > stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "90": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -128,7 +128,7 @@", "         retval = ''", "         if (self.type == constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "-        elif (self.type == constants.KS_SCRIPT_POST):", "+        elif (self.type in constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "219": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": 455, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -285,7 +285,7 @@", "         excludedGroupList = []", "         for pkg in pkgList:", "             stripped = pkg.strip()", "-            if (stripped[0:2] == '@^'):", "+            if (stripped[1:2] == '@^'):", "                 self.environment = stripped[2:]", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "41": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -488,7 +488,7 @@", "         if reset:", "             self._reset()", "         if (not os.path.exists(f)):", "-            if ((self._includeDepth - 1) in self.currentdir):", "+            if ((self._includeDepth - 1) > self.currentdir):", "                 if os.path.exists(os.path.join(self.currentdir[(self._includeDepth - 1)], f)):", "                     f = os.path.join(self.currentdir[(self._includeDepth - 1)], f)", "         cd = os.path.dirname(f)"]]], "op-name": "replace_In_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_In_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "150": {"result-type": "normal", "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -369,7 +369,7 @@", "             try:", "                 line = next(lineIter)", "                 if ((line == '') and (self._includeDepth == 0)):", "-                    if (self.version >= version.F8):", "+                    if (self.version is not version.F8):", "                         raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Section %s does not end with %%end.') % obj.sectionOpen)))", "                     self._finalize(obj)", "             except StopIteration:"]]], "op-name": "replace_GtE_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_IsNot", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "53": {"result-type": "normal", "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -134,7 +134,7 @@", "             retval += '\\n%traceback'", "         elif (self.type == constants.KS_SCRIPT_PREINSTALL):", "             retval += '\\n%pre-install'", "-        elif (self.type == constants.KS_SCRIPT_ONERROR):", "+        elif (self.type <= constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "396": {"result-type": "normal", "occurrence": 29, "result-data": [{"occurrence": 29, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -448,7 +448,7 @@", "                 continue", "             args = shlex.split(self._line, comments=True)", "             if (args[0] == '%include'):", "-                if ((len(args) == 1) or (not args[1])):", "+                if ((len(args) is not 1) or (not args[1])):", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "29", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "487": {"result-type": "normal", "occurrence": 6, "result-data": [{"occurrence": 6, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -138,7 +138,7 @@", "             retval += '\\n%onerror'", "         if ((self.interp != '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "-        if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "+        if ((self.type > constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'", "         if (self.logfile is not None):", "             retval += (' --logfile=%s' % self.logfile)"]]], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Gt", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "180": {"result-type": "normal", "occurrence": 13, "result-data": [{"occurrence": 13, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -287,7 +287,7 @@", "             stripped = pkg.strip()", "             if (stripped[0:2] == '@^'):", "                 self.environment = stripped[2:]", "-            elif (stripped[0] == '@'):", "+            elif (stripped[0] is '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):"]]], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Is", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "265": {"result-type": "normal", "occurrence": 50, "result-data": [{"occurrence": 50, "line_number": 791, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -490,7 +490,7 @@", "         if (not os.path.exists(f)):", "             if ((self._includeDepth - 1) in self.currentdir):", "                 if os.path.exists(os.path.join(self.currentdir[(self._includeDepth - 1)], f)):", "-                    f = os.path.join(self.currentdir[(self._includeDepth - 1)], f)", "+                    f = os.path.join(self.currentdir[(self._includeDepth - 2)], f)", "         cd = os.path.dirname(f)", "         if (not cd.startswith('/')):", "             cd = os.path.abspath(cd)"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "50", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "217": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": 86, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -39,7 +39,7 @@", "             retval += l", "             continue", "         try:", "-            ksurl = ll.split(' ')[1]", "+            ksurl = ll.split(' ')[2]", "         except:", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Illegal url for %%ksappend: %s') % ll)))", "         try:"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "397": {"result-type": "normal", "occurrence": 30, "result-data": [{"occurrence": 30, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -452,7 +452,7 @@", "                     raise KickstartParseError(formatErrorMsg(lineno))", "                 self._handleInclude(args[1])", "                 continue", "-            if (self._state == STATE_COMMANDS):", "+            if (self._state is not STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "                 elif (args[0][0] == '%'):"]]], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_IsNot", "30", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "65": {"result-type": "normal", "occurrence": 17, "result-data": [{"occurrence": 17, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -292,7 +292,7 @@", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "                     self.environment = None", "-                elif (stripped[1] == '@'):", "+                elif (stripped[1] <= '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))", "                 else:", "                     newExcludedSet.add(stripped[1:])"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "55": {"result-type": "normal", "occurrence": 7, "result-data": [{"occurrence": 7, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -165,7 +165,7 @@", " ", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "-        if (self.include == constants.GROUP_REQUIRED):", "+        if (self.include <= constants.GROUP_REQUIRED):", "             return ('@%s --nodefaults' % self.name)", "         elif (self.include == constants.GROUP_ALL):", "             return ('@%s --optional' % self.name)"]]], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_LtE", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "130": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -176,7 +176,7 @@", "         return (self.name < other.name)", " ", "     def __le__(self, other):", "-        return (self.name <= other.name)", "+        return (self.name is other.name)", " ", "     def __eq__(self, other):", "         return (self.name == other.name)"]]], "op-name": "replace_LtE_with_Is", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_LtE_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "543": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -182,7 +182,7 @@", "         return (self.name == other.name)", " ", "     def __ne__(self, other):", "-        return (self.name != other.name)", "+        return (self.name not in other.name)", " ", "     def __gt__(self, other):", "         return (self.name > other.name)"]]], "op-name": "replace_NotEq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "134": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -248,7 +248,7 @@", "             retval += ' --nocore'", "         if (self.handleMissing == constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "-        if (self.instLangs is not None):", "+        if (self.instLangs not in None):", "             retval += (' --instLangs=%s' % self.instLangs)", "         if self.multiLib:", "             retval += ' --multilib'"]]], "op-name": "replace_IsNot_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "321": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -28,7 +28,7 @@", "             l = next(lineIter)", "         except StopIteration:", "             break", "-        if (l == ''):", "+        if (l < ''):", "             break", "         lineno += 1", "         ksurl = None"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "439": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -136,7 +136,7 @@", "             retval += '\\n%pre-install'", "         elif (self.type == constants.KS_SCRIPT_ONERROR):", "             retval += '\\n%onerror'", "-        if ((self.interp != '/bin/sh') and (self.interp != '')):", "+        if ((self.interp in '/bin/sh') and (self.interp != '')):", "             retval += (' --interpreter=%s' % self.interp)", "         if ((self.type == constants.KS_SCRIPT_POST) and (not self.inChroot)):", "             retval += ' --nochroot'"]]], "op-name": "replace_NotEq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "307": {"result-type": "normal", "occurrence": 32, "result-data": [{"occurrence": 32, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -455,7 +455,7 @@", "             if (self._state == STATE_COMMANDS):", "                 if (args[0] == '%ksappend'):", "                     continue", "-                elif (args[0][0] == '%'):", "+                elif (args[0][0] not in '%'):", "                     newSection = args[0]", "                     if (not self._validState(newSection)):", "                         if self.unknownSectionIsFatal:"]]], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_NotIn", "32", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "35": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -173,7 +173,7 @@", "             return ('@%s' % self.name)", " ", "     def __lt__(self, other):", "-        return (self.name < other.name)", "+        return (self.name is not other.name)", " ", "     def __le__(self, other):", "         return (self.name <= other.name)"]]], "op-name": "replace_Lt_with_IsNot", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Lt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "344": {"result-type": "normal", "occurrence": 23, "result-data": [{"occurrence": 23, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -387,7 +387,7 @@", "                     self._finalize(obj)", "                     break", "                 elif (args and (args[0] == '%include')):", "-                    if ((len(args) == 1) or (not args[1])):", "+                    if ((len(args) < 1) or (not args[1])):", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "23", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "574": {"result-type": "normal", "occurrence": 24, "result-data": [{"occurrence": 24, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -391,7 +391,7 @@", "                         raise KickstartParseError(formatErrorMsg(lineno))", "                     self._handleInclude(args[1])", "                     continue", "-                elif (args and (args[0] == '%ksappend')):", "+                elif (args and (args[0] >= '%ksappend')):", "                     continue", "                 elif (args and self._validState(args[0])):", "                     if (self.version >= version.F8):"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "24", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "15": {"result-type": "normal", "occurrence": 6, "result-data": [{"occurrence": 6, "line_number": 346, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -199,7 +199,7 @@", "         'Create a new Packages instance.  Instance attributes:\\n\\n           addBase       -- Should the Base group be installed even if it is\\n                            not specified?\\n           nocore        -- Should the Core group be skipped?  This results in\\n                            a %packages section that basically only installs the\\n                            packages you list, and may not be a usable system.\\n           default       -- Should the default package set be selected?\\n           environment   -- What base environment should be selected?  Only one\\n                            may be chosen at a time.\\n           excludedList  -- A list of all the packages marked for exclusion in\\n                            the %packages section, without the leading minus\\n                            symbol.\\n           excludeDocs   -- Should documentation in each package be excluded?\\n           groupList     -- A list of Group objects representing all the groups\\n                            specified in the %packages section.  Names will be\\n                            stripped of the leading @ symbol.\\n           excludedGroupList -- A list of Group objects representing all the\\n                                groups specified for removal in the %packages\\n                                section.  Names will be stripped of the leading\\n                                -@ symbols.\\n           handleMissing -- If unknown packages are specified in the %packages\\n                            section, should it be ignored or not?  Values can\\n                            be KS_MISSING_* from pykickstart.constants.\\n           packageList   -- A list of all the packages specified in the\\n                            %packages section.\\n           instLangs     -- A list of languages to install.\\n           multiLib      -- Whether to use yum\\'s \"all\" multilib policy.\\n           excludeWeakdeps -- Whether to exclude weak dependencies.\\n           seen          -- If %packages was ever used in the kickstart file,\\n                            this attribute will be set to True.\\n\\n        '", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.addBase = True", "-        self.nocore = False", "+        self.nocore = True", "         self.default = False", "         self.environment = None", "         self.excludedList = []"]]], "op-name": "boolean_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "boolean_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "143": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -254,7 +254,7 @@", "             retval += ' --multilib'", "         if self.excludeWeakdeps:", "             retval += ' --excludeWeakdeps'", "-        if (self._ver >= version.F8):", "+        if (self._ver in version.F8):", "             return (((retval + '\\n') + pkgs) + '\\n%end\\n')", "         else:", "             return (((retval + '\\n') + pkgs) + '\\n')"]]], "op-name": "replace_GtE_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "365": {"result-type": "normal", "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -299,7 +299,7 @@", "             else:", "                 newPackageSet.add(stripped)", "         excludedGroupNames = [g.name for g in excludedGroupList]", "-        self.groupList = [g for g in self.groupList if (g.name not in excludedGroupNames)]", "+        self.groupList = [g for g in self.groupList if (g.name in excludedGroupNames)]", "         self.excludedGroupList.extend(excludedGroupList)", "         existingPackageSet = ((existingPackageSet - newExcludedSet) | newPackageSet)", "         existingExcludedSet = ((existingExcludedSet - existingPackageSet) | newExcludedSet)"]]], "op-name": "replace_NotIn_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_NotIn_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "270": {"result-type": "normal", "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -254,7 +254,7 @@", "             retval += ' --multilib'", "         if self.excludeWeakdeps:", "             retval += ' --excludeWeakdeps'", "-        if (self._ver >= version.F8):", "+        if (self._ver not in version.F8):", "             return (((retval + '\\n') + pkgs) + '\\n%end\\n')", "         else:", "             return (((retval + '\\n') + pkgs) + '\\n')"]]], "op-name": "replace_GtE_with_NotIn", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "429": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -248,7 +248,7 @@", "             retval += ' --nocore'", "         if (self.handleMissing == constants.KS_MISSING_IGNORE):", "             retval += ' --ignoremissing'", "-        if (self.instLangs is not None):", "+        if (self.instLangs == None):", "             retval += (' --instLangs=%s' % self.instLangs)", "         if self.multiLib:", "             retval += ' --multilib'"]]], "op-name": "replace_IsNot_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_IsNot_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "266": {"result-type": "normal", "occurrence": 51, "result-data": [{"occurrence": 51, "line_number": 801, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -498,7 +498,7 @@", "         try:", "             s = load_to_str(f)", "         except KickstartError as e:", "-            raise KickstartError(formatErrorMsg(0, msg=(_('Unable to open input kickstart file: %s') % str(e))))", "+            raise KickstartError(formatErrorMsg(1, msg=(_('Unable to open input kickstart file: %s') % str(e))))", "         self.readKickstartFromString(s, reset=False)", " ", "     def setupSections(self):"]]], "op-name": "number_replacer", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "number_replacer", "51", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "563": {"result-type": "normal", "occurrence": 13, "result-data": [{"occurrence": 13, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -287,7 +287,7 @@", "             stripped = pkg.strip()", "             if (stripped[0:2] == '@^'):", "                 self.environment = stripped[2:]", "-            elif (stripped[0] == '@'):", "+            elif (stripped[0] >= '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "                 if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "104": {"result-type": "normal", "occurrence": 16, "result-data": [{"occurrence": 16, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -290,7 +290,7 @@", "             elif (stripped[0] == '@'):", "                 self._processGroup(stripped[1:])", "             elif (stripped[0] == '-'):", "-                if ((stripped[1:3] == '@^') and (self.environment == stripped[3:])):", "+                if ((stripped[1:3] == '@^') and (self.environment in stripped[3:])):", "                     self.environment = None", "                 elif (stripped[1] == '@'):", "                     excludedGroupList.append(Group(name=stripped[2:]))"]]], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_In", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "331": {"result-type": "normal", "occurrence": 10, "result-data": [{"occurrence": 10, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -235,7 +235,7 @@", "             p.sort()", "             for pkg in p:", "                 pkgs += ('-%s\\n' % pkg)", "-            if ((pkgs == '') and (not self.seen)):", "+            if ((pkgs < '') and (not self.seen)):", "                 return ''", "         retval = '\\n%packages'", "         if self.default:"]]], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_Lt", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "207": {"result-type": "normal", "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -149,7 +149,7 @@", "                 return (retval + ('\\n%s%%end\\n' % self.script))", "             else:", "                 return (retval + ('\\n%s' % self.script))", "-        elif (self._ver >= version.F8):", "+        elif (self._ver == version.F8):", "             return (retval + ('\\n%s\\n%%end\\n' % self.script))", "         else:", "             return (retval + ('\\n%s\\n' % self.script))"]]], "op-name": "replace_GtE_with_Eq", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_GtE_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}, "552": {"result-type": "normal", "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/parser.py", "@@ -128,7 +128,7 @@", "         retval = ''", "         if (self.type == constants.KS_SCRIPT_PRE):", "             retval += '\\n%pre'", "-        elif (self.type == constants.KS_SCRIPT_POST):", "+        elif (self.type >= constants.KS_SCRIPT_POST):", "             retval += '\\n%post'", "         elif (self.type == constants.KS_SCRIPT_TRACEBACK):", "             retval += '\\n%traceback'"]]], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.parser", "command": ["cosmic-ray", "worker", "pykickstart.parser", "replace_Eq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"]}}, "work-parameters": {"1": {"test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/parser.py"], "test-runner": "nose", "timeout": 2.81136}}, "_default": {}}