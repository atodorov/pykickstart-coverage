{"work-parameters": {"1": {"timeout": 4.7303299999999995, "test-runner": "nose", "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"]}}, "work-items": {"1": {"module-name": "pykickstart.base", "op-name": "replace_Gt_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": 4.7303299999999995, "result-type": "timeout"}, "268": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_NotEq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -214,7 +214,7 @@", "             self.commands[cmd].seen = True", "             obj = self.commands[cmd].parse(args[1:])", "             lst = self.commands[cmd].dataList()", "-            if (isinstance(obj, BaseData) and (lst is not None)):", "+            if (isinstance(obj, BaseData) and (lst != None)):", "                 lst.append(obj)", "             return obj", " "]]], "result-type": "normal"}, "221": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping is not {}) or (mapping is None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "86": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -69,7 +69,7 @@", "     def set_to_obj(self, namespace, obj):", "         \"Sets the contents of the namespace object (an instance of argparse.Namespace\\n           returned by parse_arguments) as attributes on the provided object obj.  It's\\n           useful to call this from KickstartCommand subclasses that handle lists\\n           of objects (like partitions, network devices, etc.) and need to populate\\n           a Data object.\\n        \"", "         for (key, val) in vars(namespace).items():", "-            if (val is not None):", "+            if (val is None):", "                 setattr(obj, key, val)", " ", "     def _setToObj(self, namespace, obj):"]]], "result-type": "normal"}, "48": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGtE", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 366, in _registerCommands\nTypeError: unorderable types: NoneType() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping == {}) or (mapping >= None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "255": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": 4.7303299999999995, "result-type": "timeout"}, "204": {"module-name": "pykickstart.base", "op-name": "replace_In_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 30, in runTest\n    self.handler.autopart(autopart=True, encrypted=True, passphrase=\"something\")\n  File \"pykickstart.base\", line 114, in __call__\nTypeError: unorderable types: str() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -31,7 +31,7 @@", "         'Set multiple attributes on a subclass of KickstartCommand at once\\n           via keyword arguments.  Valid attributes are anything specified in\\n           a subclass, but unknown attributes will be ignored.\\n        '", "         self.seen = True", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key <= self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "210": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_NotEq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotEq", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 384, in _registerCommands\nAttributeError: 'NoneType' object has no attribute 'items'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping == {}) or (mapping != None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "71": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithGt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 765, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 214, in handle\n    callable_obj(*args, **kwargs)\n  File \"pykickstart.base\", line 442, in dispatcher\nTypeError: unorderable types: str() > dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -205,7 +205,7 @@", "     def dispatcher(self, args, lineno):", "         'Call the appropriate KickstartCommand handler for the current line\\n           in the kickstart file.  A handler for the current command should\\n           be registered, though a handler of None is not an error.  Returns\\n           the data object returned by KickstartCommand.parse.\\n\\n           args    -- A list of arguments to the current command\\n           lineno  -- The line number in the file, for error reporting\\n        '", "         cmd = args[0]", "-        if (cmd not in self.commands):", "+        if (cmd > self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "         elif (self.commands[cmd] is not None):", "             self.commands[cmd].currentCmd = cmd"]]], "result-type": "normal"}, "109": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_In", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 5, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIn", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 399, in _registerCommands\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -185,7 +185,7 @@", "                 if (val.__class__.__name__ == cmdClass.__name__):", "                     cmdObj = val", "                     break", "-            if (cmdObj is None):", "+            if (cmdObj in None):", "                 cmdObj = cmdClass()", "                 self._setCommand(cmdObj)", "             self.commands[cmdName] = cmdObj"]]], "result-type": "normal"}, "155": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -214,7 +214,7 @@", "             self.commands[cmd].seen = True", "             obj = self.commands[cmd].parse(args[1:])", "             lst = self.commands[cmd].dataList()", "-            if (isinstance(obj, BaseData) and (lst is not None)):", "+            if (isinstance(obj, BaseData) and (lst >= None)):", "                 lst.append(obj)", "             return obj", " "]]], "result-type": "normal"}, "8": {"module-name": "pykickstart.base", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": 168, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -63,7 +63,7 @@", "         self.set_to_obj(namespace, self)", " ", "     def _setToSelf(self, namespace):", "-        warnings.warn('_setToSelf has been renamed to set_to_self.  The old name will be removed in a future release.', PendingDeprecationWarning, stacklevel=2)", "+        warnings.warn('_setToSelf has been renamed to set_to_self.  The old name will be removed in a future release.', PendingDeprecationWarning, stacklevel=3)", "         self.set_to_self(namespace)", " ", "     def set_to_obj(self, namespace, obj):"]]], "result-type": "normal"}, "233": {"module-name": "pykickstart.base", "op-name": "replace_In_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 34, in runTest\n    self.assertTrue(self.handler.autopart.autopart)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -31,7 +31,7 @@", "         'Set multiple attributes on a subclass of KickstartCommand at once\\n           via keyword arguments.  Valid attributes are anything specified in\\n           a subclass, but unknown attributes will be ignored.\\n        '", "         self.seen = True", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key is not self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "141": {"module-name": "pykickstart.base", "op-name": "replace_In_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 34, in runTest\n    self.assertTrue(self.handler.autopart.autopart)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -31,7 +31,7 @@", "         'Set multiple attributes on a subclass of KickstartCommand at once\\n           via keyword arguments.  Valid attributes are anything specified in\\n           a subclass, but unknown attributes will be ignored.\\n        '", "         self.seen = True", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key not in self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "151": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -182,7 +182,7 @@", "         for (cmdName, cmdClass) in list(cMap.items()):", "             cmdObj = None", "             for (_key, val) in list(self.commands.items()):", "-                if (val.__class__.__name__ == cmdClass.__name__):", "+                if (val.__class__.__name__ is cmdClass.__name__):", "                     cmdObj = val", "                     break", "             if (cmdObj is None):"]]], "result-type": "normal"}, "112": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": 4.7303299999999995, "result-type": "timeout"}, "220": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": 4.7303299999999995, "result-type": "timeout"}, "251": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 40, in runTest\n    self.handler.resetCommand(\"autopart\")\n  File \"pykickstart.base\", line 422, in resetCommand\nKeyError\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -195,7 +195,7 @@", " ", "     def resetCommand(self, cmdName):", "         \"Given the name of a command that's already been instantiated, create\\n           a new instance of it that will take the place of the existing\\n           instance.  This is equivalent to quickly blanking out all the\\n           attributes that were previously set.\\n\\n           This method raises a KeyError if cmdName is invalid.\\n        \"", "-        if (cmdName not in self.commands):", "+        if (cmdName in self.commands):", "             raise KeyError", "         cmdObj = self.commands[cmdName].__class__()", "         self._setCommand(cmdObj)"]]], "result-type": "normal"}, "92": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": 4.7303299999999995, "result-type": "timeout"}, "9": {"module-name": "pykickstart.base", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": 184, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -73,7 +73,7 @@", "                 setattr(obj, key, val)", " ", "     def _setToObj(self, namespace, obj):", "-        warnings.warn('_setToObj has been renamed to set_to_obj.  The old name will be removed in a future release.', PendingDeprecationWarning, stacklevel=2)", "+        warnings.warn('_setToObj has been renamed to set_to_obj.  The old name will be removed in a future release.', PendingDeprecationWarning, stacklevel=3)", "         self.set_to_obj(namespace, obj)", " ", " class DeprecatedCommand(KickstartCommand):"]]], "result-type": "normal"}, "265": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -69,7 +69,7 @@", "     def set_to_obj(self, namespace, obj):", "         \"Sets the contents of the namespace object (an instance of argparse.Namespace\\n           returned by parse_arguments) as attributes on the provided object obj.  It's\\n           useful to call this from KickstartCommand subclasses that handle lists\\n           of objects (like partitions, network devices, etc.) and need to populate\\n           a Data object.\\n        \"", "         for (key, val) in vars(namespace).items():", "-            if (val is not None):", "+            if (val != None):", "                 setattr(obj, key, val)", " ", "     def _setToObj(self, namespace, obj):"]]], "result-type": "normal"}, "202": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Gt", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 6, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGt", "occurrence": 6}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -236,7 +236,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         'Create a new BaseData instance.\\n\\n           lineno -- Line number in the ks-file where this object was defined\\n        '", "-        if (self.__class__ is BaseData):", "+        if (self.__class__ > BaseData):", "             raise TypeError('BaseData is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.lineno = 0"]]], "result-type": "normal"}, "243": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -69,7 +69,7 @@", "     def set_to_obj(self, namespace, obj):", "         \"Sets the contents of the namespace object (an instance of argparse.Namespace\\n           returned by parse_arguments) as attributes on the provided object obj.  It's\\n           useful to call this from KickstartCommand subclasses that handle lists\\n           of objects (like partitions, network devices, etc.) and need to populate\\n           a Data object.\\n        \"", "         for (key, val) in vars(namespace).items():", "-            if (val is not None):", "+            if (val < None):", "                 setattr(obj, key, val)", " ", "     def _setToObj(self, namespace, obj):"]]], "result-type": "normal"}, "73": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -138,7 +138,7 @@", "         while (i < length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "                 i += 1", "-            elif (obj.__class__.__name__ == lst[i].__class__.__name__):", "+            elif (obj.__class__.__name__ >= lst[i].__class__.__name__):", "                 lst[i] = obj", "                 return", "             elif (obj.__class__.__name__ < lst[i].__class__.__name__):"]]], "result-type": "normal"}, "149": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping is {}) or (mapping is None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "171": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -214,7 +214,7 @@", "             self.commands[cmd].seen = True", "             obj = self.commands[cmd].parse(args[1:])", "             lst = self.commands[cmd].dataList()", "-            if (isinstance(obj, BaseData) and (lst is not None)):", "+            if (isinstance(obj, BaseData) and (lst in None)):", "                 lst.append(obj)", "             return obj", " "]]], "result-type": "normal"}, "247": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -69,7 +69,7 @@", "     def set_to_obj(self, namespace, obj):", "         \"Sets the contents of the namespace object (an instance of argparse.Namespace\\n           returned by parse_arguments) as attributes on the provided object obj.  It's\\n           useful to call this from KickstartCommand subclasses that handle lists\\n           of objects (like partitions, network devices, etc.) and need to populate\\n           a Data object.\\n        \"", "         for (key, val) in vars(namespace).items():", "-            if (val is not None):", "+            if (val not in None):", "                 setattr(obj, key, val)", " ", "     def _setToObj(self, namespace, obj):"]]], "result-type": "normal"}, "163": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotIn", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 269, in __init__\nTypeError: argument of type 'type' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -99,7 +99,7 @@", " ", "     def __init__(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None, *args, **kwargs):", "         'Create a new BaseHandler instance.  This method must be provided by\\n           all subclasses, but subclasses must call BaseHandler.__init__ first.\\n\\n           mapping          -- A custom map from command strings to classes,\\n                               useful when creating your own handler with\\n                               special command objects.  It is otherwise unused\\n                               and rarely needed.  If you give this argument,\\n                               the mapping takes the place of the default one\\n                               and so must include all commands you want\\n                               recognized.\\n           dataMapping      -- This is the same as mapping, but for data\\n                               objects.  All the same comments apply.\\n           commandUpdates   -- This is similar to mapping, but does not take\\n                               the place of the defaults entirely.  Instead,\\n                               this mapping is applied after the defaults and\\n                               updates it with just the commands you want to\\n                               modify.\\n           dataUpdates      -- This is the same as commandUpdates, but for\\n                               data objects.\\n\\n\\n           Instance attributes:\\n\\n           commands -- A mapping from a string command to a KickstartCommand\\n                       subclass object that handles it.  Multiple strings can\\n                       map to the same object, but only one instance of the\\n                       command object should ever exist.  Most users should\\n                       never have to deal with this directly, as it is\\n                       manipulated internally and called through dispatcher.\\n           currentLine -- The current unprocessed line from the input file\\n                          that caused this handler to be run.\\n           packages -- An instance of pykickstart.parser.Packages which\\n                       describes the packages section of the input file.\\n           platform -- A string describing the hardware platform, which is\\n                       needed only by system-config-kickstart.\\n           scripts  -- A list of pykickstart.parser.Script instances, which is\\n                       populated by KickstartParser.addScript and describes the\\n                       %pre/%pre-install/%post/%traceback script section of the\\n                       input file.\\n        '", "-        if (self.__class__ is BaseHandler):", "+        if (self.__class__ not in BaseHandler):", "             raise TypeError('BaseHandler is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.scripts = []"]]], "result-type": "normal"}, "188": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py\", line 35, in __init__\n    KickstartCommand.__init__(self, *args, **kwargs)\n  File \"pykickstart.base\", line 83, in __init__\nTypeError: unorderable types: type() <= type()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -15,7 +15,7 @@", " ", "     def __init__(self, writePriority=0, *args, **kwargs):", "         \"Create a new KickstartCommand instance.  This method must be\\n           provided by all subclasses, but subclasses must call\\n           KickstartCommand.__init__ first.  Instance attributes:\\n\\n           currentCmd    -- The name of the command in the input file that\\n                            caused this handler to be run.\\n           currentLine   -- The current unprocessed line from the input file\\n                            that caused this handler to be run.\\n           handler       -- A reference to the BaseHandler subclass this\\n                            command is contained withing.  This is needed to\\n                            allow referencing of Data objects.\\n           lineno        -- The current line number in the input file.\\n           seen          -- If this command was ever used in the kickstart file,\\n                            this attribute will be set to True.  This allows\\n                            for differentiating commands that were omitted\\n                            from those that default to unset.\\n           writePriority -- An integer specifying when this command should be\\n                            printed when iterating over all commands' __str__\\n                            methods.  The higher the number, the later this\\n                            command will be written.  All commands with the\\n                            same priority will be written alphabetically.\\n        \"", "-        if (self.__class__ is KickstartCommand):", "+        if (self.__class__ <= KickstartCommand):", "             raise TypeError('KickstartCommand is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.writePriority = writePriority"]]], "result-type": "normal"}, "178": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -69,7 +69,7 @@", "     def set_to_obj(self, namespace, obj):", "         \"Sets the contents of the namespace object (an instance of argparse.Namespace\\n           returned by parse_arguments) as attributes on the provided object obj.  It's\\n           useful to call this from KickstartCommand subclasses that handle lists\\n           of objects (like partitions, network devices, etc.) and need to populate\\n           a Data object.\\n        \"", "         for (key, val) in vars(namespace).items():", "-            if (val is not None):", "+            if (val <= None):", "                 setattr(obj, key, val)", " ", "     def _setToObj(self, namespace, obj):"]]], "result-type": "normal"}, "34": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIs", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 765, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 214, in handle\n    callable_obj(*args, **kwargs)\n  File \"pykickstart.base\", line 444, in dispatcher\nKeyError: 'fakecommand'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -205,7 +205,7 @@", "     def dispatcher(self, args, lineno):", "         'Call the appropriate KickstartCommand handler for the current line\\n           in the kickstart file.  A handler for the current command should\\n           be registered, though a handler of None is not an error.  Returns\\n           the data object returned by KickstartCommand.parse.\\n\\n           args    -- A list of arguments to the current command\\n           lineno  -- The line number in the file, for error reporting\\n        '", "         cmd = args[0]", "-        if (cmd not in self.commands):", "+        if (cmd is self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "         elif (self.commands[cmd] is not None):", "             self.commands[cmd].currentCmd = cmd"]]], "result-type": "normal"}, "245": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 72, in runTest\n    self.handler.dispatcher([\"autopart\", \"--encrypted\", \"--passphrase\", \"something\"], 1)\n  File \"pykickstart.base\", line 444, in dispatcher\nTypeError: unorderable types: NoneType() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -207,7 +207,7 @@", "         cmd = args[0]", "         if (cmd not in self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "-        elif (self.commands[cmd] is not None):", "+        elif (self.commands[cmd] < None):", "             self.commands[cmd].currentCmd = cmd", "             self.commands[cmd].currentLine = self.currentLine", "             self.commands[cmd].lineno = lineno"]]], "result-type": "normal"}, "212": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_NotEq", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 5, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotEq", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 405, in _registerCommands\nAttributeError: 'NoneType' object has no attribute 'handler'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -185,7 +185,7 @@", "                 if (val.__class__.__name__ == cmdClass.__name__):", "                     cmdObj = val", "                     break", "-            if (cmdObj is None):", "+            if (cmdObj != None):", "                 cmdObj = cmdClass()", "                 self._setCommand(cmdObj)", "             self.commands[cmdName] = cmdObj"]]], "result-type": "normal"}, "17": {"module-name": "pykickstart.base", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "number_replacer", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 11, "result-data": [{"line_number": 498, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 11}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -239,7 +239,7 @@", "         if (self.__class__ is BaseData):", "             raise TypeError('BaseData is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "-        self.lineno = 0", "+        self.lineno = 1", " ", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'"]]], "result-type": "normal"}, "56": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Lt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 4, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLt", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 372, in _registerCommands\nTypeError: unorderable types: NoneType() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping == {}) or (dataMapping < None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "126": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Eq", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 6, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithEq", "occurrence": 6}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -236,7 +236,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         'Create a new BaseData instance.\\n\\n           lineno -- Line number in the ks-file where this object was defined\\n        '", "-        if (self.__class__ is BaseData):", "+        if (self.__class__ == BaseData):", "             raise TypeError('BaseData is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.lineno = 0"]]], "result-type": "normal"}, "111": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithIs", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -135,7 +135,7 @@", "     def _insertSorted(self, lst, obj):", "         length = len(lst)", "         i = 0", "-        while (i < length):", "+        while (i is length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "                 i += 1", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):"]]], "result-type": "normal"}, "160": {"module-name": "pykickstart.base", "op-name": "replace_Gt_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -136,7 +136,7 @@", "         length = len(lst)", "         i = 0", "         while (i < length):", "-            if (obj.__class__.__name__ > lst[i].__class__.__name__):", "+            if (obj.__class__.__name__ not in lst[i].__class__.__name__):", "                 i += 1", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):", "                 lst[i] = obj"]]], "result-type": "normal"}, "12": {"module-name": "pykickstart.base", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "number_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 6, "result-data": [{"line_number": 346, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 6}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -149,7 +149,7 @@", "             lst.insert(i, obj)", " ", "     def _setCommand(self, cmdObj):", "-        if (cmdObj.__class__.__name__.find('_') != (- 1)):", "+        if (cmdObj.__class__.__name__.find('_') != (- 2)):", "             name = cmdObj.__class__.__name__.split('_', 1)[1]", "             if (not six.PY3):", "                 name = unicode(name)"]]], "result-type": "normal"}, "27": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 73, in runTest\n    self.assertFalse(self.handler.autopart.encrypted)\nAttributeError: 'F25Handler' object has no attribute 'autopart'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -182,7 +182,7 @@", "         for (cmdName, cmdClass) in list(cMap.items()):", "             cmdObj = None", "             for (_key, val) in list(self.commands.items()):", "-                if (val.__class__.__name__ == cmdClass.__name__):", "+                if (val.__class__.__name__ < cmdClass.__name__):", "                     cmdObj = val", "                     break", "             if (cmdObj is None):"]]], "result-type": "normal"}, "83": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithGtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 23, in runTest\n    self.assertRaises(KeyError, self.handler.resetCommand, \"fakecommand\")\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 765, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 214, in handle\n    callable_obj(*args, **kwargs)\n  File \"pykickstart.base\", line 421, in resetCommand\nTypeError: unorderable types: str() >= dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -195,7 +195,7 @@", " ", "     def resetCommand(self, cmdName):", "         \"Given the name of a command that's already been instantiated, create\\n           a new instance of it that will take the place of the existing\\n           instance.  This is equivalent to quickly blanking out all the\\n           attributes that were previously set.\\n\\n           This method raises a KeyError if cmdName is invalid.\\n        \"", "-        if (cmdName not in self.commands):", "+        if (cmdName >= self.commands):", "             raise KeyError", "         cmdObj = self.commands[cmdName].__class__()", "         self._setCommand(cmdObj)"]]], "result-type": "normal"}, "52": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/mediacheck.py\", line 29, in __init__\n    KickstartCommand.__init__(self, writePriority, *args, **kwargs)\n  File \"pykickstart.base\", line 83, in __init__\nTypeError: unorderable types: type() < type()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -15,7 +15,7 @@", " ", "     def __init__(self, writePriority=0, *args, **kwargs):", "         \"Create a new KickstartCommand instance.  This method must be\\n           provided by all subclasses, but subclasses must call\\n           KickstartCommand.__init__ first.  Instance attributes:\\n\\n           currentCmd    -- The name of the command in the input file that\\n                            caused this handler to be run.\\n           currentLine   -- The current unprocessed line from the input file\\n                            that caused this handler to be run.\\n           handler       -- A reference to the BaseHandler subclass this\\n                            command is contained withing.  This is needed to\\n                            allow referencing of Data objects.\\n           lineno        -- The current line number in the input file.\\n           seen          -- If this command was ever used in the kickstart file,\\n                            this attribute will be set to True.  This allows\\n                            for differentiating commands that were omitted\\n                            from those that default to unset.\\n           writePriority -- An integer specifying when this command should be\\n                            printed when iterating over all commands' __str__\\n                            methods.  The higher the number, the later this\\n                            command will be written.  All commands with the\\n                            same priority will be written alphabetically.\\n        \"", "-        if (self.__class__ is KickstartCommand):", "+        if (self.__class__ < KickstartCommand):", "             raise TypeError('KickstartCommand is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.writePriority = writePriority"]]], "result-type": "normal"}, "97": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIsNot", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 10, in runTest\n    self.assertRaises(TypeError, KickstartCommand, (100, ))\nAssertionError: TypeError not raised by KickstartCommand\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -15,7 +15,7 @@", " ", "     def __init__(self, writePriority=0, *args, **kwargs):", "         \"Create a new KickstartCommand instance.  This method must be\\n           provided by all subclasses, but subclasses must call\\n           KickstartCommand.__init__ first.  Instance attributes:\\n\\n           currentCmd    -- The name of the command in the input file that\\n                            caused this handler to be run.\\n           currentLine   -- The current unprocessed line from the input file\\n                            that caused this handler to be run.\\n           handler       -- A reference to the BaseHandler subclass this\\n                            command is contained withing.  This is needed to\\n                            allow referencing of Data objects.\\n           lineno        -- The current line number in the input file.\\n           seen          -- If this command was ever used in the kickstart file,\\n                            this attribute will be set to True.  This allows\\n                            for differentiating commands that were omitted\\n                            from those that default to unset.\\n           writePriority -- An integer specifying when this command should be\\n                            printed when iterating over all commands' __str__\\n                            methods.  The higher the number, the later this\\n                            command will be written.  All commands with the\\n                            same priority will be written alphabetically.\\n        \"", "-        if (self.__class__ is KickstartCommand):", "+        if (self.__class__ is not KickstartCommand):", "             raise TypeError('KickstartCommand is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.writePriority = writePriority"]]], "result-type": "normal"}, "98": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIsNot", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 11, in runTest\n    self.assertRaises(TypeError, DeprecatedCommand, (100, ))\nAssertionError: TypeError not raised by DeprecatedCommand\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -80,7 +80,7 @@", "     \"Specify that a command is deprecated and no longer has any function.\\n       Any command that is deprecated should be subclassed from this class,\\n       only specifying an __init__ method that calls the superclass's __init__.\\n       This is an abstract class.\\n    \"", " ", "     def __init__(self, writePriority=None, *args, **kwargs):", "-        if (self.__class__ is DeprecatedCommand):", "+        if (self.__class__ is not DeprecatedCommand):", "             raise TypeError('DeprecatedCommand is an abstract class.')", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", " "]]], "result-type": "normal"}, "32": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithEq", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 69, in runTest\n    self.assertIsNone(self.handler.commands[cmd])\nAssertionError: <pykickstart.commands.driverdisk.F14_DriverDisk object at 0x7f45a5403860> is not None\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -222,7 +222,7 @@", "         'Set all entries in the commands dict to None, except the ones in\\n           the lst.  All other commands will not be processed.\\n        '", "         self._writeOrder = {}", "         for (key, _val) in list(self.commands.items()):", "-            if (key not in lst):", "+            if (key == lst):", "                 self.commands[key] = None", " ", "     def hasCommand(self, cmd):"]]], "result-type": "normal"}, "172": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -138,7 +138,7 @@", "         while (i < length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "                 i += 1", "-            elif (obj.__class__.__name__ == lst[i].__class__.__name__):", "+            elif (obj.__class__.__name__ in lst[i].__class__.__name__):", "                 lst[i] = obj", "                 return", "             elif (obj.__class__.__name__ < lst[i].__class__.__name__):"]]], "result-type": "normal"}, "190": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 269, in __init__\nTypeError: unorderable types: type() <= type()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -99,7 +99,7 @@", " ", "     def __init__(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None, *args, **kwargs):", "         'Create a new BaseHandler instance.  This method must be provided by\\n           all subclasses, but subclasses must call BaseHandler.__init__ first.\\n\\n           mapping          -- A custom map from command strings to classes,\\n                               useful when creating your own handler with\\n                               special command objects.  It is otherwise unused\\n                               and rarely needed.  If you give this argument,\\n                               the mapping takes the place of the default one\\n                               and so must include all commands you want\\n                               recognized.\\n           dataMapping      -- This is the same as mapping, but for data\\n                               objects.  All the same comments apply.\\n           commandUpdates   -- This is similar to mapping, but does not take\\n                               the place of the defaults entirely.  Instead,\\n                               this mapping is applied after the defaults and\\n                               updates it with just the commands you want to\\n                               modify.\\n           dataUpdates      -- This is the same as commandUpdates, but for\\n                               data objects.\\n\\n\\n           Instance attributes:\\n\\n           commands -- A mapping from a string command to a KickstartCommand\\n                       subclass object that handles it.  Multiple strings can\\n                       map to the same object, but only one instance of the\\n                       command object should ever exist.  Most users should\\n                       never have to deal with this directly, as it is\\n                       manipulated internally and called through dispatcher.\\n           currentLine -- The current unprocessed line from the input file\\n                          that caused this handler to be run.\\n           packages -- An instance of pykickstart.parser.Packages which\\n                       describes the packages section of the input file.\\n           platform -- A string describing the hardware platform, which is\\n                       needed only by system-config-kickstart.\\n           scripts  -- A list of pykickstart.parser.Script instances, which is\\n                       populated by KickstartParser.addScript and describes the\\n                       %pre/%pre-install/%post/%traceback script section of the\\n                       input file.\\n        '", "-        if (self.__class__ is BaseHandler):", "+        if (self.__class__ <= BaseHandler):", "             raise TypeError('BaseHandler is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.scripts = []"]]], "result-type": "normal"}, "7": {"module-name": "pykickstart.base", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": 94, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -22,7 +22,7 @@", "         self.currentCmd = ''", "         self.currentLine = ''", "         self.handler = None", "-        self.lineno = 0", "+        self.lineno = 1", "         self.seen = False", "         for arg in (kw for kw in self.removedKeywords if (kw in kwargs)):", "             kwargs.pop(arg)"]]], "result-type": "normal"}, "66": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 366, in _registerCommands\nTypeError: unorderable types: NoneType() > dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping > {}) or (mapping is None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "252": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 765, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 214, in handle\n    callable_obj(*args, **kwargs)\n  File \"pykickstart.base\", line 444, in dispatcher\nKeyError: 'fakecommand'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -205,7 +205,7 @@", "     def dispatcher(self, args, lineno):", "         'Call the appropriate KickstartCommand handler for the current line\\n           in the kickstart file.  A handler for the current command should\\n           be registered, though a handler of None is not an error.  Returns\\n           the data object returned by KickstartCommand.parse.\\n\\n           args    -- A list of arguments to the current command\\n           lineno  -- The line number in the file, for error reporting\\n        '", "         cmd = args[0]", "-        if (cmd not in self.commands):", "+        if (cmd in self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "         elif (self.commands[cmd] is not None):", "             self.commands[cmd].currentCmd = cmd"]]], "result-type": "normal"}, "179": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 358, in _setCommand\nTypeError: unorderable types: int() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -158,7 +158,7 @@", "             if (not six.PY3):", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "-        if (cmdObj.writePriority is not None):", "+        if (cmdObj.writePriority <= None):", "             if (cmdObj.writePriority in self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:"]]], "result-type": "normal"}, "10": {"module-name": "pykickstart.base", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 4, "result-data": [{"line_number": 323, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -134,7 +134,7 @@", " ", "     def _insertSorted(self, lst, obj):", "         length = len(lst)", "-        i = 0", "+        i = 1", "         while (i < length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "                 i += 1"]]], "result-type": "normal"}, "239": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -24,7 +24,7 @@", "         self.handler = None", "         self.lineno = 0", "         self.seen = False", "-        for arg in (kw for kw in self.removedKeywords if (kw in kwargs)):", "+        for arg in (kw for kw in self.removedKeywords if (kw is kwargs)):", "             kwargs.pop(arg)", " ", "     def __call__(self, *args, **kwargs):"]]], "result-type": "normal"}, "161": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py\", line 391, in __init__\n    F20_AutoPart.__init__(self, writePriority=writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py\", line 339, in __init__\n    F18_AutoPart.__init__(self, writePriority=writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py\", line 313, in __init__\n    F17_AutoPart.__init__(self, writePriority=writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py\", line 254, in __init__\n    F16_AutoPart.__init__(self, writePriority=writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py\", line 224, in __init__\n    F12_AutoPart.__init__(self, writePriority=writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py\", line 115, in __init__\n    F9_AutoPart.__init__(self, writePriority=writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py\", line 68, in __init__\n    FC3_AutoPart.__init__(self, writePriority=writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py\", line 34, in __init__\n    KickstartCommand.__init__(self, writePriority, *args, **kwargs)\n  File \"pykickstart.base\", line 83, in __init__\nTypeError: argument of type 'type' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -15,7 +15,7 @@", " ", "     def __init__(self, writePriority=0, *args, **kwargs):", "         \"Create a new KickstartCommand instance.  This method must be\\n           provided by all subclasses, but subclasses must call\\n           KickstartCommand.__init__ first.  Instance attributes:\\n\\n           currentCmd    -- The name of the command in the input file that\\n                            caused this handler to be run.\\n           currentLine   -- The current unprocessed line from the input file\\n                            that caused this handler to be run.\\n           handler       -- A reference to the BaseHandler subclass this\\n                            command is contained withing.  This is needed to\\n                            allow referencing of Data objects.\\n           lineno        -- The current line number in the input file.\\n           seen          -- If this command was ever used in the kickstart file,\\n                            this attribute will be set to True.  This allows\\n                            for differentiating commands that were omitted\\n                            from those that default to unset.\\n           writePriority -- An integer specifying when this command should be\\n                            printed when iterating over all commands' __str__\\n                            methods.  The higher the number, the later this\\n                            command will be written.  All commands with the\\n                            same priority will be written alphabetically.\\n        \"", "-        if (self.__class__ is KickstartCommand):", "+        if (self.__class__ not in KickstartCommand):", "             raise TypeError('KickstartCommand is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.writePriority = writePriority"]]], "result-type": "normal"}, "47": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 269, in __init__\nTypeError: unorderable types: type() >= type()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -99,7 +99,7 @@", " ", "     def __init__(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None, *args, **kwargs):", "         'Create a new BaseHandler instance.  This method must be provided by\\n           all subclasses, but subclasses must call BaseHandler.__init__ first.\\n\\n           mapping          -- A custom map from command strings to classes,\\n                               useful when creating your own handler with\\n                               special command objects.  It is otherwise unused\\n                               and rarely needed.  If you give this argument,\\n                               the mapping takes the place of the default one\\n                               and so must include all commands you want\\n                               recognized.\\n           dataMapping      -- This is the same as mapping, but for data\\n                               objects.  All the same comments apply.\\n           commandUpdates   -- This is similar to mapping, but does not take\\n                               the place of the defaults entirely.  Instead,\\n                               this mapping is applied after the defaults and\\n                               updates it with just the commands you want to\\n                               modify.\\n           dataUpdates      -- This is the same as commandUpdates, but for\\n                               data objects.\\n\\n\\n           Instance attributes:\\n\\n           commands -- A mapping from a string command to a KickstartCommand\\n                       subclass object that handles it.  Multiple strings can\\n                       map to the same object, but only one instance of the\\n                       command object should ever exist.  Most users should\\n                       never have to deal with this directly, as it is\\n                       manipulated internally and called through dispatcher.\\n           currentLine -- The current unprocessed line from the input file\\n                          that caused this handler to be run.\\n           packages -- An instance of pykickstart.parser.Packages which\\n                       describes the packages section of the input file.\\n           platform -- A string describing the hardware platform, which is\\n                       needed only by system-config-kickstart.\\n           scripts  -- A list of pykickstart.parser.Script instances, which is\\n                       populated by KickstartParser.addScript and describes the\\n                       %pre/%pre-install/%post/%traceback script section of the\\n                       input file.\\n        '", "-        if (self.__class__ is BaseHandler):", "+        if (self.__class__ >= BaseHandler):", "             raise TypeError('BaseHandler is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.scripts = []"]]], "result-type": "normal"}, "133": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithLtE", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -141,7 +141,7 @@", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):", "                 lst[i] = obj", "                 return", "-            elif (obj.__class__.__name__ < lst[i].__class__.__name__):", "+            elif (obj.__class__.__name__ <= lst[i].__class__.__name__):", "                 break", "         if (i >= length):", "             lst.append(obj)"]]], "result-type": "normal"}, "259": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 346, in _setCommand\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -149,7 +149,7 @@", "             lst.insert(i, obj)", " ", "     def _setCommand(self, cmdObj):", "-        if (cmdObj.__class__.__name__.find('_') != (- 1)):", "+        if (cmdObj.__class__.__name__.find('_') not in (- 1)):", "             name = cmdObj.__class__.__name__.split('_', 1)[1]", "             if (not six.PY3):", "                 name = unicode(name)"]]], "result-type": "normal"}, "173": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping in {}) or (mapping is None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "193": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_LtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 5, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLtE", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 399, in _registerCommands\nTypeError: unorderable types: NoneType() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -185,7 +185,7 @@", "                 if (val.__class__.__name__ == cmdClass.__name__):", "                     cmdObj = val", "                     break", "-            if (cmdObj is None):", "+            if (cmdObj <= None):", "                 cmdObj = cmdClass()", "                 self._setCommand(cmdObj)", "             self.commands[cmdName] = cmdObj"]]], "result-type": "normal"}, "123": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Eq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithEq", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping == {}) or (mapping == None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "72": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithGt", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 64, in runTest\n    self.handler.maskAllExcept(lst)\n  File \"pykickstart.base\", line 472, in maskAllExcept\nTypeError: unorderable types: str() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -222,7 +222,7 @@", "         'Set all entries in the commands dict to None, except the ones in\\n           the lst.  All other commands will not be processed.\\n        '", "         self._writeOrder = {}", "         for (key, _val) in list(self.commands.items()):", "-            if (key not in lst):", "+            if (key > lst):", "                 self.commands[key] = None", " ", "     def hasCommand(self, cmd):"]]], "result-type": "normal"}, "186": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 18, in runTest\n    self.assertIn(\"#platform=x86_64\", str(self.handler))\nAssertionError: '#platform=x86_64' not found in '#version=DEVEL\\n\\n# System bootloader configuration\\nbootloader --location=none\\n'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -113,7 +113,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.platform != ''):", "+        if (self.platform in ''):", "             retval += ('#platform=%s\\n' % self.platform)", "         retval += ('#version=%s\\n' % versionToString(self.version))", "         lst = list(self._writeOrder.keys())"]]], "result-type": "normal"}, "77": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithNotEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 40, in runTest\n    self.handler.resetCommand(\"autopart\")\n  File \"pykickstart.base\", line 422, in resetCommand\nKeyError\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -195,7 +195,7 @@", " ", "     def resetCommand(self, cmdName):", "         \"Given the name of a command that's already been instantiated, create\\n           a new instance of it that will take the place of the existing\\n           instance.  This is equivalent to quickly blanking out all the\\n           attributes that were previously set.\\n\\n           This method raises a KeyError if cmdName is invalid.\\n        \"", "-        if (cmdName not in self.commands):", "+        if (cmdName != self.commands):", "             raise KeyError", "         cmdObj = self.commands[cmdName].__class__()", "         self._setCommand(cmdObj)"]]], "result-type": "normal"}, "144": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 428, in __init__\n    F19_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 403, in __init__\n    F18_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 309, in __init__\n    F17_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 276, in __init__\n    F15_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 234, in __init__\n    F14_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 185, in __init__\n    FC4_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 148, in __init__\n    FC3_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 33, in __init__\n    KickstartCommand.__init__(self, writePriority, *args, **kwargs)\n  File \"pykickstart.base\", line 101, in __init__\n  File \"pykickstart.base\", line 101, in <genexpr>\nTypeError: unorderable types: str() < dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -24,7 +24,7 @@", "         self.handler = None", "         self.lineno = 0", "         self.seen = False", "-        for arg in (kw for kw in self.removedKeywords if (kw in kwargs)):", "+        for arg in (kw for kw in self.removedKeywords if (kw < kwargs)):", "             kwargs.pop(arg)", " ", "     def __call__(self, *args, **kwargs):"]]], "result-type": "normal"}, "121": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithEq", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -80,7 +80,7 @@", "     \"Specify that a command is deprecated and no longer has any function.\\n       Any command that is deprecated should be subclassed from this class,\\n       only specifying an __init__ method that calls the superclass's __init__.\\n       This is an abstract class.\\n    \"", " ", "     def __init__(self, writePriority=None, *args, **kwargs):", "-        if (self.__class__ is DeprecatedCommand):", "+        if (self.__class__ == DeprecatedCommand):", "             raise TypeError('DeprecatedCommand is an abstract class.')", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", " "]]], "result-type": "normal"}, "158": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 359, in _setCommand\nTypeError: unorderable types: int() > dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -159,7 +159,7 @@", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "         if (cmdObj.writePriority is not None):", "-            if (cmdObj.writePriority in self._writeOrder):", "+            if (cmdObj.writePriority > self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]"]]], "result-type": "normal"}, "189": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py\", line 108, in __init__\n    DeprecatedCommand.__init__(self)\n  File \"pykickstart.base\", line 195, in __init__\nTypeError: unorderable types: type() <= type()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -80,7 +80,7 @@", "     \"Specify that a command is deprecated and no longer has any function.\\n       Any command that is deprecated should be subclassed from this class,\\n       only specifying an __init__ method that calls the superclass's __init__.\\n       This is an abstract class.\\n    \"", " ", "     def __init__(self, writePriority=None, *args, **kwargs):", "-        if (self.__class__ is DeprecatedCommand):", "+        if (self.__class__ <= DeprecatedCommand):", "             raise TypeError('DeprecatedCommand is an abstract class.')", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", " "]]], "result-type": "normal"}, "31": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithEq", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 765, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 214, in handle\n    callable_obj(*args, **kwargs)\n  File \"pykickstart.base\", line 444, in dispatcher\nKeyError: 'fakecommand'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -205,7 +205,7 @@", "     def dispatcher(self, args, lineno):", "         'Call the appropriate KickstartCommand handler for the current line\\n           in the kickstart file.  A handler for the current command should\\n           be registered, though a handler of None is not an error.  Returns\\n           the data object returned by KickstartCommand.parse.\\n\\n           args    -- A list of arguments to the current command\\n           lineno  -- The line number in the file, for error reporting\\n        '", "         cmd = args[0]", "-        if (cmd not in self.commands):", "+        if (cmd == self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "         elif (self.commands[cmd] is not None):", "             self.commands[cmd].currentCmd = cmd"]]], "result-type": "normal"}, "229": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 366, in _registerCommands\nTypeError: unorderable types: NoneType() <= dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping <= {}) or (mapping is None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "125": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Eq", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 5, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithEq", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -185,7 +185,7 @@", "                 if (val.__class__.__name__ == cmdClass.__name__):", "                     cmdObj = val", "                     break", "-            if (cmdObj is None):", "+            if (cmdObj == None):", "                 cmdObj = cmdClass()", "                 self._setCommand(cmdObj)", "             self.commands[cmdName] = cmdObj"]]], "result-type": "normal"}, "248": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 358, in _setCommand\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -158,7 +158,7 @@", "             if (not six.PY3):", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "-        if (cmdObj.writePriority is not None):", "+        if (cmdObj.writePriority not in None):", "             if (cmdObj.writePriority in self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:"]]], "result-type": "normal"}, "156": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/xconfig.py\", line 166, in __init__\n    F9_XConfig.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/xconfig.py\", line 111, in __init__\n    FC3_XConfig.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/xconfig.py\", line 29, in __init__\n    KickstartCommand.__init__(self, writePriority, *args, **kwargs)\n  File \"pykickstart.base\", line 101, in __init__\n  File \"pykickstart.base\", line 101, in <genexpr>\nTypeError: unorderable types: str() > dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -24,7 +24,7 @@", "         self.handler = None", "         self.lineno = 0", "         self.seen = False", "-        for arg in (kw for kw in self.removedKeywords if (kw in kwargs)):", "+        for arg in (kw for kw in self.removedKeywords if (kw > kwargs)):", "             kwargs.pop(arg)", " ", "     def __call__(self, *args, **kwargs):"]]], "result-type": "normal"}, "213": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_NotEq", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 6, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotEq", "occurrence": 6}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 13, in runTest\n    self.assertRaises(TypeError, BaseData, (100, ))\nAssertionError: TypeError not raised by BaseData\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -236,7 +236,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         'Create a new BaseData instance.\\n\\n           lineno -- Line number in the ks-file where this object was defined\\n        '", "-        if (self.__class__ is BaseData):", "+        if (self.__class__ != BaseData):", "             raise TypeError('BaseData is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.lineno = 0"]]], "result-type": "normal"}, "55": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLt", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 366, in _registerCommands\nTypeError: unorderable types: NoneType() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping == {}) or (mapping < None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "65": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": 4.7303299999999995, "result-type": "timeout"}, "197": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py\", line 108, in __init__\n    DeprecatedCommand.__init__(self)\n  File \"pykickstart.base\", line 195, in __init__\nTypeError: unorderable types: type() > type()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -80,7 +80,7 @@", "     \"Specify that a command is deprecated and no longer has any function.\\n       Any command that is deprecated should be subclassed from this class,\\n       only specifying an __init__ method that calls the superclass's __init__.\\n       This is an abstract class.\\n    \"", " ", "     def __init__(self, writePriority=None, *args, **kwargs):", "-        if (self.__class__ is DeprecatedCommand):", "+        if (self.__class__ > DeprecatedCommand):", "             raise TypeError('DeprecatedCommand is an abstract class.')", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", " "]]], "result-type": "normal"}, "113": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -113,7 +113,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.platform != ''):", "+        if (self.platform > ''):", "             retval += ('#platform=%s\\n' % self.platform)", "         retval += ('#version=%s\\n' % versionToString(self.version))", "         lst = list(self._writeOrder.keys())"]]], "result-type": "normal"}, "139": {"module-name": "pykickstart.base", "op-name": "replace_GtE_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_GtE_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -143,7 +143,7 @@", "                 return", "             elif (obj.__class__.__name__ < lst[i].__class__.__name__):", "                 break", "-        if (i >= length):", "+        if (i <= length):", "             lst.append(obj)", "         else:", "             lst.insert(i, obj)"]]], "result-type": "normal"}, "267": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -207,7 +207,7 @@", "         cmd = args[0]", "         if (cmd not in self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "-        elif (self.commands[cmd] is not None):", "+        elif (self.commands[cmd] != None):", "             self.commands[cmd].currentCmd = cmd", "             self.commands[cmd].currentLine = self.currentLine", "             self.commands[cmd].lineno = lineno"]]], "result-type": "normal"}, "129": {"module-name": "pykickstart.base", "op-name": "replace_Gt_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": 4.7303299999999995, "result-type": "timeout"}, "119": {"module-name": "pykickstart.base", "op-name": "replace_GtE_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_GtE_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -143,7 +143,7 @@", "                 return", "             elif (obj.__class__.__name__ < lst[i].__class__.__name__):", "                 break", "-        if (i >= length):", "+        if (i != length):", "             lst.append(obj)", "         else:", "             lst.insert(i, obj)"]]], "result-type": "normal"}, "35": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIs", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 69, in runTest\n    self.assertIsNone(self.handler.commands[cmd])\nAssertionError: <pykickstart.commands.realm.F19_Realm object at 0x7f4a001eeba8> is not None\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -222,7 +222,7 @@", "         'Set all entries in the commands dict to None, except the ones in\\n           the lst.  All other commands will not be processed.\\n        '", "         self._writeOrder = {}", "         for (key, _val) in list(self.commands.items()):", "-            if (key not in lst):", "+            if (key is lst):", "                 self.commands[key] = None", " ", "     def hasCommand(self, cmd):"]]], "result-type": "normal"}, "50": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_GtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 5, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGtE", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 399, in _registerCommands\nTypeError: unorderable types: NoneType() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -185,7 +185,7 @@", "                 if (val.__class__.__name__ == cmdClass.__name__):", "                     cmdObj = val", "                     break", "-            if (cmdObj is None):", "+            if (cmdObj >= None):", "                 cmdObj = cmdClass()", "                 self._setCommand(cmdObj)", "             self.commands[cmdName] = cmdObj"]]], "result-type": "normal"}, "75": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 372, in _registerCommands\nTypeError: unorderable types: NoneType() >= dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping >= {}) or (dataMapping is None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "88": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 72, in runTest\n    self.handler.dispatcher([\"autopart\", \"--encrypted\", \"--passphrase\", \"something\"], 1)\n  File \"pykickstart.base\", line 445, in dispatcher\nAttributeError: 'NoneType' object has no attribute 'currentCmd'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -207,7 +207,7 @@", "         cmd = args[0]", "         if (cmd not in self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "-        elif (self.commands[cmd] is not None):", "+        elif (self.commands[cmd] is None):", "             self.commands[cmd].currentCmd = cmd", "             self.commands[cmd].currentLine = self.currentLine", "             self.commands[cmd].lineno = lineno"]]], "result-type": "normal"}, "122": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithEq", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -99,7 +99,7 @@", " ", "     def __init__(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None, *args, **kwargs):", "         'Create a new BaseHandler instance.  This method must be provided by\\n           all subclasses, but subclasses must call BaseHandler.__init__ first.\\n\\n           mapping          -- A custom map from command strings to classes,\\n                               useful when creating your own handler with\\n                               special command objects.  It is otherwise unused\\n                               and rarely needed.  If you give this argument,\\n                               the mapping takes the place of the default one\\n                               and so must include all commands you want\\n                               recognized.\\n           dataMapping      -- This is the same as mapping, but for data\\n                               objects.  All the same comments apply.\\n           commandUpdates   -- This is similar to mapping, but does not take\\n                               the place of the defaults entirely.  Instead,\\n                               this mapping is applied after the defaults and\\n                               updates it with just the commands you want to\\n                               modify.\\n           dataUpdates      -- This is the same as commandUpdates, but for\\n                               data objects.\\n\\n\\n           Instance attributes:\\n\\n           commands -- A mapping from a string command to a KickstartCommand\\n                       subclass object that handles it.  Multiple strings can\\n                       map to the same object, but only one instance of the\\n                       command object should ever exist.  Most users should\\n                       never have to deal with this directly, as it is\\n                       manipulated internally and called through dispatcher.\\n           currentLine -- The current unprocessed line from the input file\\n                          that caused this handler to be run.\\n           packages -- An instance of pykickstart.parser.Packages which\\n                       describes the packages section of the input file.\\n           platform -- A string describing the hardware platform, which is\\n                       needed only by system-config-kickstart.\\n           scripts  -- A list of pykickstart.parser.Script instances, which is\\n                       populated by KickstartParser.addScript and describes the\\n                       %pre/%pre-install/%post/%traceback script section of the\\n                       input file.\\n        '", "-        if (self.__class__ is BaseHandler):", "+        if (self.__class__ == BaseHandler):", "             raise TypeError('BaseHandler is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.scripts = []"]]], "result-type": "normal"}, "44": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -214,7 +214,7 @@", "             self.commands[cmd].seen = True", "             obj = self.commands[cmd].parse(args[1:])", "             lst = self.commands[cmd].dataList()", "-            if (isinstance(obj, BaseData) and (lst is not None)):", "+            if (isinstance(obj, BaseData) and (lst > None)):", "                 lst.append(obj)", "             return obj", " "]]], "result-type": "normal"}, "24": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": 4.7303299999999995, "result-type": "timeout"}, "182": {"module-name": "pykickstart.base", "op-name": "replace_GtE_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_GtE_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 360, in _setCommand\n  File \"pykickstart.base\", line 337, in _insertSorted\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -143,7 +143,7 @@", "                 return", "             elif (obj.__class__.__name__ < lst[i].__class__.__name__):", "                 break", "-        if (i >= length):", "+        if (i in length):", "             lst.append(obj)", "         else:", "             lst.insert(i, obj)"]]], "result-type": "normal"}, "194": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_LtE", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 6, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLtE", "occurrence": 6}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -236,7 +236,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         'Create a new BaseData instance.\\n\\n           lineno -- Line number in the ks-file where this object was defined\\n        '", "-        if (self.__class__ is BaseData):", "+        if (self.__class__ <= BaseData):", "             raise TypeError('BaseData is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.lineno = 0"]]], "result-type": "normal"}, "28": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithGtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -135,7 +135,7 @@", "     def _insertSorted(self, lst, obj):", "         length = len(lst)", "         i = 0", "-        while (i < length):", "+        while (i >= length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "                 i += 1", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):"]]], "result-type": "normal"}, "41": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -69,7 +69,7 @@", "     def set_to_obj(self, namespace, obj):", "         \"Sets the contents of the namespace object (an instance of argparse.Namespace\\n           returned by parse_arguments) as attributes on the provided object obj.  It's\\n           useful to call this from KickstartCommand subclasses that handle lists\\n           of objects (like partitions, network devices, etc.) and need to populate\\n           a Data object.\\n        \"", "         for (key, val) in vars(namespace).items():", "-            if (val is not None):", "+            if (val > None):", "                 setattr(obj, key, val)", " ", "     def _setToObj(self, namespace, obj):"]]], "result-type": "normal"}, "262": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": 4.7303299999999995, "result-type": "timeout"}, "93": {"module-name": "pykickstart.base", "op-name": "replace_In_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/xconfig.py\", line 166, in __init__\n    F9_XConfig.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/xconfig.py\", line 111, in __init__\n    FC3_XConfig.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/xconfig.py\", line 29, in __init__\n    KickstartCommand.__init__(self, writePriority, *args, **kwargs)\n  File \"pykickstart.base\", line 101, in __init__\n  File \"pykickstart.base\", line 101, in <genexpr>\nTypeError: unorderable types: str() >= dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -24,7 +24,7 @@", "         self.handler = None", "         self.lineno = 0", "         self.seen = False", "-        for arg in (kw for kw in self.removedKeywords if (kw in kwargs)):", "+        for arg in (kw for kw in self.removedKeywords if (kw >= kwargs)):", "             kwargs.pop(arg)", " ", "     def __call__(self, *args, **kwargs):"]]], "result-type": "normal"}, "90": {"module-name": "pykickstart.base", "op-name": "replace_Gt_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": 4.7303299999999995, "result-type": "timeout"}, "236": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 23, in runTest\n    self.assertRaises(KeyError, self.handler.resetCommand, \"fakecommand\")\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 765, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 214, in handle\n    callable_obj(*args, **kwargs)\n  File \"pykickstart.base\", line 421, in resetCommand\nTypeError: unorderable types: str() < dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -195,7 +195,7 @@", " ", "     def resetCommand(self, cmdName):", "         \"Given the name of a command that's already been instantiated, create\\n           a new instance of it that will take the place of the existing\\n           instance.  This is equivalent to quickly blanking out all the\\n           attributes that were previously set.\\n\\n           This method raises a KeyError if cmdName is invalid.\\n        \"", "-        if (cmdName not in self.commands):", "+        if (cmdName < self.commands):", "             raise KeyError", "         cmdObj = self.commands[cmdName].__class__()", "         self._setCommand(cmdObj)"]]], "result-type": "normal"}, "214": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 18, in runTest\n    self.assertIn(\"#platform=x86_64\", str(self.handler))\nAssertionError: '#platform=x86_64' not found in '#version=DEVEL\\n\\n# System bootloader configuration\\nbootloader --location=none\\n'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -113,7 +113,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.platform != ''):", "+        if (self.platform <= ''):", "             retval += ('#platform=%s\\n' % self.platform)", "         retval += ('#version=%s\\n' % versionToString(self.version))", "         lst = list(self._writeOrder.keys())"]]], "result-type": "normal"}, "168": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -69,7 +69,7 @@", "     def set_to_obj(self, namespace, obj):", "         \"Sets the contents of the namespace object (an instance of argparse.Namespace\\n           returned by parse_arguments) as attributes on the provided object obj.  It's\\n           useful to call this from KickstartCommand subclasses that handle lists\\n           of objects (like partitions, network devices, etc.) and need to populate\\n           a Data object.\\n        \"", "         for (key, val) in vars(namespace).items():", "-            if (val is not None):", "+            if (val in None):", "                 setattr(obj, key, val)", " ", "     def _setToObj(self, namespace, obj):"]]], "result-type": "normal"}, "100": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_IsNot", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIsNot", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 384, in _registerCommands\nAttributeError: 'NoneType' object has no attribute 'items'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping == {}) or (mapping is not None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "150": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping is {}) or (dataMapping is None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "181": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -214,7 +214,7 @@", "             self.commands[cmd].seen = True", "             obj = self.commands[cmd].parse(args[1:])", "             lst = self.commands[cmd].dataList()", "-            if (isinstance(obj, BaseData) and (lst is not None)):", "+            if (isinstance(obj, BaseData) and (lst <= None)):", "                 lst.append(obj)", "             return obj", " "]]], "result-type": "normal"}, "107": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIn", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 366, in _registerCommands\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping == {}) or (mapping in None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "266": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -158,7 +158,7 @@", "             if (not six.PY3):", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "-        if (cmdObj.writePriority is not None):", "+        if (cmdObj.writePriority != None):", "             if (cmdObj.writePriority in self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:"]]], "result-type": "normal"}, "211": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_NotEq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 4, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotEq", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 410, in _registerCommands\nAttributeError: 'NoneType' object has no attribute 'items'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping == {}) or (dataMapping != None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "176": {"module-name": "pykickstart.base", "op-name": "break_continue_replacement", "command": ["cosmic-ray", "worker", "pykickstart.base", "break_continue_replacement", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": 4.7303299999999995, "result-type": "timeout"}, "37": {"module-name": "pykickstart.base", "op-name": "replace_In_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 34, in runTest\n    self.assertTrue(self.handler.autopart.autopart)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -31,7 +31,7 @@", "         'Set multiple attributes on a subclass of KickstartCommand at once\\n           via keyword arguments.  Valid attributes are anything specified in\\n           a subclass, but unknown attributes will be ignored.\\n        '", "         self.seen = True", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key != self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "43": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 72, in runTest\n    self.handler.dispatcher([\"autopart\", \"--encrypted\", \"--passphrase\", \"something\"], 1)\n  File \"pykickstart.base\", line 444, in dispatcher\nTypeError: unorderable types: NoneType() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -207,7 +207,7 @@", "         cmd = args[0]", "         if (cmd not in self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "-        elif (self.commands[cmd] is not None):", "+        elif (self.commands[cmd] > None):", "             self.commands[cmd].currentCmd = cmd", "             self.commands[cmd].currentLine = self.currentLine", "             self.commands[cmd].lineno = lineno"]]], "result-type": "normal"}, "261": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithGt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -135,7 +135,7 @@", "     def _insertSorted(self, lst, obj):", "         length = len(lst)", "         i = 0", "-        while (i < length):", "+        while (i > length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "                 i += 1", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):"]]], "result-type": "normal"}, "192": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_LtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 4, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLtE", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 372, in _registerCommands\nTypeError: unorderable types: NoneType() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping == {}) or (dataMapping <= None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "263": {"module-name": "pykickstart.base", "op-name": "arithmetic_operator_deletion", "command": ["cosmic-ray", "worker", "pykickstart.base", "arithmetic_operator_deletion", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": 346, "operator": "cosmic_ray.operators.arithmetic_operator_deletion.ReverseUnarySub", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -149,7 +149,7 @@", "             lst.insert(i, obj)", " ", "     def _setCommand(self, cmdObj):", "-        if (cmdObj.__class__.__name__.find('_') != (- 1)):", "+        if (cmdObj.__class__.__name__.find('_') != (+ 1)):", "             name = cmdObj.__class__.__name__.split('_', 1)[1]", "             if (not six.PY3):", "                 name = unicode(name)"]]], "result-type": "normal"}, "103": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_IsNot", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 6, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIsNot", "occurrence": 6}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 13, in runTest\n    self.assertRaises(TypeError, BaseData, (100, ))\nAssertionError: TypeError not raised by BaseData\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -236,7 +236,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         'Create a new BaseData instance.\\n\\n           lineno -- Line number in the ks-file where this object was defined\\n        '", "-        if (self.__class__ is BaseData):", "+        if (self.__class__ is not BaseData):", "             raise TypeError('BaseData is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.lineno = 0"]]], "result-type": "normal"}, "254": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -135,7 +135,7 @@", "     def _insertSorted(self, lst, obj):", "         length = len(lst)", "         i = 0", "-        while (i < length):", "+        while (i == length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "                 i += 1", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):"]]], "result-type": "normal"}, "38": {"module-name": "pykickstart.base", "op-name": "replace_In_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 360, in _setCommand\nKeyError: 132\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -159,7 +159,7 @@", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "         if (cmdObj.writePriority is not None):", "-            if (cmdObj.writePriority in self._writeOrder):", "+            if (cmdObj.writePriority != self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]"]]], "result-type": "normal"}, "2": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -24,7 +24,7 @@", "         self.handler = None", "         self.lineno = 0", "         self.seen = False", "-        for arg in (kw for kw in self.removedKeywords if (kw in kwargs)):", "+        for arg in (kw for kw in self.removedKeywords if (kw == kwargs)):", "             kwargs.pop(arg)", " ", "     def __call__(self, *args, **kwargs):"]]], "result-type": "normal"}, "166": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_NotIn", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 5, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotIn", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 399, in _registerCommands\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -185,7 +185,7 @@", "                 if (val.__class__.__name__ == cmdClass.__name__):", "                     cmdObj = val", "                     break", "-            if (cmdObj is None):", "+            if (cmdObj not in None):", "                 cmdObj = cmdClass()", "                 self._setCommand(cmdObj)", "             self.commands[cmdName] = cmdObj"]]], "result-type": "normal"}, "153": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 358, in _setCommand\nTypeError: unorderable types: int() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -158,7 +158,7 @@", "             if (not six.PY3):", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "-        if (cmdObj.writePriority is not None):", "+        if (cmdObj.writePriority >= None):", "             if (cmdObj.writePriority in self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:"]]], "result-type": "normal"}, "63": {"module-name": "pykickstart.base", "op-name": "replace_Gt_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": 4.7303299999999995, "result-type": "timeout"}, "33": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIs", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -195,7 +195,7 @@", " ", "     def resetCommand(self, cmdName):", "         \"Given the name of a command that's already been instantiated, create\\n           a new instance of it that will take the place of the existing\\n           instance.  This is equivalent to quickly blanking out all the\\n           attributes that were previously set.\\n\\n           This method raises a KeyError if cmdName is invalid.\\n        \"", "-        if (cmdName not in self.commands):", "+        if (cmdName is self.commands):", "             raise KeyError", "         cmdObj = self.commands[cmdName].__class__()", "         self._setCommand(cmdObj)"]]], "result-type": "normal"}, "203": {"module-name": "pykickstart.base", "op-name": "replace_In_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/vnc.py\", line 80, in __init__\n    FC3_Vnc.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/vnc.py\", line 29, in __init__\n    KickstartCommand.__init__(self, writePriority, *args, **kwargs)\n  File \"pykickstart.base\", line 101, in __init__\n  File \"pykickstart.base\", line 101, in <genexpr>\nTypeError: unorderable types: str() <= dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -24,7 +24,7 @@", "         self.handler = None", "         self.lineno = 0", "         self.seen = False", "-        for arg in (kw for kw in self.removedKeywords if (kw in kwargs)):", "+        for arg in (kw for kw in self.removedKeywords if (kw <= kwargs)):", "             kwargs.pop(arg)", " ", "     def __call__(self, *args, **kwargs):"]]], "result-type": "normal"}, "174": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping in {}) or (dataMapping is None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "117": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping not in {}) or (dataMapping is None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "132": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 360, in _setCommand\n  File \"pykickstart.base\", line 329, in _insertSorted\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -135,7 +135,7 @@", "     def _insertSorted(self, lst, obj):", "         length = len(lst)", "         i = 0", "-        while (i < length):", "+        while (i <= length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "                 i += 1", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):"]]], "result-type": "normal"}, "29": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": 4.7303299999999995, "result-type": "timeout"}, "106": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIn", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 269, in __init__\nTypeError: argument of type 'type' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -99,7 +99,7 @@", " ", "     def __init__(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None, *args, **kwargs):", "         'Create a new BaseHandler instance.  This method must be provided by\\n           all subclasses, but subclasses must call BaseHandler.__init__ first.\\n\\n           mapping          -- A custom map from command strings to classes,\\n                               useful when creating your own handler with\\n                               special command objects.  It is otherwise unused\\n                               and rarely needed.  If you give this argument,\\n                               the mapping takes the place of the default one\\n                               and so must include all commands you want\\n                               recognized.\\n           dataMapping      -- This is the same as mapping, but for data\\n                               objects.  All the same comments apply.\\n           commandUpdates   -- This is similar to mapping, but does not take\\n                               the place of the defaults entirely.  Instead,\\n                               this mapping is applied after the defaults and\\n                               updates it with just the commands you want to\\n                               modify.\\n           dataUpdates      -- This is the same as commandUpdates, but for\\n                               data objects.\\n\\n\\n           Instance attributes:\\n\\n           commands -- A mapping from a string command to a KickstartCommand\\n                       subclass object that handles it.  Multiple strings can\\n                       map to the same object, but only one instance of the\\n                       command object should ever exist.  Most users should\\n                       never have to deal with this directly, as it is\\n                       manipulated internally and called through dispatcher.\\n           currentLine -- The current unprocessed line from the input file\\n                          that caused this handler to be run.\\n           packages -- An instance of pykickstart.parser.Packages which\\n                       describes the packages section of the input file.\\n           platform -- A string describing the hardware platform, which is\\n                       needed only by system-config-kickstart.\\n           scripts  -- A list of pykickstart.parser.Script instances, which is\\n                       populated by KickstartParser.addScript and describes the\\n                       %pre/%pre-install/%post/%traceback script section of the\\n                       input file.\\n        '", "-        if (self.__class__ is BaseHandler):", "+        if (self.__class__ in BaseHandler):", "             raise TypeError('BaseHandler is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.scripts = []"]]], "result-type": "normal"}, "124": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Eq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 4, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithEq", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping == {}) or (dataMapping == None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "226": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 72, in runTest\n    self.handler.dispatcher([\"autopart\", \"--encrypted\", \"--passphrase\", \"something\"], 1)\n  File \"pykickstart.base\", line 445, in dispatcher\nAttributeError: 'NoneType' object has no attribute 'currentCmd'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -207,7 +207,7 @@", "         cmd = args[0]", "         if (cmd not in self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "-        elif (self.commands[cmd] is not None):", "+        elif (self.commands[cmd] == None):", "             self.commands[cmd].currentCmd = cmd", "             self.commands[cmd].currentLine = self.currentLine", "             self.commands[cmd].lineno = lineno"]]], "result-type": "normal"}, "240": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -31,7 +31,7 @@", "         'Set multiple attributes on a subclass of KickstartCommand at once\\n           via keyword arguments.  Valid attributes are anything specified in\\n           a subclass, but unknown attributes will be ignored.\\n        '", "         self.seen = True", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key is self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "22": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIsNot", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 72, in runTest\n    self.handler.dispatcher([\"autopart\", \"--encrypted\", \"--passphrase\", \"something\"], 1)\n  File \"pykickstart.base\", line 443, in dispatcher\npykickstart.errors.KickstartParseError: The following problem occurred on line 1 of the kickstart file:\n\nUnknown command: autopart\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -205,7 +205,7 @@", "     def dispatcher(self, args, lineno):", "         'Call the appropriate KickstartCommand handler for the current line\\n           in the kickstart file.  A handler for the current command should\\n           be registered, though a handler of None is not an error.  Returns\\n           the data object returned by KickstartCommand.parse.\\n\\n           args    -- A list of arguments to the current command\\n           lineno  -- The line number in the file, for error reporting\\n        '", "         cmd = args[0]", "-        if (cmd not in self.commands):", "+        if (cmd is not self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "         elif (self.commands[cmd] is not None):", "             self.commands[cmd].currentCmd = cmd"]]], "result-type": "normal"}, "241": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -159,7 +159,7 @@", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "         if (cmdObj.writePriority is not None):", "-            if (cmdObj.writePriority in self._writeOrder):", "+            if (cmdObj.writePriority is self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]"]]], "result-type": "normal"}, "134": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": 4.7303299999999995, "result-type": "timeout"}, "118": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 73, in runTest\n    self.assertFalse(self.handler.autopart.encrypted)\nAttributeError: 'F25Handler' object has no attribute 'autopart'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -182,7 +182,7 @@", "         for (cmdName, cmdClass) in list(cMap.items()):", "             cmdObj = None", "             for (_key, val) in list(self.commands.items()):", "-                if (val.__class__.__name__ == cmdClass.__name__):", "+                if (val.__class__.__name__ not in cmdClass.__name__):", "                     cmdObj = val", "                     break", "             if (cmdObj is None):"]]], "result-type": "normal"}, "140": {"module-name": "pykickstart.base", "op-name": "replace_In_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 428, in __init__\n    F19_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 403, in __init__\n    F18_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 309, in __init__\n    F17_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 276, in __init__\n    F15_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 234, in __init__\n    F14_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 185, in __init__\n    FC4_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 148, in __init__\n    FC3_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 33, in __init__\n    KickstartCommand.__init__(self, writePriority, *args, **kwargs)\n  File \"pykickstart.base\", line 102, in __init__\nKeyError: 'linear'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -24,7 +24,7 @@", "         self.handler = None", "         self.lineno = 0", "         self.seen = False", "-        for arg in (kw for kw in self.removedKeywords if (kw in kwargs)):", "+        for arg in (kw for kw in self.removedKeywords if (kw not in kwargs)):", "             kwargs.pop(arg)", " ", "     def __call__(self, *args, **kwargs):"]]], "result-type": "normal"}, "14": {"module-name": "pykickstart.base", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "number_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 8, "result-data": [{"line_number": 347, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 8}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 347, in _setCommand\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -150,7 +150,7 @@", " ", "     def _setCommand(self, cmdObj):", "         if (cmdObj.__class__.__name__.find('_') != (- 1)):", "-            name = cmdObj.__class__.__name__.split('_', 1)[1]", "+            name = cmdObj.__class__.__name__.split('_', 1)[2]", "             if (not six.PY3):", "                 name = unicode(name)", "         else:"]]], "result-type": "normal"}, "257": {"module-name": "pykickstart.base", "op-name": "replace_GtE_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_GtE_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -143,7 +143,7 @@", "                 return", "             elif (obj.__class__.__name__ < lst[i].__class__.__name__):", "                 break", "-        if (i >= length):", "+        if (i < length):", "             lst.append(obj)", "         else:", "             lst.insert(i, obj)"]]], "result-type": "normal"}, "105": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py\", line 108, in __init__\n    DeprecatedCommand.__init__(self)\n  File \"pykickstart.base\", line 195, in __init__\nTypeError: argument of type 'type' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -80,7 +80,7 @@", "     \"Specify that a command is deprecated and no longer has any function.\\n       Any command that is deprecated should be subclassed from this class,\\n       only specifying an __init__ method that calls the superclass's __init__.\\n       This is an abstract class.\\n    \"", " ", "     def __init__(self, writePriority=None, *args, **kwargs):", "-        if (self.__class__ is DeprecatedCommand):", "+        if (self.__class__ in DeprecatedCommand):", "             raise TypeError('DeprecatedCommand is an abstract class.')", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", " "]]], "result-type": "normal"}, "70": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithGt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 23, in runTest\n    self.assertRaises(KeyError, self.handler.resetCommand, \"fakecommand\")\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 765, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 214, in handle\n    callable_obj(*args, **kwargs)\n  File \"pykickstart.base\", line 421, in resetCommand\nTypeError: unorderable types: str() > dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -195,7 +195,7 @@", " ", "     def resetCommand(self, cmdName):", "         \"Given the name of a command that's already been instantiated, create\\n           a new instance of it that will take the place of the existing\\n           instance.  This is equivalent to quickly blanking out all the\\n           attributes that were previously set.\\n\\n           This method raises a KeyError if cmdName is invalid.\\n        \"", "-        if (cmdName not in self.commands):", "+        if (cmdName > self.commands):", "             raise KeyError", "         cmdObj = self.commands[cmdName].__class__()", "         self._setCommand(cmdObj)"]]], "result-type": "normal"}, "256": {"module-name": "pykickstart.base", "op-name": "replace_GtE_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_GtE_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 360, in _setCommand\n  File \"pykickstart.base\", line 337, in _insertSorted\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -143,7 +143,7 @@", "                 return", "             elif (obj.__class__.__name__ < lst[i].__class__.__name__):", "                 break", "-        if (i >= length):", "+        if (i not in length):", "             lst.append(obj)", "         else:", "             lst.insert(i, obj)"]]], "result-type": "normal"}, "234": {"module-name": "pykickstart.base", "op-name": "replace_In_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 360, in _setCommand\nKeyError: 60\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -159,7 +159,7 @@", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "         if (cmdObj.writePriority is not None):", "-            if (cmdObj.writePriority in self._writeOrder):", "+            if (cmdObj.writePriority is not self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]"]]], "result-type": "normal"}, "246": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -214,7 +214,7 @@", "             self.commands[cmd].seen = True", "             obj = self.commands[cmd].parse(args[1:])", "             lst = self.commands[cmd].dataList()", "-            if (isinstance(obj, BaseData) and (lst is not None)):", "+            if (isinstance(obj, BaseData) and (lst < None)):", "                 lst.append(obj)", "             return obj", " "]]], "result-type": "normal"}, "59": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithIsNot", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -135,7 +135,7 @@", "     def _insertSorted(self, lst, obj):", "         length = len(lst)", "         i = 0", "-        while (i < length):", "+        while (i is not length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "                 i += 1", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):"]]], "result-type": "normal"}, "228": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -138,7 +138,7 @@", "         while (i < length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "                 i += 1", "-            elif (obj.__class__.__name__ == lst[i].__class__.__name__):", "+            elif (obj.__class__.__name__ <= lst[i].__class__.__name__):", "                 lst[i] = obj", "                 return", "             elif (obj.__class__.__name__ < lst[i].__class__.__name__):"]]], "result-type": "normal"}, "40": {"module-name": "pykickstart.base", "op-name": "replace_Gt_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -136,7 +136,7 @@", "         length = len(lst)", "         i = 0", "         while (i < length):", "-            if (obj.__class__.__name__ > lst[i].__class__.__name__):", "+            if (obj.__class__.__name__ >= lst[i].__class__.__name__):", "                 i += 1", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):", "                 lst[i] = obj"]]], "result-type": "normal"}, "57": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Lt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 5, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLt", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 399, in _registerCommands\nTypeError: unorderable types: NoneType() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -185,7 +185,7 @@", "                 if (val.__class__.__name__ == cmdClass.__name__):", "                     cmdObj = val", "                     break", "-            if (cmdObj is None):", "+            if (cmdObj < None):", "                 cmdObj = cmdClass()", "                 self._setCommand(cmdObj)", "             self.commands[cmdName] = cmdObj"]]], "result-type": "normal"}, "30": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -195,7 +195,7 @@", " ", "     def resetCommand(self, cmdName):", "         \"Given the name of a command that's already been instantiated, create\\n           a new instance of it that will take the place of the existing\\n           instance.  This is equivalent to quickly blanking out all the\\n           attributes that were previously set.\\n\\n           This method raises a KeyError if cmdName is invalid.\\n        \"", "-        if (cmdName not in self.commands):", "+        if (cmdName == self.commands):", "             raise KeyError", "         cmdObj = self.commands[cmdName].__class__()", "         self._setCommand(cmdObj)"]]], "result-type": "normal"}, "227": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Eq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -214,7 +214,7 @@", "             self.commands[cmd].seen = True", "             obj = self.commands[cmd].parse(args[1:])", "             lst = self.commands[cmd].dataList()", "-            if (isinstance(obj, BaseData) and (lst is not None)):", "+            if (isinstance(obj, BaseData) and (lst == None)):", "                 lst.append(obj)", "             return obj", " "]]], "result-type": "normal"}, "167": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_NotIn", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 6, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotIn", "occurrence": 6}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -236,7 +236,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         'Create a new BaseData instance.\\n\\n           lineno -- Line number in the ks-file where this object was defined\\n        '", "-        if (self.__class__ is BaseData):", "+        if (self.__class__ not in BaseData):", "             raise TypeError('BaseData is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.lineno = 0"]]], "result-type": "normal"}, "51": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_GtE", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 6, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGtE", "occurrence": 6}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -236,7 +236,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         'Create a new BaseData instance.\\n\\n           lineno -- Line number in the ks-file where this object was defined\\n        '", "-        if (self.__class__ is BaseData):", "+        if (self.__class__ >= BaseData):", "             raise TypeError('BaseData is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.lineno = 0"]]], "result-type": "normal"}, "68": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 73, in runTest\n    self.assertFalse(self.handler.autopart.encrypted)\nAttributeError: 'F25Handler' object has no attribute 'autopart'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -182,7 +182,7 @@", "         for (cmdName, cmdClass) in list(cMap.items()):", "             cmdObj = None", "             for (_key, val) in list(self.commands.items()):", "-                if (val.__class__.__name__ == cmdClass.__name__):", "+                if (val.__class__.__name__ > cmdClass.__name__):", "                     cmdObj = val", "                     break", "             if (cmdObj is None):"]]], "result-type": "normal"}, "58": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Lt", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 6, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLt", "occurrence": 6}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -236,7 +236,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         'Create a new BaseData instance.\\n\\n           lineno -- Line number in the ks-file where this object was defined\\n        '", "-        if (self.__class__ is BaseData):", "+        if (self.__class__ < BaseData):", "             raise TypeError('BaseData is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.lineno = 0"]]], "result-type": "normal"}, "249": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 72, in runTest\n    self.handler.dispatcher([\"autopart\", \"--encrypted\", \"--passphrase\", \"something\"], 1)\n  File \"pykickstart.base\", line 444, in dispatcher\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -207,7 +207,7 @@", "         cmd = args[0]", "         if (cmd not in self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "-        elif (self.commands[cmd] is not None):", "+        elif (self.commands[cmd] not in None):", "             self.commands[cmd].currentCmd = cmd", "             self.commands[cmd].currentLine = self.currentLine", "             self.commands[cmd].lineno = lineno"]]], "result-type": "normal"}, "216": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 18, in runTest\n    self.assertIn(\"#platform=x86_64\", str(self.handler))\nAssertionError: '#platform=x86_64' not found in '#version=DEVEL\\n\\n# System bootloader configuration\\nbootloader --location=none\\n'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -113,7 +113,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.platform != ''):", "+        if (self.platform == ''):", "             retval += ('#platform=%s\\n' % self.platform)", "         retval += ('#version=%s\\n' % versionToString(self.version))", "         lst = list(self._writeOrder.keys())"]]], "result-type": "normal"}, "222": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping is not {}) or (dataMapping is None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "184": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 18, in runTest\n    self.assertIn(\"#platform=x86_64\", str(self.handler))\nAssertionError: '#platform=x86_64' not found in '#version=DEVEL\\n\\n# System bootloader configuration\\nbootloader --location=none\\n'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -113,7 +113,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.platform != ''):", "+        if (self.platform < ''):", "             retval += ('#platform=%s\\n' % self.platform)", "         retval += ('#version=%s\\n' % versionToString(self.version))", "         lst = list(self._writeOrder.keys())"]]], "result-type": "normal"}, "85": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithGtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 64, in runTest\n    self.handler.maskAllExcept(lst)\n  File \"pykickstart.base\", line 472, in maskAllExcept\nTypeError: unorderable types: str() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -222,7 +222,7 @@", "         'Set all entries in the commands dict to None, except the ones in\\n           the lst.  All other commands will not be processed.\\n        '", "         self._writeOrder = {}", "         for (key, _val) in list(self.commands.items()):", "-            if (key not in lst):", "+            if (key >= lst):", "                 self.commands[key] = None", " ", "     def hasCommand(self, cmd):"]]], "result-type": "normal"}, "187": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 346, in _setCommand\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -149,7 +149,7 @@", "             lst.insert(i, obj)", " ", "     def _setCommand(self, cmdObj):", "-        if (cmdObj.__class__.__name__.find('_') != (- 1)):", "+        if (cmdObj.__class__.__name__.find('_') in (- 1)):", "             name = cmdObj.__class__.__name__.split('_', 1)[1]", "             if (not six.PY3):", "                 name = unicode(name)"]]], "result-type": "normal"}, "87": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -158,7 +158,7 @@", "             if (not six.PY3):", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "-        if (cmdObj.writePriority is not None):", "+        if (cmdObj.writePriority is None):", "             if (cmdObj.writePriority in self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:"]]], "result-type": "normal"}, "198": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGt", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 269, in __init__\nTypeError: unorderable types: type() > type()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -99,7 +99,7 @@", " ", "     def __init__(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None, *args, **kwargs):", "         'Create a new BaseHandler instance.  This method must be provided by\\n           all subclasses, but subclasses must call BaseHandler.__init__ first.\\n\\n           mapping          -- A custom map from command strings to classes,\\n                               useful when creating your own handler with\\n                               special command objects.  It is otherwise unused\\n                               and rarely needed.  If you give this argument,\\n                               the mapping takes the place of the default one\\n                               and so must include all commands you want\\n                               recognized.\\n           dataMapping      -- This is the same as mapping, but for data\\n                               objects.  All the same comments apply.\\n           commandUpdates   -- This is similar to mapping, but does not take\\n                               the place of the defaults entirely.  Instead,\\n                               this mapping is applied after the defaults and\\n                               updates it with just the commands you want to\\n                               modify.\\n           dataUpdates      -- This is the same as commandUpdates, but for\\n                               data objects.\\n\\n\\n           Instance attributes:\\n\\n           commands -- A mapping from a string command to a KickstartCommand\\n                       subclass object that handles it.  Multiple strings can\\n                       map to the same object, but only one instance of the\\n                       command object should ever exist.  Most users should\\n                       never have to deal with this directly, as it is\\n                       manipulated internally and called through dispatcher.\\n           currentLine -- The current unprocessed line from the input file\\n                          that caused this handler to be run.\\n           packages -- An instance of pykickstart.parser.Packages which\\n                       describes the packages section of the input file.\\n           platform -- A string describing the hardware platform, which is\\n                       needed only by system-config-kickstart.\\n           scripts  -- A list of pykickstart.parser.Script instances, which is\\n                       populated by KickstartParser.addScript and describes the\\n                       %pre/%pre-install/%post/%traceback script section of the\\n                       input file.\\n        '", "-        if (self.__class__ is BaseHandler):", "+        if (self.__class__ > BaseHandler):", "             raise TypeError('BaseHandler is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.scripts = []"]]], "result-type": "normal"}, "235": {"module-name": "pykickstart.base", "op-name": "replace_In_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_IsNot", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -248,7 +248,7 @@", "     def __call__(self, *args, **kwargs):", "         'Set multiple attributes on a subclass of BaseData at once via\\n           keyword arguments.  Valid attributes are anything specified in a\\n           subclass, but unknown attributes will be ignored.\\n        '", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key is not self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "224": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -69,7 +69,7 @@", "     def set_to_obj(self, namespace, obj):", "         \"Sets the contents of the namespace object (an instance of argparse.Namespace\\n           returned by parse_arguments) as attributes on the provided object obj.  It's\\n           useful to call this from KickstartCommand subclasses that handle lists\\n           of objects (like partitions, network devices, etc.) and need to populate\\n           a Data object.\\n        \"", "         for (key, val) in vars(namespace).items():", "-            if (val is not None):", "+            if (val == None):", "                 setattr(obj, key, val)", " ", "     def _setToObj(self, namespace, obj):"]]], "result-type": "normal"}, "110": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_In", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 6, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIn", "occurrence": 6}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -236,7 +236,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         'Create a new BaseData instance.\\n\\n           lineno -- Line number in the ks-file where this object was defined\\n        '", "-        if (self.__class__ is BaseData):", "+        if (self.__class__ in BaseData):", "             raise TypeError('BaseData is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.lineno = 0"]]], "result-type": "normal"}, "185": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 73, in runTest\n    self.assertFalse(self.handler.autopart.encrypted)\nAttributeError: 'F25Handler' object has no attribute 'autopart'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -149,7 +149,7 @@", "             lst.insert(i, obj)", " ", "     def _setCommand(self, cmdObj):", "-        if (cmdObj.__class__.__name__.find('_') != (- 1)):", "+        if (cmdObj.__class__.__name__.find('_') < (- 1)):", "             name = cmdObj.__class__.__name__.split('_', 1)[1]", "             if (not six.PY3):", "                 name = unicode(name)"]]], "result-type": "normal"}, "258": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -113,7 +113,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.platform != ''):", "+        if (self.platform not in ''):", "             retval += ('#platform=%s\\n' % self.platform)", "         retval += ('#version=%s\\n' % versionToString(self.version))", "         lst = list(self._writeOrder.keys())"]]], "result-type": "normal"}, "260": {"module-name": "pykickstart.base", "op-name": "replace_GtE_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_GtE_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithGt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -143,7 +143,7 @@", "                 return", "             elif (obj.__class__.__name__ < lst[i].__class__.__name__):", "                 break", "-        if (i >= length):", "+        if (i > length):", "             lst.append(obj)", "         else:", "             lst.insert(i, obj)"]]], "result-type": "normal"}, "18": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 23, in runTest\n    self.assertRaises(KeyError, self.handler.resetCommand, \"fakecommand\")\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 765, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 214, in handle\n    callable_obj(*args, **kwargs)\n  File \"pykickstart.base\", line 421, in resetCommand\nTypeError: unorderable types: str() <= dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -195,7 +195,7 @@", " ", "     def resetCommand(self, cmdName):", "         \"Given the name of a command that's already been instantiated, create\\n           a new instance of it that will take the place of the existing\\n           instance.  This is equivalent to quickly blanking out all the\\n           attributes that were previously set.\\n\\n           This method raises a KeyError if cmdName is invalid.\\n        \"", "-        if (cmdName not in self.commands):", "+        if (cmdName <= self.commands):", "             raise KeyError", "         cmdObj = self.commands[cmdName].__class__()", "         self._setCommand(cmdObj)"]]], "result-type": "normal"}, "218": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 18, in runTest\n    self.assertIn(\"#platform=x86_64\", str(self.handler))\nAssertionError: '#platform=x86_64' not found in '#version=DEVEL\\n\\n# System bootloader configuration\\nbootloader --location=none\\n'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -113,7 +113,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.platform != ''):", "+        if (self.platform is ''):", "             retval += ('#platform=%s\\n' % self.platform)", "         retval += ('#version=%s\\n' % versionToString(self.version))", "         lst = list(self._writeOrder.keys())"]]], "result-type": "normal"}, "195": {"module-name": "pykickstart.base", "op-name": "replace_GtE_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_GtE_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIsNot", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -143,7 +143,7 @@", "                 return", "             elif (obj.__class__.__name__ < lst[i].__class__.__name__):", "                 break", "-        if (i >= length):", "+        if (i is not length):", "             lst.append(obj)", "         else:", "             lst.insert(i, obj)"]]], "result-type": "normal"}, "196": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/zerombr.py\", line 32, in __init__\n    KickstartCommand.__init__(self, writePriority, *args, **kwargs)\n  File \"pykickstart.base\", line 83, in __init__\nTypeError: unorderable types: type() > type()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -15,7 +15,7 @@", " ", "     def __init__(self, writePriority=0, *args, **kwargs):", "         \"Create a new KickstartCommand instance.  This method must be\\n           provided by all subclasses, but subclasses must call\\n           KickstartCommand.__init__ first.  Instance attributes:\\n\\n           currentCmd    -- The name of the command in the input file that\\n                            caused this handler to be run.\\n           currentLine   -- The current unprocessed line from the input file\\n                            that caused this handler to be run.\\n           handler       -- A reference to the BaseHandler subclass this\\n                            command is contained withing.  This is needed to\\n                            allow referencing of Data objects.\\n           lineno        -- The current line number in the input file.\\n           seen          -- If this command was ever used in the kickstart file,\\n                            this attribute will be set to True.  This allows\\n                            for differentiating commands that were omitted\\n                            from those that default to unset.\\n           writePriority -- An integer specifying when this command should be\\n                            printed when iterating over all commands' __str__\\n                            methods.  The higher the number, the later this\\n                            command will be written.  All commands with the\\n                            same priority will be written alphabetically.\\n        \"", "-        if (self.__class__ is KickstartCommand):", "+        if (self.__class__ > KickstartCommand):", "             raise TypeError('KickstartCommand is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.writePriority = writePriority"]]], "result-type": "normal"}, "23": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIsNot", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 67, in runTest\n    self.assertIsNotNone(self.handler.commands[cmd])\nAssertionError: unexpectedly None\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -222,7 +222,7 @@", "         'Set all entries in the commands dict to None, except the ones in\\n           the lst.  All other commands will not be processed.\\n        '", "         self._writeOrder = {}", "         for (key, _val) in list(self.commands.items()):", "-            if (key not in lst):", "+            if (key is not lst):", "                 self.commands[key] = None", " ", "     def hasCommand(self, cmd):"]]], "result-type": "normal"}, "138": {"module-name": "pykickstart.base", "op-name": "replace_Gt_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -136,7 +136,7 @@", "         length = len(lst)", "         i = 0", "         while (i < length):", "-            if (obj.__class__.__name__ > lst[i].__class__.__name__):", "+            if (obj.__class__.__name__ is not lst[i].__class__.__name__):", "                 i += 1", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):", "                 lst[i] = obj"]]], "result-type": "normal"}, "101": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_IsNot", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 4, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIsNot", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 410, in _registerCommands\nAttributeError: 'NoneType' object has no attribute 'items'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping == {}) or (dataMapping is not None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "130": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 360, in _setCommand\n  File \"pykickstart.base\", line 325, in _insertSorted\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -135,7 +135,7 @@", "     def _insertSorted(self, lst, obj):", "         length = len(lst)", "         i = 0", "-        while (i < length):", "+        while (i not in length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "                 i += 1", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):"]]], "result-type": "normal"}, "78": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithNotEq", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 72, in runTest\n    self.handler.dispatcher([\"autopart\", \"--encrypted\", \"--passphrase\", \"something\"], 1)\n  File \"pykickstart.base\", line 443, in dispatcher\npykickstart.errors.KickstartParseError: The following problem occurred on line 1 of the kickstart file:\n\nUnknown command: autopart\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -205,7 +205,7 @@", "     def dispatcher(self, args, lineno):", "         'Call the appropriate KickstartCommand handler for the current line\\n           in the kickstart file.  A handler for the current command should\\n           be registered, though a handler of None is not an error.  Returns\\n           the data object returned by KickstartCommand.parse.\\n\\n           args    -- A list of arguments to the current command\\n           lineno  -- The line number in the file, for error reporting\\n        '", "         cmd = args[0]", "-        if (cmd not in self.commands):", "+        if (cmd != self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "         elif (self.commands[cmd] is not None):", "             self.commands[cmd].currentCmd = cmd"]]], "result-type": "normal"}, "147": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -248,7 +248,7 @@", "     def __call__(self, *args, **kwargs):", "         'Set multiple attributes on a subclass of BaseData at once via\\n           keyword arguments.  Valid attributes are anything specified in a\\n           subclass, but unknown attributes will be ignored.\\n        '", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key < self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "108": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_In", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 4, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIn", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 372, in _registerCommands\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping == {}) or (dataMapping in None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "114": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -149,7 +149,7 @@", "             lst.insert(i, obj)", " ", "     def _setCommand(self, cmdObj):", "-        if (cmdObj.__class__.__name__.find('_') != (- 1)):", "+        if (cmdObj.__class__.__name__.find('_') > (- 1)):", "             name = cmdObj.__class__.__name__.split('_', 1)[1]", "             if (not six.PY3):", "                 name = unicode(name)"]]], "result-type": "normal"}, "225": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -158,7 +158,7 @@", "             if (not six.PY3):", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "-        if (cmdObj.writePriority is not None):", "+        if (cmdObj.writePriority == None):", "             if (cmdObj.writePriority in self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:"]]], "result-type": "normal"}, "242": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -248,7 +248,7 @@", "     def __call__(self, *args, **kwargs):", "         'Set multiple attributes on a subclass of BaseData at once via\\n           keyword arguments.  Valid attributes are anything specified in a\\n           subclass, but unknown attributes will be ignored.\\n        '", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key is self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "15": {"module-name": "pykickstart.base", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "number_replacer", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 9, "result-data": [{"line_number": 440, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 9}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 765, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 214, in handle\n    callable_obj(*args, **kwargs)\n  File \"pykickstart.base\", line 440, in dispatcher\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -204,7 +204,7 @@", " ", "     def dispatcher(self, args, lineno):", "         'Call the appropriate KickstartCommand handler for the current line\\n           in the kickstart file.  A handler for the current command should\\n           be registered, though a handler of None is not an error.  Returns\\n           the data object returned by KickstartCommand.parse.\\n\\n           args    -- A list of arguments to the current command\\n           lineno  -- The line number in the file, for error reporting\\n        '", "-        cmd = args[0]", "+        cmd = args[1]", "         if (cmd not in self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "         elif (self.commands[cmd] is not None):"]]], "result-type": "normal"}, "207": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 10, in runTest\n    self.assertRaises(TypeError, KickstartCommand, (100, ))\nAssertionError: TypeError not raised by KickstartCommand\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -15,7 +15,7 @@", " ", "     def __init__(self, writePriority=0, *args, **kwargs):", "         \"Create a new KickstartCommand instance.  This method must be\\n           provided by all subclasses, but subclasses must call\\n           KickstartCommand.__init__ first.  Instance attributes:\\n\\n           currentCmd    -- The name of the command in the input file that\\n                            caused this handler to be run.\\n           currentLine   -- The current unprocessed line from the input file\\n                            that caused this handler to be run.\\n           handler       -- A reference to the BaseHandler subclass this\\n                            command is contained withing.  This is needed to\\n                            allow referencing of Data objects.\\n           lineno        -- The current line number in the input file.\\n           seen          -- If this command was ever used in the kickstart file,\\n                            this attribute will be set to True.  This allows\\n                            for differentiating commands that were omitted\\n                            from those that default to unset.\\n           writePriority -- An integer specifying when this command should be\\n                            printed when iterating over all commands' __str__\\n                            methods.  The higher the number, the later this\\n                            command will be written.  All commands with the\\n                            same priority will be written alphabetically.\\n        \"", "-        if (self.__class__ is KickstartCommand):", "+        if (self.__class__ != KickstartCommand):", "             raise TypeError('KickstartCommand is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.writePriority = writePriority"]]], "result-type": "normal"}, "157": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 30, in runTest\n    self.handler.autopart(autopart=True, encrypted=True, passphrase=\"something\")\n  File \"pykickstart.base\", line 114, in __call__\nTypeError: unorderable types: str() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -31,7 +31,7 @@", "         'Set multiple attributes on a subclass of KickstartCommand at once\\n           via keyword arguments.  Valid attributes are anything specified in\\n           a subclass, but unknown attributes will be ignored.\\n        '", "         self.seen = True", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key > self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "80": {"module-name": "pykickstart.base", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": 95, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -23,7 +23,7 @@", "         self.currentLine = ''", "         self.handler = None", "         self.lineno = 0", "-        self.seen = False", "+        self.seen = True", "         for arg in (kw for kw in self.removedKeywords if (kw in kwargs)):", "             kwargs.pop(arg)", " "]]], "result-type": "normal"}, "143": {"module-name": "pykickstart.base", "op-name": "replace_In_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -248,7 +248,7 @@", "     def __call__(self, *args, **kwargs):", "         'Set multiple attributes on a subclass of BaseData at once via\\n           keyword arguments.  Valid attributes are anything specified in a\\n           subclass, but unknown attributes will be ignored.\\n        '", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key not in self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "81": {"module-name": "pykickstart.base", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": 109, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -29,7 +29,7 @@", " ", "     def __call__(self, *args, **kwargs):", "         'Set multiple attributes on a subclass of KickstartCommand at once\\n           via keyword arguments.  Valid attributes are anything specified in\\n           a subclass, but unknown attributes will be ignored.\\n        '", "-        self.seen = True", "+        self.seen = False", "         for (key, val) in list(kwargs.items()):", "             if (key in self.removedAttrs):", "                 continue"]]], "result-type": "normal"}, "175": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -182,7 +182,7 @@", "         for (cmdName, cmdClass) in list(cMap.items()):", "             cmdObj = None", "             for (_key, val) in list(self.commands.items()):", "-                if (val.__class__.__name__ == cmdClass.__name__):", "+                if (val.__class__.__name__ in cmdClass.__name__):", "                     cmdObj = val", "                     break", "             if (cmdObj is None):"]]], "result-type": "normal"}, "49": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_GtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 4, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGtE", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 372, in _registerCommands\nTypeError: unorderable types: NoneType() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping == {}) or (dataMapping >= None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "5": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Eq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -248,7 +248,7 @@", "     def __call__(self, *args, **kwargs):", "         'Set multiple attributes on a subclass of BaseData at once via\\n           keyword arguments.  Valid attributes are anything specified in a\\n           subclass, but unknown attributes will be ignored.\\n        '", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key == self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "74": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 366, in _registerCommands\nTypeError: unorderable types: NoneType() >= dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping >= {}) or (mapping is None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "208": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotEq", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 11, in runTest\n    self.assertRaises(TypeError, DeprecatedCommand, (100, ))\nAssertionError: TypeError not raised by DeprecatedCommand\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -80,7 +80,7 @@", "     \"Specify that a command is deprecated and no longer has any function.\\n       Any command that is deprecated should be subclassed from this class,\\n       only specifying an __init__ method that calls the superclass's __init__.\\n       This is an abstract class.\\n    \"", " ", "     def __init__(self, writePriority=None, *args, **kwargs):", "-        if (self.__class__ is DeprecatedCommand):", "+        if (self.__class__ != DeprecatedCommand):", "             raise TypeError('DeprecatedCommand is an abstract class.')", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", " "]]], "result-type": "normal"}, "62": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -149,7 +149,7 @@", "             lst.insert(i, obj)", " ", "     def _setCommand(self, cmdObj):", "-        if (cmdObj.__class__.__name__.find('_') != (- 1)):", "+        if (cmdObj.__class__.__name__.find('_') >= (- 1)):", "             name = cmdObj.__class__.__name__.split('_', 1)[1]", "             if (not six.PY3):", "                 name = unicode(name)"]]], "result-type": "normal"}, "13": {"module-name": "pykickstart.base", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "number_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 7, "result-data": [{"line_number": 347, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 7}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -150,7 +150,7 @@", " ", "     def _setCommand(self, cmdObj):", "         if (cmdObj.__class__.__name__.find('_') != (- 1)):", "-            name = cmdObj.__class__.__name__.split('_', 1)[1]", "+            name = cmdObj.__class__.__name__.split('_', 2)[1]", "             if (not six.PY3):", "                 name = unicode(name)", "         else:"]]], "result-type": "normal"}, "54": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLt", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 269, in __init__\nTypeError: unorderable types: type() < type()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -99,7 +99,7 @@", " ", "     def __init__(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None, *args, **kwargs):", "         'Create a new BaseHandler instance.  This method must be provided by\\n           all subclasses, but subclasses must call BaseHandler.__init__ first.\\n\\n           mapping          -- A custom map from command strings to classes,\\n                               useful when creating your own handler with\\n                               special command objects.  It is otherwise unused\\n                               and rarely needed.  If you give this argument,\\n                               the mapping takes the place of the default one\\n                               and so must include all commands you want\\n                               recognized.\\n           dataMapping      -- This is the same as mapping, but for data\\n                               objects.  All the same comments apply.\\n           commandUpdates   -- This is similar to mapping, but does not take\\n                               the place of the defaults entirely.  Instead,\\n                               this mapping is applied after the defaults and\\n                               updates it with just the commands you want to\\n                               modify.\\n           dataUpdates      -- This is the same as commandUpdates, but for\\n                               data objects.\\n\\n\\n           Instance attributes:\\n\\n           commands -- A mapping from a string command to a KickstartCommand\\n                       subclass object that handles it.  Multiple strings can\\n                       map to the same object, but only one instance of the\\n                       command object should ever exist.  Most users should\\n                       never have to deal with this directly, as it is\\n                       manipulated internally and called through dispatcher.\\n           currentLine -- The current unprocessed line from the input file\\n                          that caused this handler to be run.\\n           packages -- An instance of pykickstart.parser.Packages which\\n                       describes the packages section of the input file.\\n           platform -- A string describing the hardware platform, which is\\n                       needed only by system-config-kickstart.\\n           scripts  -- A list of pykickstart.parser.Script instances, which is\\n                       populated by KickstartParser.addScript and describes the\\n                       %pre/%pre-install/%post/%traceback script section of the\\n                       input file.\\n        '", "-        if (self.__class__ is BaseHandler):", "+        if (self.__class__ < BaseHandler):", "             raise TypeError('BaseHandler is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.scripts = []"]]], "result-type": "normal"}, "127": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithNotEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -135,7 +135,7 @@", "     def _insertSorted(self, lst, obj):", "         length = len(lst)", "         i = 0", "-        while (i < length):", "+        while (i != length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "                 i += 1", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):"]]], "result-type": "normal"}, "99": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIsNot", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 12, in runTest\n    self.assertRaises(TypeError, BaseHandler, (100, ))\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 765, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 214, in handle\n    callable_obj(*args, **kwargs)\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 374, in _registerCommands\nKeyError\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -99,7 +99,7 @@", " ", "     def __init__(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None, *args, **kwargs):", "         'Create a new BaseHandler instance.  This method must be provided by\\n           all subclasses, but subclasses must call BaseHandler.__init__ first.\\n\\n           mapping          -- A custom map from command strings to classes,\\n                               useful when creating your own handler with\\n                               special command objects.  It is otherwise unused\\n                               and rarely needed.  If you give this argument,\\n                               the mapping takes the place of the default one\\n                               and so must include all commands you want\\n                               recognized.\\n           dataMapping      -- This is the same as mapping, but for data\\n                               objects.  All the same comments apply.\\n           commandUpdates   -- This is similar to mapping, but does not take\\n                               the place of the defaults entirely.  Instead,\\n                               this mapping is applied after the defaults and\\n                               updates it with just the commands you want to\\n                               modify.\\n           dataUpdates      -- This is the same as commandUpdates, but for\\n                               data objects.\\n\\n\\n           Instance attributes:\\n\\n           commands -- A mapping from a string command to a KickstartCommand\\n                       subclass object that handles it.  Multiple strings can\\n                       map to the same object, but only one instance of the\\n                       command object should ever exist.  Most users should\\n                       never have to deal with this directly, as it is\\n                       manipulated internally and called through dispatcher.\\n           currentLine -- The current unprocessed line from the input file\\n                          that caused this handler to be run.\\n           packages -- An instance of pykickstart.parser.Packages which\\n                       describes the packages section of the input file.\\n           platform -- A string describing the hardware platform, which is\\n                       needed only by system-config-kickstart.\\n           scripts  -- A list of pykickstart.parser.Script instances, which is\\n                       populated by KickstartParser.addScript and describes the\\n                       %pre/%pre-install/%post/%traceback script section of the\\n                       input file.\\n        '", "-        if (self.__class__ is BaseHandler):", "+        if (self.__class__ is not BaseHandler):", "             raise TypeError('BaseHandler is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.scripts = []"]]], "result-type": "normal"}, "232": {"module-name": "pykickstart.base", "op-name": "replace_In_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/xconfig.py\", line 166, in __init__\n    F9_XConfig.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/xconfig.py\", line 111, in __init__\n    FC3_XConfig.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/xconfig.py\", line 29, in __init__\n    KickstartCommand.__init__(self, writePriority, *args, **kwargs)\n  File \"pykickstart.base\", line 102, in __init__\nKeyError: 'card'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -24,7 +24,7 @@", "         self.handler = None", "         self.lineno = 0", "         self.seen = False", "-        for arg in (kw for kw in self.removedKeywords if (kw in kwargs)):", "+        for arg in (kw for kw in self.removedKeywords if (kw is not kwargs)):", "             kwargs.pop(arg)", " ", "     def __call__(self, *args, **kwargs):"]]], "result-type": "normal"}, "206": {"module-name": "pykickstart.base", "op-name": "replace_In_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -248,7 +248,7 @@", "     def __call__(self, *args, **kwargs):", "         'Set multiple attributes on a subclass of BaseData at once via\\n           keyword arguments.  Valid attributes are anything specified in a\\n           subclass, but unknown attributes will be ignored.\\n        '", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key <= self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "16": {"module-name": "pykickstart.base", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "number_replacer", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 10, "result-data": [{"line_number": 456, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 10}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -212,7 +212,7 @@", "             self.commands[cmd].currentLine = self.currentLine", "             self.commands[cmd].lineno = lineno", "             self.commands[cmd].seen = True", "-            obj = self.commands[cmd].parse(args[1:])", "+            obj = self.commands[cmd].parse(args[2:])", "             lst = self.commands[cmd].dataList()", "             if (isinstance(obj, BaseData) and (lst is not None)):", "                 lst.append(obj)"]]], "result-type": "normal"}, "199": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGt", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 366, in _registerCommands\nTypeError: unorderable types: NoneType() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping == {}) or (mapping > None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "26": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 372, in _registerCommands\nTypeError: unorderable types: NoneType() < dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping < {}) or (dataMapping is None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "217": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 73, in runTest\n    self.assertFalse(self.handler.autopart.encrypted)\nAttributeError: 'F25Handler' object has no attribute 'autopart'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -149,7 +149,7 @@", "             lst.insert(i, obj)", " ", "     def _setCommand(self, cmdObj):", "-        if (cmdObj.__class__.__name__.find('_') != (- 1)):", "+        if (cmdObj.__class__.__name__.find('_') == (- 1)):", "             name = cmdObj.__class__.__name__.split('_', 1)[1]", "             if (not six.PY3):", "                 name = unicode(name)"]]], "result-type": "normal"}, "94": {"module-name": "pykickstart.base", "op-name": "replace_In_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 30, in runTest\n    self.handler.autopart(autopart=True, encrypted=True, passphrase=\"something\")\n  File \"pykickstart.base\", line 114, in __call__\nTypeError: unorderable types: str() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -31,7 +31,7 @@", "         'Set multiple attributes on a subclass of KickstartCommand at once\\n           via keyword arguments.  Valid attributes are anything specified in\\n           a subclass, but unknown attributes will be ignored.\\n        '", "         self.seen = True", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key >= self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "209": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotEq", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 12, in runTest\n    self.assertRaises(TypeError, BaseHandler, (100, ))\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 765, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 214, in handle\n    callable_obj(*args, **kwargs)\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 374, in _registerCommands\nKeyError\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -99,7 +99,7 @@", " ", "     def __init__(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None, *args, **kwargs):", "         'Create a new BaseHandler instance.  This method must be provided by\\n           all subclasses, but subclasses must call BaseHandler.__init__ first.\\n\\n           mapping          -- A custom map from command strings to classes,\\n                               useful when creating your own handler with\\n                               special command objects.  It is otherwise unused\\n                               and rarely needed.  If you give this argument,\\n                               the mapping takes the place of the default one\\n                               and so must include all commands you want\\n                               recognized.\\n           dataMapping      -- This is the same as mapping, but for data\\n                               objects.  All the same comments apply.\\n           commandUpdates   -- This is similar to mapping, but does not take\\n                               the place of the defaults entirely.  Instead,\\n                               this mapping is applied after the defaults and\\n                               updates it with just the commands you want to\\n                               modify.\\n           dataUpdates      -- This is the same as commandUpdates, but for\\n                               data objects.\\n\\n\\n           Instance attributes:\\n\\n           commands -- A mapping from a string command to a KickstartCommand\\n                       subclass object that handles it.  Multiple strings can\\n                       map to the same object, but only one instance of the\\n                       command object should ever exist.  Most users should\\n                       never have to deal with this directly, as it is\\n                       manipulated internally and called through dispatcher.\\n           currentLine -- The current unprocessed line from the input file\\n                          that caused this handler to be run.\\n           packages -- An instance of pykickstart.parser.Packages which\\n                       describes the packages section of the input file.\\n           platform -- A string describing the hardware platform, which is\\n                       needed only by system-config-kickstart.\\n           scripts  -- A list of pykickstart.parser.Script instances, which is\\n                       populated by KickstartParser.addScript and describes the\\n                       %pre/%pre-install/%post/%traceback script section of the\\n                       input file.\\n        '", "-        if (self.__class__ is BaseHandler):", "+        if (self.__class__ != BaseHandler):", "             raise TypeError('BaseHandler is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.scripts = []"]]], "result-type": "normal"}, "11": {"module-name": "pykickstart.base", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "number_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 5, "result-data": [{"line_number": 330, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -137,7 +137,7 @@", "         i = 0", "         while (i < length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "-                i += 1", "+                i += 2", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):", "                 lst[i] = obj", "                 return"]]], "result-type": "normal"}, "170": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 72, in runTest\n    self.handler.dispatcher([\"autopart\", \"--encrypted\", \"--passphrase\", \"something\"], 1)\n  File \"pykickstart.base\", line 444, in dispatcher\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -207,7 +207,7 @@", "         cmd = args[0]", "         if (cmd not in self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "-        elif (self.commands[cmd] is not None):", "+        elif (self.commands[cmd] in None):", "             self.commands[cmd].currentCmd = cmd", "             self.commands[cmd].currentLine = self.currentLine", "             self.commands[cmd].lineno = lineno"]]], "result-type": "normal"}, "95": {"module-name": "pykickstart.base", "op-name": "replace_In_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 359, in _setCommand\nTypeError: unorderable types: int() >= dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -159,7 +159,7 @@", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "         if (cmdObj.writePriority is not None):", "-            if (cmdObj.writePriority in self._writeOrder):", "+            if (cmdObj.writePriority >= self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]"]]], "result-type": "normal"}, "223": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_IsNot", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 73, in runTest\n    self.assertFalse(self.handler.autopart.encrypted)\nAttributeError: 'F25Handler' object has no attribute 'autopart'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -182,7 +182,7 @@", "         for (cmdName, cmdClass) in list(cMap.items()):", "             cmdObj = None", "             for (_key, val) in list(self.commands.items()):", "-                if (val.__class__.__name__ == cmdClass.__name__):", "+                if (val.__class__.__name__ is not cmdClass.__name__):", "                     cmdObj = val", "                     break", "             if (cmdObj is None):"]]], "result-type": "normal"}, "82": {"module-name": "pykickstart.base", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": 448, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -211,7 +211,7 @@", "             self.commands[cmd].currentCmd = cmd", "             self.commands[cmd].currentLine = self.currentLine", "             self.commands[cmd].lineno = lineno", "-            self.commands[cmd].seen = True", "+            self.commands[cmd].seen = False", "             obj = self.commands[cmd].parse(args[1:])", "             lst = self.commands[cmd].dataList()", "             if (isinstance(obj, BaseData) and (lst is not None)):"]]], "result-type": "normal"}, "61": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -113,7 +113,7 @@", "     def __str__(self):", "         'Return a string formatted for output to a kickstart file.'", "         retval = ''", "-        if (self.platform != ''):", "+        if (self.platform >= ''):", "             retval += ('#platform=%s\\n' % self.platform)", "         retval += ('#version=%s\\n' % versionToString(self.version))", "         lst = list(self._writeOrder.keys())"]]], "result-type": "normal"}, "3": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -31,7 +31,7 @@", "         'Set multiple attributes on a subclass of KickstartCommand at once\\n           via keyword arguments.  Valid attributes are anything specified in\\n           a subclass, but unknown attributes will be ignored.\\n        '", "         self.seen = True", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key == self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "4": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -159,7 +159,7 @@", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "         if (cmdObj.writePriority is not None):", "-            if (cmdObj.writePriority in self._writeOrder):", "+            if (cmdObj.writePriority == self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]"]]], "result-type": "normal"}, "69": {"module-name": "pykickstart.base", "op-name": "replace_GtE_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_GtE_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIs", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -143,7 +143,7 @@", "                 return", "             elif (obj.__class__.__name__ < lst[i].__class__.__name__):", "                 break", "-        if (i >= length):", "+        if (i is length):", "             lst.append(obj)", "         else:", "             lst.insert(i, obj)"]]], "result-type": "normal"}, "230": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 372, in _registerCommands\nTypeError: unorderable types: NoneType() <= dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping <= {}) or (dataMapping is None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "215": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 73, in runTest\n    self.assertFalse(self.handler.autopart.encrypted)\nAttributeError: 'F25Handler' object has no attribute 'autopart'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -149,7 +149,7 @@", "             lst.insert(i, obj)", " ", "     def _setCommand(self, cmdObj):", "-        if (cmdObj.__class__.__name__.find('_') != (- 1)):", "+        if (cmdObj.__class__.__name__.find('_') <= (- 1)):", "             name = cmdObj.__class__.__name__.split('_', 1)[1]", "             if (not six.PY3):", "                 name = unicode(name)"]]], "result-type": "normal"}, "164": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotIn", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 366, in _registerCommands\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping == {}) or (mapping not in None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "91": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 360, in _setCommand\n  File \"pykickstart.base\", line 325, in _insertSorted\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -135,7 +135,7 @@", "     def _insertSorted(self, lst, obj):", "         length = len(lst)", "         i = 0", "-        while (i < length):", "+        while (i in length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "                 i += 1", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):"]]], "result-type": "normal"}, "205": {"module-name": "pykickstart.base", "op-name": "replace_In_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 359, in _setCommand\nTypeError: unorderable types: int() <= dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -159,7 +159,7 @@", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "         if (cmdObj.writePriority is not None):", "-            if (cmdObj.writePriority in self._writeOrder):", "+            if (cmdObj.writePriority <= self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]"]]], "result-type": "normal"}, "6": {"module-name": "pykickstart.base", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.base", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": 58, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -13,7 +13,7 @@", "     removedKeywords = []", "     removedAttrs = []", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         \"Create a new KickstartCommand instance.  This method must be\\n           provided by all subclasses, but subclasses must call\\n           KickstartCommand.__init__ first.  Instance attributes:\\n\\n           currentCmd    -- The name of the command in the input file that\\n                            caused this handler to be run.\\n           currentLine   -- The current unprocessed line from the input file\\n                            that caused this handler to be run.\\n           handler       -- A reference to the BaseHandler subclass this\\n                            command is contained withing.  This is needed to\\n                            allow referencing of Data objects.\\n           lineno        -- The current line number in the input file.\\n           seen          -- If this command was ever used in the kickstart file,\\n                            this attribute will be set to True.  This allows\\n                            for differentiating commands that were omitted\\n                            from those that default to unset.\\n           writePriority -- An integer specifying when this command should be\\n                            printed when iterating over all commands' __str__\\n                            methods.  The higher the number, the later this\\n                            command will be written.  All commands with the\\n                            same priority will be written alphabetically.\\n        \"", "         if (self.__class__ is KickstartCommand):", "             raise TypeError('KickstartCommand is an abstract class.')"]]], "result-type": "normal"}, "104": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/fcoe.py\", line 94, in __init__\n    KickstartCommand.__init__(self, writePriority, *args, **kwargs)\n  File \"pykickstart.base\", line 83, in __init__\nTypeError: argument of type 'type' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -15,7 +15,7 @@", " ", "     def __init__(self, writePriority=0, *args, **kwargs):", "         \"Create a new KickstartCommand instance.  This method must be\\n           provided by all subclasses, but subclasses must call\\n           KickstartCommand.__init__ first.  Instance attributes:\\n\\n           currentCmd    -- The name of the command in the input file that\\n                            caused this handler to be run.\\n           currentLine   -- The current unprocessed line from the input file\\n                            that caused this handler to be run.\\n           handler       -- A reference to the BaseHandler subclass this\\n                            command is contained withing.  This is needed to\\n                            allow referencing of Data objects.\\n           lineno        -- The current line number in the input file.\\n           seen          -- If this command was ever used in the kickstart file,\\n                            this attribute will be set to True.  This allows\\n                            for differentiating commands that were omitted\\n                            from those that default to unset.\\n           writePriority -- An integer specifying when this command should be\\n                            printed when iterating over all commands' __str__\\n                            methods.  The higher the number, the later this\\n                            command will be written.  All commands with the\\n                            same priority will be written alphabetically.\\n        \"", "-        if (self.__class__ is KickstartCommand):", "+        if (self.__class__ in KickstartCommand):", "             raise TypeError('KickstartCommand is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.writePriority = writePriority"]]], "result-type": "normal"}, "137": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_NotEq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 73, in runTest\n    self.assertFalse(self.handler.autopart.encrypted)\nAttributeError: 'F25Handler' object has no attribute 'autopart'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -182,7 +182,7 @@", "         for (cmdName, cmdClass) in list(cMap.items()):", "             cmdObj = None", "             for (_key, val) in list(self.commands.items()):", "-                if (val.__class__.__name__ == cmdClass.__name__):", "+                if (val.__class__.__name__ != cmdClass.__name__):", "                     cmdObj = val", "                     break", "             if (cmdObj is None):"]]], "result-type": "normal"}, "79": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithNotEq", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 67, in runTest\n    self.assertIsNotNone(self.handler.commands[cmd])\nAssertionError: unexpectedly None\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -222,7 +222,7 @@", "         'Set all entries in the commands dict to None, except the ones in\\n           the lst.  All other commands will not be processed.\\n        '", "         self._writeOrder = {}", "         for (key, _val) in list(self.commands.items()):", "-            if (key not in lst):", "+            if (key != lst):", "                 self.commands[key] = None", " ", "     def hasCommand(self, cmd):"]]], "result-type": "normal"}, "136": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping != {}) or (dataMapping is None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "115": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": 4.7303299999999995, "result-type": "timeout"}, "237": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithLt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 765, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 214, in handle\n    callable_obj(*args, **kwargs)\n  File \"pykickstart.base\", line 442, in dispatcher\nTypeError: unorderable types: str() < dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -205,7 +205,7 @@", "     def dispatcher(self, args, lineno):", "         'Call the appropriate KickstartCommand handler for the current line\\n           in the kickstart file.  A handler for the current command should\\n           be registered, though a handler of None is not an error.  Returns\\n           the data object returned by KickstartCommand.parse.\\n\\n           args    -- A list of arguments to the current command\\n           lineno  -- The line number in the file, for error reporting\\n        '", "         cmd = args[0]", "-        if (cmd not in self.commands):", "+        if (cmd < self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "         elif (self.commands[cmd] is not None):", "             self.commands[cmd].currentCmd = cmd"]]], "result-type": "normal"}, "201": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Gt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 5, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGt", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 399, in _registerCommands\nTypeError: unorderable types: NoneType() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -185,7 +185,7 @@", "                 if (val.__class__.__name__ == cmdClass.__name__):", "                     cmdObj = val", "                     break", "-            if (cmdObj is None):", "+            if (cmdObj > None):", "                 cmdObj = cmdClass()", "                 self._setCommand(cmdObj)", "             self.commands[cmdName] = cmdObj"]]], "result-type": "normal"}, "159": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -248,7 +248,7 @@", "     def __call__(self, *args, **kwargs):", "         'Set multiple attributes on a subclass of BaseData at once via\\n           keyword arguments.  Valid attributes are anything specified in a\\n           subclass, but unknown attributes will be ignored.\\n        '", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key > self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "154": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 72, in runTest\n    self.handler.dispatcher([\"autopart\", \"--encrypted\", \"--passphrase\", \"something\"], 1)\n  File \"pykickstart.base\", line 444, in dispatcher\nTypeError: unorderable types: NoneType() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -207,7 +207,7 @@", "         cmd = args[0]", "         if (cmd not in self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "-        elif (self.commands[cmd] is not None):", "+        elif (self.commands[cmd] >= None):", "             self.commands[cmd].currentCmd = cmd", "             self.commands[cmd].currentLine = self.currentLine", "             self.commands[cmd].lineno = lineno"]]], "result-type": "normal"}, "169": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 358, in _setCommand\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -158,7 +158,7 @@", "             if (not six.PY3):", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "-        if (cmdObj.writePriority is not None):", "+        if (cmdObj.writePriority in None):", "             if (cmdObj.writePriority in self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:"]]], "result-type": "normal"}, "152": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -69,7 +69,7 @@", "     def set_to_obj(self, namespace, obj):", "         \"Sets the contents of the namespace object (an instance of argparse.Namespace\\n           returned by parse_arguments) as attributes on the provided object obj.  It's\\n           useful to call this from KickstartCommand subclasses that handle lists\\n           of objects (like partitions, network devices, etc.) and need to populate\\n           a Data object.\\n        \"", "         for (key, val) in vars(namespace).items():", "-            if (val is not None):", "+            if (val >= None):", "                 setattr(obj, key, val)", " ", "     def _setToObj(self, namespace, obj):"]]], "result-type": "normal"}, "264": {"module-name": "pykickstart.base", "op-name": "replace_Gt_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": 4.7303299999999995, "result-type": "timeout"}, "42": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 358, in _setCommand\nTypeError: unorderable types: int() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -158,7 +158,7 @@", "             if (not six.PY3):", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "-        if (cmdObj.writePriority is not None):", "+        if (cmdObj.writePriority > None):", "             if (cmdObj.writePriority in self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:"]]], "result-type": "normal"}, "253": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_In", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIn", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 69, in runTest\n    self.assertIsNone(self.handler.commands[cmd])\nAssertionError: <pykickstart.commands.method.F19_Method object at 0x7f04654d6a58> is not None\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -222,7 +222,7 @@", "         'Set all entries in the commands dict to None, except the ones in\\n           the lst.  All other commands will not be processed.\\n        '", "         self._writeOrder = {}", "         for (key, _val) in list(self.commands.items()):", "-            if (key not in lst):", "+            if (key in lst):", "                 self.commands[key] = None", " ", "     def hasCommand(self, cmd):"]]], "result-type": "normal"}, "180": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 72, in runTest\n    self.handler.dispatcher([\"autopart\", \"--encrypted\", \"--passphrase\", \"something\"], 1)\n  File \"pykickstart.base\", line 444, in dispatcher\nTypeError: unorderable types: NoneType() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -207,7 +207,7 @@", "         cmd = args[0]", "         if (cmd not in self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "-        elif (self.commands[cmd] is not None):", "+        elif (self.commands[cmd] <= None):", "             self.commands[cmd].currentCmd = cmd", "             self.commands[cmd].currentLine = self.currentLine", "             self.commands[cmd].lineno = lineno"]]], "result-type": "normal"}, "142": {"module-name": "pykickstart.base", "op-name": "replace_In_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 360, in _setCommand\nKeyError: 0\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -159,7 +159,7 @@", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "         if (cmdObj.writePriority is not None):", "-            if (cmdObj.writePriority in self._writeOrder):", "+            if (cmdObj.writePriority not in self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]"]]], "result-type": "normal"}, "145": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 30, in runTest\n    self.handler.autopart(autopart=True, encrypted=True, passphrase=\"something\")\n  File \"pykickstart.base\", line 114, in __call__\nTypeError: unorderable types: str() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -31,7 +31,7 @@", "         'Set multiple attributes on a subclass of KickstartCommand at once\\n           via keyword arguments.  Valid attributes are anything specified in\\n           a subclass, but unknown attributes will be ignored.\\n        '", "         self.seen = True", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key < self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "191": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLtE", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 366, in _registerCommands\nTypeError: unorderable types: NoneType() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping == {}) or (mapping <= None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "135": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping != {}) or (mapping is None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "45": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/keyboard.py\", line 66, in __init__\n    KickstartCommand.__init__(self, writePriority, *args, **kwargs)  # pylint: disable=non-parent-init-called\n  File \"pykickstart.base\", line 83, in __init__\nTypeError: unorderable types: type() >= type()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -15,7 +15,7 @@", " ", "     def __init__(self, writePriority=0, *args, **kwargs):", "         \"Create a new KickstartCommand instance.  This method must be\\n           provided by all subclasses, but subclasses must call\\n           KickstartCommand.__init__ first.  Instance attributes:\\n\\n           currentCmd    -- The name of the command in the input file that\\n                            caused this handler to be run.\\n           currentLine   -- The current unprocessed line from the input file\\n                            that caused this handler to be run.\\n           handler       -- A reference to the BaseHandler subclass this\\n                            command is contained withing.  This is needed to\\n                            allow referencing of Data objects.\\n           lineno        -- The current line number in the input file.\\n           seen          -- If this command was ever used in the kickstart file,\\n                            this attribute will be set to True.  This allows\\n                            for differentiating commands that were omitted\\n                            from those that default to unset.\\n           writePriority -- An integer specifying when this command should be\\n                            printed when iterating over all commands' __str__\\n                            methods.  The higher the number, the later this\\n                            command will be written.  All commands with the\\n                            same priority will be written alphabetically.\\n        \"", "-        if (self.__class__ is KickstartCommand):", "+        if (self.__class__ >= KickstartCommand):", "             raise TypeError('KickstartCommand is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.writePriority = writePriority"]]], "result-type": "normal"}, "128": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithNotEq", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -141,7 +141,7 @@", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):", "                 lst[i] = obj", "                 return", "-            elif (obj.__class__.__name__ < lst[i].__class__.__name__):", "+            elif (obj.__class__.__name__ != lst[i].__class__.__name__):", "                 break", "         if (i >= length):", "             lst.append(obj)"]]], "result-type": "normal"}, "25": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 366, in _registerCommands\nTypeError: unorderable types: NoneType() < dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping < {}) or (mapping is None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "120": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -15,7 +15,7 @@", " ", "     def __init__(self, writePriority=0, *args, **kwargs):", "         \"Create a new KickstartCommand instance.  This method must be\\n           provided by all subclasses, but subclasses must call\\n           KickstartCommand.__init__ first.  Instance attributes:\\n\\n           currentCmd    -- The name of the command in the input file that\\n                            caused this handler to be run.\\n           currentLine   -- The current unprocessed line from the input file\\n                            that caused this handler to be run.\\n           handler       -- A reference to the BaseHandler subclass this\\n                            command is contained withing.  This is needed to\\n                            allow referencing of Data objects.\\n           lineno        -- The current line number in the input file.\\n           seen          -- If this command was ever used in the kickstart file,\\n                            this attribute will be set to True.  This allows\\n                            for differentiating commands that were omitted\\n                            from those that default to unset.\\n           writePriority -- An integer specifying when this command should be\\n                            printed when iterating over all commands' __str__\\n                            methods.  The higher the number, the later this\\n                            command will be written.  All commands with the\\n                            same priority will be written alphabetically.\\n        \"", "-        if (self.__class__ is KickstartCommand):", "+        if (self.__class__ == KickstartCommand):", "             raise TypeError('KickstartCommand is an abstract class.')", "         KickstartObject.__init__(self, *args, **kwargs)", "         self.writePriority = writePriority"]]], "result-type": "normal"}, "96": {"module-name": "pykickstart.base", "op-name": "replace_In_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -248,7 +248,7 @@", "     def __call__(self, *args, **kwargs):", "         'Set multiple attributes on a subclass of BaseData at once via\\n           keyword arguments.  Valid attributes are anything specified in a\\n           subclass, but unknown attributes will be ignored.\\n        '", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key >= self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}, "76": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 73, in runTest\n    self.assertFalse(self.handler.autopart.encrypted)\nAttributeError: 'F25Handler' object has no attribute 'autopart'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -182,7 +182,7 @@", "         for (cmdName, cmdClass) in list(cMap.items()):", "             cmdObj = None", "             for (_key, val) in list(self.commands.items()):", "-                if (val.__class__.__name__ == cmdClass.__name__):", "+                if (val.__class__.__name__ >= cmdClass.__name__):", "                     cmdObj = val", "                     break", "             if (cmdObj is None):"]]], "result-type": "normal"}, "84": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithGtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 765, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 214, in handle\n    callable_obj(*args, **kwargs)\n  File \"pykickstart.base\", line 442, in dispatcher\nTypeError: unorderable types: str() >= dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -205,7 +205,7 @@", "     def dispatcher(self, args, lineno):", "         'Call the appropriate KickstartCommand handler for the current line\\n           in the kickstart file.  A handler for the current command should\\n           be registered, though a handler of None is not an error.  Returns\\n           the data object returned by KickstartCommand.parse.\\n\\n           args    -- A list of arguments to the current command\\n           lineno  -- The line number in the file, for error reporting\\n        '", "         cmd = args[0]", "-        if (cmd not in self.commands):", "+        if (cmd >= self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "         elif (self.commands[cmd] is not None):", "             self.commands[cmd].currentCmd = cmd"]]], "result-type": "normal"}, "46": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py\", line 108, in __init__\n    DeprecatedCommand.__init__(self)\n  File \"pykickstart.base\", line 195, in __init__\nTypeError: unorderable types: type() >= type()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -80,7 +80,7 @@", "     \"Specify that a command is deprecated and no longer has any function.\\n       Any command that is deprecated should be subclassed from this class,\\n       only specifying an __init__ method that calls the superclass's __init__.\\n       This is an abstract class.\\n    \"", " ", "     def __init__(self, writePriority=None, *args, **kwargs):", "-        if (self.__class__ is DeprecatedCommand):", "+        if (self.__class__ >= DeprecatedCommand):", "             raise TypeError('DeprecatedCommand is an abstract class.')", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", " "]]], "result-type": "normal"}, "60": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithIsNot", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -141,7 +141,7 @@", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):", "                 lst[i] = obj", "                 return", "-            elif (obj.__class__.__name__ < lst[i].__class__.__name__):", "+            elif (obj.__class__.__name__ is not lst[i].__class__.__name__):", "                 break", "         if (i >= length):", "             lst.append(obj)"]]], "result-type": "normal"}, "131": {"module-name": "pykickstart.base", "op-name": "replace_Lt_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Lt_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithNotIn", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -141,7 +141,7 @@", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):", "                 lst[i] = obj", "                 return", "-            elif (obj.__class__.__name__ < lst[i].__class__.__name__):", "+            elif (obj.__class__.__name__ not in lst[i].__class__.__name__):", "                 break", "         if (i >= length):", "             lst.append(obj)"]]], "result-type": "normal"}, "64": {"module-name": "pykickstart.base", "op-name": "replace_Gt_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -136,7 +136,7 @@", "         length = len(lst)", "         i = 0", "         while (i < length):", "-            if (obj.__class__.__name__ > lst[i].__class__.__name__):", "+            if (obj.__class__.__name__ != lst[i].__class__.__name__):", "                 i += 1", "             elif (obj.__class__.__name__ == lst[i].__class__.__name__):", "                 lst[i] = obj"]]], "result-type": "normal"}, "21": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIsNot", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 40, in runTest\n    self.handler.resetCommand(\"autopart\")\n  File \"pykickstart.base\", line 422, in resetCommand\nKeyError\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -195,7 +195,7 @@", " ", "     def resetCommand(self, cmdName):", "         \"Given the name of a command that's already been instantiated, create\\n           a new instance of it that will take the place of the existing\\n           instance.  This is equivalent to quickly blanking out all the\\n           attributes that were previously set.\\n\\n           This method raises a KeyError if cmdName is invalid.\\n        \"", "-        if (cmdName not in self.commands):", "+        if (cmdName is not self.commands):", "             raise KeyError", "         cmdObj = self.commands[cmdName].__class__()", "         self._setCommand(cmdObj)"]]], "result-type": "normal"}, "231": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 73, in runTest\n    self.assertFalse(self.handler.autopart.encrypted)\nAttributeError: 'F25Handler' object has no attribute 'autopart'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -182,7 +182,7 @@", "         for (cmdName, cmdClass) in list(cMap.items()):", "             cmdObj = None", "             for (_key, val) in list(self.commands.items()):", "-                if (val.__class__.__name__ == cmdClass.__name__):", "+                if (val.__class__.__name__ <= cmdClass.__name__):", "                     cmdObj = val", "                     break", "             if (cmdObj is None):"]]], "result-type": "normal"}, "20": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithLtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 64, in runTest\n    self.handler.maskAllExcept(lst)\n  File \"pykickstart.base\", line 472, in maskAllExcept\nTypeError: unorderable types: str() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -222,7 +222,7 @@", "         'Set all entries in the commands dict to None, except the ones in\\n           the lst.  All other commands will not be processed.\\n        '", "         self._writeOrder = {}", "         for (key, _val) in list(self.commands.items()):", "-            if (key not in lst):", "+            if (key <= lst):", "                 self.commands[key] = None", " ", "     def hasCommand(self, cmd):"]]], "result-type": "normal"}, "200": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Gt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 4, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGt", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 372, in _registerCommands\nTypeError: unorderable types: NoneType() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping == {}) or (dataMapping > None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "219": {"module-name": "pykickstart.base", "op-name": "replace_NotEq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotEq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 73, in runTest\n    self.assertFalse(self.handler.autopart.encrypted)\nAttributeError: 'F25Handler' object has no attribute 'autopart'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -149,7 +149,7 @@", "             lst.insert(i, obj)", " ", "     def _setCommand(self, cmdObj):", "-        if (cmdObj.__class__.__name__.find('_') != (- 1)):", "+        if (cmdObj.__class__.__name__.find('_') is (- 1)):", "             name = cmdObj.__class__.__name__.split('_', 1)[1]", "             if (not six.PY3):", "                 name = unicode(name)"]]], "result-type": "normal"}, "177": {"module-name": "pykickstart.base", "op-name": "break_continue_replacement", "command": ["cosmic-ray", "worker", "pykickstart.base", "break_continue_replacement", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": 396, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -184,7 +184,7 @@", "             for (_key, val) in list(self.commands.items()):", "                 if (val.__class__.__name__ == cmdClass.__name__):", "                     cmdObj = val", "-                    break", "+                    continue", "             if (cmdObj is None):", "                 cmdObj = cmdClass()", "                 self._setCommand(cmdObj)"]]], "result-type": "normal"}, "183": {"module-name": "pykickstart.base", "op-name": "replace_GtE_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_GtE_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -143,7 +143,7 @@", "                 return", "             elif (obj.__class__.__name__ < lst[i].__class__.__name__):", "                 break", "-        if (i >= length):", "+        if (i == length):", "             lst.append(obj)", "         else:", "             lst.insert(i, obj)"]]], "result-type": "normal"}, "116": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -165,7 +165,7 @@", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]", " ", "     def _registerCommands(self, mapping=None, dataMapping=None, commandUpdates=None, dataUpdates=None):", "-        if ((mapping == {}) or (mapping is None)):", "+        if ((mapping not in {}) or (mapping is None)):", "             from pykickstart.handlers.control import commandMap", "             cMap = commandMap[self.version]", "         else:"]]], "result-type": "normal"}, "165": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_NotIn", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 4, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotIn", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 372, in _registerCommands\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping == {}) or (dataMapping not in None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "244": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 358, in _setCommand\nTypeError: unorderable types: int() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -158,7 +158,7 @@", "             if (not six.PY3):", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "-        if (cmdObj.writePriority is not None):", "+        if (cmdObj.writePriority < None):", "             if (cmdObj.writePriority in self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:"]]], "result-type": "normal"}, "148": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -138,7 +138,7 @@", "         while (i < length):", "             if (obj.__class__.__name__ > lst[i].__class__.__name__):", "                 i += 1", "-            elif (obj.__class__.__name__ == lst[i].__class__.__name__):", "+            elif (obj.__class__.__name__ is lst[i].__class__.__name__):", "                 lst[i] = obj", "                 return", "             elif (obj.__class__.__name__ < lst[i].__class__.__name__):"]]], "result-type": "normal"}, "36": {"module-name": "pykickstart.base", "op-name": "replace_In_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 428, in __init__\n    F19_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 403, in __init__\n    F18_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 309, in __init__\n    F17_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 276, in __init__\n    F15_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 234, in __init__\n    F14_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 185, in __init__\n    FC4_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 148, in __init__\n    FC3_Bootloader.__init__(self, writePriority, *args, **kwargs)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py\", line 33, in __init__\n    KickstartCommand.__init__(self, writePriority, *args, **kwargs)\n  File \"pykickstart.base\", line 102, in __init__\nKeyError: 'linear'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -24,7 +24,7 @@", "         self.handler = None", "         self.lineno = 0", "         self.seen = False", "-        for arg in (kw for kw in self.removedKeywords if (kw in kwargs)):", "+        for arg in (kw for kw in self.removedKeywords if (kw != kwargs)):", "             kwargs.pop(arg)", " ", "     def __call__(self, *args, **kwargs):"]]], "result-type": "normal"}, "250": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -214,7 +214,7 @@", "             self.commands[cmd].seen = True", "             obj = self.commands[cmd].parse(args[1:])", "             lst = self.commands[cmd].dataList()", "-            if (isinstance(obj, BaseData) and (lst is not None)):", "+            if (isinstance(obj, BaseData) and (lst not in None)):", "                 lst.append(obj)", "             return obj", " "]]], "result-type": "normal"}, "102": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_IsNot", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 5, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIsNot", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 405, in _registerCommands\nAttributeError: 'NoneType' object has no attribute 'handler'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -185,7 +185,7 @@", "                 if (val.__class__.__name__ == cmdClass.__name__):", "                     cmdObj = val", "                     break", "-            if (cmdObj is None):", "+            if (cmdObj is not None):", "                 cmdObj = cmdClass()", "                 self._setCommand(cmdObj)", "             self.commands[cmdName] = cmdObj"]]], "result-type": "normal"}, "89": {"module-name": "pykickstart.base", "op-name": "replace_IsNot_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_IsNot_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -214,7 +214,7 @@", "             self.commands[cmd].seen = True", "             obj = self.commands[cmd].parse(args[1:])", "             lst = self.commands[cmd].dataList()", "-            if (isinstance(obj, BaseData) and (lst is not None)):", "+            if (isinstance(obj, BaseData) and (lst is None)):", "                 lst.append(obj)", "             return obj", " "]]], "result-type": "normal"}, "162": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py\", line 108, in __init__\n    DeprecatedCommand.__init__(self)\n  File \"pykickstart.base\", line 195, in __init__\nTypeError: argument of type 'type' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -80,7 +80,7 @@", "     \"Specify that a command is deprecated and no longer has any function.\\n       Any command that is deprecated should be subclassed from this class,\\n       only specifying an __init__ method that calls the superclass's __init__.\\n       This is an abstract class.\\n    \"", " ", "     def __init__(self, writePriority=None, *args, **kwargs):", "-        if (self.__class__ is DeprecatedCommand):", "+        if (self.__class__ not in DeprecatedCommand):", "             raise TypeError('DeprecatedCommand is an abstract class.')", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", " "]]], "result-type": "normal"}, "238": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithLt", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 64, in runTest\n    self.handler.maskAllExcept(lst)\n  File \"pykickstart.base\", line 472, in maskAllExcept\nTypeError: unorderable types: str() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -222,7 +222,7 @@", "         'Set all entries in the commands dict to None, except the ones in\\n           the lst.  All other commands will not be processed.\\n        '", "         self._writeOrder = {}", "         for (key, _val) in list(self.commands.items()):", "-            if (key not in lst):", "+            if (key < lst):", "                 self.commands[key] = None", " ", "     def hasCommand(self, cmd):"]]], "result-type": "normal"}, "67": {"module-name": "pykickstart.base", "op-name": "replace_Eq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Eq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 372, in _registerCommands\nTypeError: unorderable types: NoneType() > dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -170,7 +170,7 @@", "             cMap = commandMap[self.version]", "         else:", "             cMap = mapping", "-        if ((dataMapping == {}) or (dataMapping is None)):", "+        if ((dataMapping > {}) or (dataMapping is None)):", "             from pykickstart.handlers.control import dataMap", "             dMap = dataMap[self.version]", "         else:"]]], "result-type": "normal"}, "19": {"module-name": "pykickstart.base", "op-name": "replace_NotIn_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_NotIn_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithLtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 765, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 214, in handle\n    callable_obj(*args, **kwargs)\n  File \"pykickstart.base\", line 442, in dispatcher\nTypeError: unorderable types: str() <= dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -205,7 +205,7 @@", "     def dispatcher(self, args, lineno):", "         'Call the appropriate KickstartCommand handler for the current line\\n           in the kickstart file.  A handler for the current command should\\n           be registered, though a handler of None is not an error.  Returns\\n           the data object returned by KickstartCommand.parse.\\n\\n           args    -- A list of arguments to the current command\\n           lineno  -- The line number in the file, for error reporting\\n        '", "         cmd = args[0]", "-        if (cmd not in self.commands):", "+        if (cmd <= self.commands):", "             raise KickstartParseError(formatErrorMsg(lineno, msg=(_('Unknown command: %s') % cmd)))", "         elif (self.commands[cmd] is not None):", "             self.commands[cmd].currentCmd = cmd"]]], "result-type": "normal"}, "53": {"module-name": "pykickstart.base", "op-name": "replace_Is_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_Is_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 400, in _registerCommands\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py\", line 108, in __init__\n    DeprecatedCommand.__init__(self)\n  File \"pykickstart.base\", line 195, in __init__\nTypeError: unorderable types: type() < type()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -80,7 +80,7 @@", "     \"Specify that a command is deprecated and no longer has any function.\\n       Any command that is deprecated should be subclassed from this class,\\n       only specifying an __init__ method that calls the superclass's __init__.\\n       This is an abstract class.\\n    \"", " ", "     def __init__(self, writePriority=None, *args, **kwargs):", "-        if (self.__class__ is DeprecatedCommand):", "+        if (self.__class__ < DeprecatedCommand):", "             raise TypeError('DeprecatedCommand is an abstract class.')", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", " "]]], "result-type": "normal"}, "146": {"module-name": "pykickstart.base", "op-name": "replace_In_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 2, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/base.py\", line 50, in runTest\n    self.assertRaises(KickstartParseError, self.handler.dispatcher, [\"fakecommand\"], 1)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 51, in handler\n    self._handler = makeVersion(self.version)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/version.py\", line 217, in makeVersion\n    return cl()\n  File \"pykickstart.base\", line 290, in __init__\n  File \"pykickstart.base\", line 401, in _registerCommands\n  File \"pykickstart.base\", line 359, in _setCommand\nTypeError: unorderable types: int() < dict()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -159,7 +159,7 @@", "                 name = unicode(name)", "         setattr(self, name.lower(), cmdObj)", "         if (cmdObj.writePriority is not None):", "-            if (cmdObj.writePriority in self._writeOrder):", "+            if (cmdObj.writePriority < self._writeOrder):", "                 self._insertSorted(self._writeOrder[cmdObj.writePriority], cmdObj)", "             else:", "                 self._writeOrder[cmdObj.writePriority] = [cmdObj]"]]], "result-type": "normal"}, "39": {"module-name": "pykickstart.base", "op-name": "replace_In_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.base", "replace_In_with_NotEq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/base.py"], "occurrence": 3, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/base.py", "@@ -248,7 +248,7 @@", "     def __call__(self, *args, **kwargs):", "         'Set multiple attributes on a subclass of BaseData at once via\\n           keyword arguments.  Valid attributes are anything specified in a\\n           subclass, but unknown attributes will be ignored.\\n        '", "         for (key, val) in list(kwargs.items()):", "-            if (key in self.removedAttrs):", "+            if (key != self.removedAttrs):", "                 continue", "             if hasattr(self, key):", "                 setattr(self, key, val)"]]], "result-type": "normal"}}, "_default": {}}