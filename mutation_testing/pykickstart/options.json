{"work-parameters": {"1": {"timeout": 3.2035799999999997, "test-runner": "nose", "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"]}}, "work-items": {"25": {"op-name": "replace_LtE_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_LtE_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithGt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -81,7 +81,7 @@", "             return (action.introduced and (action.introduced > self.version))", " ", "         def usedRemoved(action):", "-            return (action.removed and (action.removed <= self.version))", "+            return (action.removed and (action.removed > self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "         if ((option_tuple is None) or (option_tuple[0] is None)):", "             return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "173": {"op-name": "boolean_replacer", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "boolean_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 221, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -128,7 +128,7 @@", "             if deprecated:", "                 _help += ('\\n\\n    .. versiondeprecated:: %s' % version)", "             kwargs['help'] = _help", "-        notest = kwargs.pop('notest', False)", "+        notest = kwargs.pop('notest', True)", "         removed = kwargs.pop('removed', None)", "         action = ArgumentParser.add_argument(self, *args, **kwargs)", "         action.deprecated = deprecated"]]], "result-type": "normal", "occurrence": 5}, "139": {"op-name": "number_replacer", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 86, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -32,7 +32,7 @@", "         text = super(self.__class__, self)._format_action(action)", "         parts = text.strip().split('\\n')", "         new_parts = []", "-        new_parts.append(('\\n``%s``\\n' % parts[0].strip()))", "+        new_parts.append(('\\n``%s``\\n' % parts[1].strip()))", "         for p in parts[1:]:", "             if p:", "                 new_parts.append(('    %s' % p.lstrip()))"]]], "result-type": "normal", "occurrence": 0}, "109": {"op-name": "replace_Is_with_In", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple in None) or (option_tuple[0] is None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 0}, "90": {"op-name": "replace_Is_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLt", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple is None) or (option_tuple[0] < None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 1}, "38": {"op-name": "replace_Is_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple <= None) or (option_tuple[0] is None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 0}, "43": {"op-name": "replace_Is_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple > None) or (option_tuple[0] is None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 0}, "131": {"op-name": "replace_In_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_NotEq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -140,7 +140,7 @@", "     def remove_argument(self, arg, **kwargs):", "         candidate = None", "         for action in self._actions:", "-            if (arg in action.option_strings):", "+            if (arg != action.option_strings):", "                 candidate = action", "                 break", "         if candidate:"]]], "result-type": "normal", "occurrence": 3}, "65": {"op-name": "break_continue_replacement", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "break_continue_replacement", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 200, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -112,7 +112,7 @@", "             for arg in args:", "                 if (arg in action.option_strings):", "                     candidate = action", "-                    break", "+                    continue", "         if candidate:", "             if deprecated:", "                 _help = (candidate.help or '')"]]], "result-type": "normal", "occurrence": 0}, "100": {"op-name": "replace_IsNot_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -52,7 +52,7 @@", " class ExtendConstAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) != None):", "             setattr(namespace, self.dest, (self.const + values))", "         else:", "             setattr(namespace, self.dest, self.const)"]]], "result-type": "normal", "occurrence": 2}, "68": {"op-name": "replace_In_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 16, in runTest\n    self.assertFalse(ksboolean(\"OFF\"))\n  File \"pykickstart.options\", line 66, in ksboolean\nargparse.ArgumentTypeError: invalid boolean value: 'OFF'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -15,7 +15,7 @@", "     try:", "         if (value.lower() in ('on', 'yes', 'true', '1')):", "             return True", "-        elif (value.lower() in ('off', 'no', 'false', '0')):", "+        elif (value.lower() == ('off', 'no', 'false', '0')):", "             return False", "         else:", "             raise ArgumentTypeError((_('invalid boolean value: %r') % value))"]]], "result-type": "normal", "occurrence": 1}, "147": {"op-name": "replace_IsNot_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -39,7 +39,7 @@", "         return self._join_parts(new_parts)", " ", "     def _join_parts(self, part_strings):", "-        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part is not SUPPRESS))])", "+        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part <= SUPPRESS))])", " ", " class ExtendAction(Action):", " "]]], "result-type": "normal", "occurrence": 0}, "128": {"op-name": "replace_In_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 16, in runTest\n    self.assertFalse(ksboolean(\"OFF\"))\nAssertionError: True is not false\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -13,7 +13,7 @@", " ", " def ksboolean(value):", "     try:", "-        if (value.lower() in ('on', 'yes', 'true', '1')):", "+        if (value.lower() != ('on', 'yes', 'true', '1')):", "             return True", "         elif (value.lower() in ('off', 'no', 'false', '0')):", "             return False"]]], "result-type": "normal", "occurrence": 0}, "34": {"op-name": "replace_IsNot_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -39,7 +39,7 @@", "         return self._join_parts(new_parts)", " ", "     def _join_parts(self, part_strings):", "-        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part is not SUPPRESS))])", "+        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part < SUPPRESS))])", " ", " class ExtendAction(Action):", " "]]], "result-type": "normal", "occurrence": 0}, "145": {"op-name": "number_replacer", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "number_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 181, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 6}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -96,7 +96,7 @@", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "         elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "-            mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "+            mapping = {'lineno': self.lineno, 'option': action.option_strings[1]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple", " "]]], "result-type": "normal", "occurrence": 6}, "162": {"op-name": "replace_Gt_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -78,7 +78,7 @@", "     def _parse_optional(self, arg_string):", " ", "         def usedTooNew(action):", "-            return (action.introduced and (action.introduced > self.version))", "+            return (action.introduced and (action.introduced <= self.version))", " ", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))"]]], "result-type": "normal", "occurrence": 0}, "51": {"op-name": "replace_In_with_IsNot", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_IsNot", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -140,7 +140,7 @@", "     def remove_argument(self, arg, **kwargs):", "         candidate = None", "         for action in self._actions:", "-            if (arg in action.option_strings):", "+            if (arg is not action.option_strings):", "                 candidate = action", "                 break", "         if candidate:"]]], "result-type": "normal", "occurrence": 3}, "32": {"op-name": "replace_IsNot_with_In", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -52,7 +52,7 @@", " class ExtendConstAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) in None):", "             setattr(namespace, self.dest, (self.const + values))", "         else:", "             setattr(namespace, self.dest, self.const)"]]], "result-type": "normal", "occurrence": 2}, "172": {"op-name": "boolean_replacer", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "boolean_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 188, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -102,7 +102,7 @@", " ", "     def add_argument(self, *args, **kwargs):", "         introduced = kwargs.pop('introduced', None)", "-        deprecated = kwargs.pop('deprecated', False)", "+        deprecated = kwargs.pop('deprecated', True)", "         if deprecated:", "             version = versionToLongString(deprecated)", "         else:"]]], "result-type": "normal", "occurrence": 4}, "168": {"op-name": "boolean_replacer", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 62, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 8, in runTest\n    self.assertTrue(ksboolean(\"ON\"))\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -14,7 +14,7 @@", " def ksboolean(value):", "     try:", "         if (value.lower() in ('on', 'yes', 'true', '1')):", "-            return True", "+            return False", "         elif (value.lower() in ('off', 'no', 'false', '0')):", "             return False", "         else:"]]], "result-type": "normal", "occurrence": 0}, "117": {"op-name": "replace_IsNot_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -44,7 +44,7 @@", " class ExtendAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) >= None):", "             setattr(namespace, self.dest, (getattr(namespace, self.dest) + values))", "         else:", "             setattr(namespace, self.dest, values)"]]], "result-type": "normal", "occurrence": 1}, "116": {"op-name": "replace_IsNot_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -39,7 +39,7 @@", "         return self._join_parts(new_parts)", " ", "     def _join_parts(self, part_strings):", "-        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part is not SUPPRESS))])", "+        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part >= SUPPRESS))])", " ", " class ExtendAction(Action):", " "]]], "result-type": "normal", "occurrence": 0}, "62": {"op-name": "replace_Is_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotEq", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple is None) or (option_tuple[0] != None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 1}, "41": {"op-name": "replace_LtE_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_LtE_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithNotIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -81,7 +81,7 @@", "             return (action.introduced and (action.introduced > self.version))", " ", "         def usedRemoved(action):", "-            return (action.removed and (action.removed <= self.version))", "+            return (action.removed and (action.removed not in self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "         if ((option_tuple is None) or (option_tuple[0] is None)):", "             return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "85": {"op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -91,7 +91,7 @@", "             self.error((_('The %(option)s option was introduced in version %(intro)s, but you are using kickstart syntax version %(version)s.') % mapping))", "         elif usedRemoved(action):", "             mapping = {'option': action.option_strings[0], 'removed': versionToString(action.removed), 'version': versionToString(self.version)}", "-            if (action.removed == self.version):", "+            if (action.removed != self.version):", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))"]]], "result-type": "normal", "occurrence": 0}, "171": {"op-name": "boolean_replacer", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 180, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is False) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 3}, "107": {"op-name": "replace_LtE_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_LtE_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithNotEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -81,7 +81,7 @@", "             return (action.introduced and (action.introduced > self.version))", " ", "         def usedRemoved(action):", "-            return (action.removed and (action.removed <= self.version))", "+            return (action.removed and (action.removed != self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "         if ((option_tuple is None) or (option_tuple[0] is None)):", "             return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "89": {"op-name": "replace_Is_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple < None) or (option_tuple[0] is None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 0}, "158": {"op-name": "replace_In_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -140,7 +140,7 @@", "     def remove_argument(self, arg, **kwargs):", "         candidate = None", "         for action in self._actions:", "-            if (arg in action.option_strings):", "+            if (arg >= action.option_strings):", "                 candidate = action", "                 break", "         if candidate:"]]], "result-type": "normal", "occurrence": 3}, "11": {"op-name": "replace_In_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Is", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -160,7 +160,7 @@", "         pass", " ", "     def parse_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' is kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 4}, "177": {"op-name": "replace_Gt_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -78,7 +78,7 @@", "     def _parse_optional(self, arg_string):", " ", "         def usedTooNew(action):", "-            return (action.introduced and (action.introduced > self.version))", "+            return (action.introduced and (action.introduced not in self.version))", " ", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))"]]], "result-type": "normal", "occurrence": 0}, "39": {"op-name": "replace_Is_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLtE", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple is None) or (option_tuple[0] <= None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 1}, "86": {"op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) != int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 1}, "82": {"op-name": "replace_In_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -140,7 +140,7 @@", "     def remove_argument(self, arg, **kwargs):", "         candidate = None", "         for action in self._actions:", "-            if (arg in action.option_strings):", "+            if (arg <= action.option_strings):", "                 candidate = action", "                 break", "         if candidate:"]]], "result-type": "normal", "occurrence": 3}, "53": {"op-name": "replace_In_with_IsNot", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_IsNot", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -165,7 +165,7 @@", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " ", "     def parse_known_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' is not kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_known_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 5}, "70": {"op-name": "replace_In_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Eq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -140,7 +140,7 @@", "     def remove_argument(self, arg, **kwargs):", "         candidate = None", "         for action in self._actions:", "-            if (arg in action.option_strings):", "+            if (arg == action.option_strings):", "                 candidate = action", "                 break", "         if candidate:"]]], "result-type": "normal", "occurrence": 3}, "103": {"op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -91,7 +91,7 @@", "             self.error((_('The %(option)s option was introduced in version %(intro)s, but you are using kickstart syntax version %(version)s.') % mapping))", "         elif usedRemoved(action):", "             mapping = {'option': action.option_strings[0], 'removed': versionToString(action.removed), 'version': versionToString(self.version)}", "-            if (action.removed == self.version):", "+            if (action.removed < self.version):", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))"]]], "result-type": "normal", "occurrence": 0}, "78": {"op-name": "replace_GtE_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_GtE_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version not in action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "156": {"op-name": "replace_In_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 16, in runTest\n    self.assertFalse(ksboolean(\"OFF\"))\n  File \"pykickstart.options\", line 63, in ksboolean\nTypeError: unorderable types: str() >= tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -15,7 +15,7 @@", "     try:", "         if (value.lower() in ('on', 'yes', 'true', '1')):", "             return True", "-        elif (value.lower() in ('off', 'no', 'false', '0')):", "+        elif (value.lower() >= ('off', 'no', 'false', '0')):", "             return False", "         else:", "             raise ArgumentTypeError((_('invalid boolean value: %r') % value))"]]], "result-type": "normal", "occurrence": 1}, "12": {"op-name": "replace_In_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Is", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -165,7 +165,7 @@", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " ", "     def parse_known_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' is kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_known_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 5}, "40": {"op-name": "replace_Is_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLtE", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated <= True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 2}, "138": {"op-name": "replace_Is_with_IsNot", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIsNot", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is not True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 2}, "164": {"op-name": "replace_IsNot_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -39,7 +39,7 @@", "         return self._join_parts(new_parts)", " ", "     def _join_parts(self, part_strings):", "-        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part is not SUPPRESS))])", "+        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part > SUPPRESS))])", " ", " class ExtendAction(Action):", " "]]], "result-type": "normal", "occurrence": 0}, "125": {"op-name": "replace_In_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Gt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -165,7 +165,7 @@", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " ", "     def parse_known_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' > kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_known_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 5}, "141": {"op-name": "number_replacer", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 163, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple is None) or (option_tuple[1] is None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 2}, "80": {"op-name": "replace_In_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 16, in runTest\n    self.assertFalse(ksboolean(\"OFF\"))\n  File \"pykickstart.options\", line 63, in ksboolean\nTypeError: unorderable types: str() <= tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -15,7 +15,7 @@", "     try:", "         if (value.lower() in ('on', 'yes', 'true', '1')):", "             return True", "-        elif (value.lower() in ('off', 'no', 'false', '0')):", "+        elif (value.lower() <= ('off', 'no', 'false', '0')):", "             return False", "         else:", "             raise ArgumentTypeError((_('invalid boolean value: %r') % value))"]]], "result-type": "normal", "occurrence": 1}, "113": {"op-name": "replace_Gt_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -78,7 +78,7 @@", "     def _parse_optional(self, arg_string):", " ", "         def usedTooNew(action):", "-            return (action.introduced and (action.introduced > self.version))", "+            return (action.introduced and (action.introduced >= self.version))", " ", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))"]]], "result-type": "normal", "occurrence": 0}, "6": {"op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) >= int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 1}, "5": {"op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -91,7 +91,7 @@", "             self.error((_('The %(option)s option was introduced in version %(intro)s, but you are using kickstart syntax version %(version)s.') % mapping))", "         elif usedRemoved(action):", "             mapping = {'option': action.option_strings[0], 'removed': versionToString(action.removed), 'version': versionToString(self.version)}", "-            if (action.removed == self.version):", "+            if (action.removed >= self.version):", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))"]]], "result-type": "normal", "occurrence": 0}, "76": {"op-name": "replace_Is_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithEq", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated == True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 2}, "148": {"op-name": "replace_IsNot_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -44,7 +44,7 @@", " class ExtendAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) <= None):", "             setattr(namespace, self.dest, (getattr(namespace, self.dest) + values))", "         else:", "             setattr(namespace, self.dest, values)"]]], "result-type": "normal", "occurrence": 1}, "154": {"op-name": "replace_IsNot_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -151,7 +151,7 @@", "             self._option_string_actions.pop(arg)", " ", "     def error(self, message):", "-        if (self.lineno is not None):", "+        if (self.lineno is None):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))", "         else:", "             raise KickstartParseError(message)"]]], "result-type": "normal", "occurrence": 3}, "150": {"op-name": "replace_IsNot_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -151,7 +151,7 @@", "             self._option_string_actions.pop(arg)", " ", "     def error(self, message):", "-        if (self.lineno is not None):", "+        if (self.lineno <= None):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))", "         else:", "             raise KickstartParseError(message)"]]], "result-type": "normal", "occurrence": 3}, "44": {"op-name": "replace_Is_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGt", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple is None) or (option_tuple[0] > None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 1}, "13": {"op-name": "replace_GtE_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_GtE_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version < action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "29": {"op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) > int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 1}, "174": {"op-name": "replace_GtE_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_GtE_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version == action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "127": {"op-name": "replace_LtE_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_LtE_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithIs", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -81,7 +81,7 @@", "             return (action.introduced and (action.introduced > self.version))", " ", "         def usedRemoved(action):", "-            return (action.removed and (action.removed <= self.version))", "+            return (action.removed and (action.removed is self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "         if ((option_tuple is None) or (option_tuple[0] is None)):", "             return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "120": {"op-name": "replace_In_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 8, in runTest\n    self.assertTrue(ksboolean(\"ON\"))\n  File \"pykickstart.options\", line 61, in ksboolean\nTypeError: unorderable types: str() > tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -13,7 +13,7 @@", " ", " def ksboolean(value):", "     try:", "-        if (value.lower() in ('on', 'yes', 'true', '1')):", "+        if (value.lower() > ('on', 'yes', 'true', '1')):", "             return True", "         elif (value.lower() in ('off', 'no', 'false', '0')):", "             return False"]]], "result-type": "normal", "occurrence": 0}, "152": {"op-name": "replace_IsNot_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -44,7 +44,7 @@", " class ExtendAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) is None):", "             setattr(namespace, self.dest, (getattr(namespace, self.dest) + values))", "         else:", "             setattr(namespace, self.dest, values)"]]], "result-type": "normal", "occurrence": 1}, "31": {"op-name": "replace_IsNot_with_In", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -44,7 +44,7 @@", " class ExtendAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) in None):", "             setattr(namespace, self.dest, (getattr(namespace, self.dest) + values))", "         else:", "             setattr(namespace, self.dest, values)"]]], "result-type": "normal", "occurrence": 1}, "135": {"op-name": "replace_Eq_with_In", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) in int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 1}, "60": {"op-name": "replace_In_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Lt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -165,7 +165,7 @@", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " ", "     def parse_known_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' < kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_known_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 5}, "91": {"op-name": "replace_Is_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLt", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated < True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 2}, "105": {"op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -91,7 +91,7 @@", "             self.error((_('The %(option)s option was introduced in version %(intro)s, but you are using kickstart syntax version %(version)s.') % mapping))", "         elif usedRemoved(action):", "             mapping = {'option': action.option_strings[0], 'removed': versionToString(action.removed), 'version': versionToString(self.version)}", "-            if (action.removed == self.version):", "+            if (action.removed not in self.version):", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))"]]], "result-type": "normal", "occurrence": 0}, "119": {"op-name": "replace_IsNot_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -151,7 +151,7 @@", "             self._option_string_actions.pop(arg)", " ", "     def error(self, message):", "-        if (self.lineno is not None):", "+        if (self.lineno >= None):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))", "         else:", "             raise KickstartParseError(message)"]]], "result-type": "normal", "occurrence": 3}, "132": {"op-name": "replace_In_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_NotEq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -160,7 +160,7 @@", "         pass", " ", "     def parse_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' != kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 4}, "118": {"op-name": "replace_IsNot_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -52,7 +52,7 @@", " class ExtendConstAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) >= None):", "             setattr(namespace, self.dest, (self.const + values))", "         else:", "             setattr(namespace, self.dest, self.const)"]]], "result-type": "normal", "occurrence": 2}, "115": {"op-name": "replace_Eq_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) is int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 1}, "81": {"op-name": "replace_In_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -110,7 +110,7 @@", "         candidate = None", "         for action in self._actions:", "             for arg in args:", "-                if (arg in action.option_strings):", "+                if (arg <= action.option_strings):", "                     candidate = action", "                     break", "         if candidate:"]]], "result-type": "normal", "occurrence": 2}, "101": {"op-name": "replace_IsNot_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_NotEq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -151,7 +151,7 @@", "             self._option_string_actions.pop(arg)", " ", "     def error(self, message):", "-        if (self.lineno is not None):", "+        if (self.lineno != None):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))", "         else:", "             raise KickstartParseError(message)"]]], "result-type": "normal", "occurrence": 3}, "66": {"op-name": "break_continue_replacement", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "break_continue_replacement", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 237, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -142,7 +142,7 @@", "         for action in self._actions:", "             if (arg in action.option_strings):", "                 candidate = action", "-                break", "+                continue", "         if candidate:", "             if (not candidate.help):", "                 candidate.help = ''"]]], "result-type": "normal", "occurrence": 1}, "137": {"op-name": "replace_Is_with_IsNot", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIsNot", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple is None) or (option_tuple[0] is not None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 1}, "57": {"op-name": "replace_In_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -110,7 +110,7 @@", "         candidate = None", "         for action in self._actions:", "             for arg in args:", "-                if (arg in action.option_strings):", "+                if (arg < action.option_strings):", "                     candidate = action", "                     break", "         if candidate:"]]], "result-type": "normal", "occurrence": 2}, "36": {"op-name": "replace_IsNot_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -52,7 +52,7 @@", " class ExtendConstAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) < None):", "             setattr(namespace, self.dest, (self.const + values))", "         else:", "             setattr(namespace, self.dest, self.const)"]]], "result-type": "normal", "occurrence": 2}, "14": {"op-name": "replace_Is_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple not in None) or (option_tuple[0] is None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 0}, "169": {"op-name": "boolean_replacer", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 64, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 16, in runTest\n    self.assertFalse(ksboolean(\"OFF\"))\nAssertionError: True is not false\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -16,7 +16,7 @@", "         if (value.lower() in ('on', 'yes', 'true', '1')):", "             return True", "         elif (value.lower() in ('off', 'no', 'false', '0')):", "-            return False", "+            return True", "         else:", "             raise ArgumentTypeError((_('invalid boolean value: %r') % value))", "     except AttributeError:"]]], "result-type": "normal", "occurrence": 1}, "165": {"op-name": "replace_IsNot_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -44,7 +44,7 @@", " class ExtendAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) > None):", "             setattr(namespace, self.dest, (getattr(namespace, self.dest) + values))", "         else:", "             setattr(namespace, self.dest, values)"]]], "result-type": "normal", "occurrence": 1}, "166": {"op-name": "replace_IsNot_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -52,7 +52,7 @@", " class ExtendConstAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) > None):", "             setattr(namespace, self.dest, (self.const + values))", "         else:", "             setattr(namespace, self.dest, self.const)"]]], "result-type": "normal", "occurrence": 2}, "151": {"op-name": "replace_IsNot_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -39,7 +39,7 @@", "         return self._join_parts(new_parts)", " ", "     def _join_parts(self, part_strings):", "-        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part is not SUPPRESS))])", "+        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part is SUPPRESS))])", " ", " class ExtendAction(Action):", " "]]], "result-type": "normal", "occurrence": 0}, "123": {"op-name": "replace_In_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -140,7 +140,7 @@", "     def remove_argument(self, arg, **kwargs):", "         candidate = None", "         for action in self._actions:", "-            if (arg in action.option_strings):", "+            if (arg > action.option_strings):", "                 candidate = action", "                 break", "         if candidate:"]]], "result-type": "normal", "occurrence": 3}, "42": {"op-name": "replace_LtE_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_LtE_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -81,7 +81,7 @@", "             return (action.introduced and (action.introduced > self.version))", " ", "         def usedRemoved(action):", "-            return (action.removed and (action.removed <= self.version))", "+            return (action.removed and (action.removed == self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "         if ((option_tuple is None) or (option_tuple[0] is None)):", "             return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "97": {"op-name": "replace_In_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_NotIn", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -165,7 +165,7 @@", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " ", "     def parse_known_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' not in kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_known_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 5}, "111": {"op-name": "replace_Is_with_In", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIn", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated in True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 2}, "3": {"op-name": "replace_IsNot_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -52,7 +52,7 @@", " class ExtendConstAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) not in None):", "             setattr(namespace, self.dest, (self.const + values))", "         else:", "             setattr(namespace, self.dest, self.const)"]]], "result-type": "normal", "occurrence": 2}, "7": {"op-name": "replace_In_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 8, in runTest\n    self.assertTrue(ksboolean(\"ON\"))\n  File \"pykickstart.options\", line 66, in ksboolean\nargparse.ArgumentTypeError: invalid boolean value: 'ON'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -13,7 +13,7 @@", " ", " def ksboolean(value):", "     try:", "-        if (value.lower() in ('on', 'yes', 'true', '1')):", "+        if (value.lower() is ('on', 'yes', 'true', '1')):", "             return True", "         elif (value.lower() in ('off', 'no', 'false', '0')):", "             return False"]]], "result-type": "normal", "occurrence": 0}, "149": {"op-name": "replace_IsNot_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -52,7 +52,7 @@", " class ExtendConstAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) <= None):", "             setattr(namespace, self.dest, (self.const + values))", "         else:", "             setattr(namespace, self.dest, self.const)"]]], "result-type": "normal", "occurrence": 2}, "47": {"op-name": "replace_GtE_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_GtE_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithLtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version <= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "140": {"op-name": "number_replacer", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 87, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -33,7 +33,7 @@", "         parts = text.strip().split('\\n')", "         new_parts = []", "         new_parts.append(('\\n``%s``\\n' % parts[0].strip()))", "-        for p in parts[1:]:", "+        for p in parts[2:]:", "             if p:", "                 new_parts.append(('    %s' % p.lstrip()))", "         return self._join_parts(new_parts)"]]], "result-type": "normal", "occurrence": 1}, "146": {"op-name": "number_replacer", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "number_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 253, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 7}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -156,7 +156,7 @@", "         else:", "             raise KickstartParseError(message)", " ", "-    def exit(self, status=0, message=None):", "+    def exit(self, status=1, message=None):", "         pass", " ", "     def parse_args(self, *args, **kwargs):"]]], "result-type": "normal", "occurrence": 7}, "75": {"op-name": "replace_Is_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithEq", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple is None) or (option_tuple[0] == None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 1}, "134": {"op-name": "replace_Eq_with_In", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -91,7 +91,7 @@", "             self.error((_('The %(option)s option was introduced in version %(intro)s, but you are using kickstart syntax version %(version)s.') % mapping))", "         elif usedRemoved(action):", "             mapping = {'option': action.option_strings[0], 'removed': versionToString(action.removed), 'version': versionToString(self.version)}", "-            if (action.removed == self.version):", "+            if (action.removed in self.version):", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))"]]], "result-type": "normal", "occurrence": 0}, "54": {"op-name": "replace_GtE_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_GtE_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithGt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version > action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "22": {"op-name": "replace_Is_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple >= None) or (option_tuple[0] is None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 0}, "74": {"op-name": "replace_Is_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple == None) or (option_tuple[0] is None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 0}, "124": {"op-name": "replace_In_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Gt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -160,7 +160,7 @@", "         pass", " ", "     def parse_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' > kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 4}, "178": {"op-name": "replace_Gt_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -78,7 +78,7 @@", "     def _parse_optional(self, arg_string):", " ", "         def usedTooNew(action):", "-            return (action.introduced and (action.introduced > self.version))", "+            return (action.introduced and (action.introduced == self.version))", " ", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))"]]], "result-type": "normal", "occurrence": 0}, "121": {"op-name": "replace_In_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 16, in runTest\n    self.assertFalse(ksboolean(\"OFF\"))\n  File \"pykickstart.options\", line 63, in ksboolean\nTypeError: unorderable types: str() > tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -15,7 +15,7 @@", "     try:", "         if (value.lower() in ('on', 'yes', 'true', '1')):", "             return True", "-        elif (value.lower() in ('off', 'no', 'false', '0')):", "+        elif (value.lower() > ('off', 'no', 'false', '0')):", "             return False", "         else:", "             raise ArgumentTypeError((_('invalid boolean value: %r') % value))"]]], "result-type": "normal", "occurrence": 1}, "18": {"op-name": "replace_IsNot_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -39,7 +39,7 @@", "         return self._join_parts(new_parts)", " ", "     def _join_parts(self, part_strings):", "-        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part is not SUPPRESS))])", "+        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part == SUPPRESS))])", " ", " class ExtendAction(Action):", " "]]], "result-type": "normal", "occurrence": 0}, "83": {"op-name": "replace_In_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_LtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -160,7 +160,7 @@", "         pass", " ", "     def parse_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' <= kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 4}, "94": {"op-name": "replace_In_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -110,7 +110,7 @@", "         candidate = None", "         for action in self._actions:", "             for arg in args:", "-                if (arg in action.option_strings):", "+                if (arg not in action.option_strings):", "                     candidate = action", "                     break", "         if candidate:"]]], "result-type": "normal", "occurrence": 2}, "87": {"op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -91,7 +91,7 @@", "             self.error((_('The %(option)s option was introduced in version %(intro)s, but you are using kickstart syntax version %(version)s.') % mapping))", "         elif usedRemoved(action):", "             mapping = {'option': action.option_strings[0], 'removed': versionToString(action.removed), 'version': versionToString(self.version)}", "-            if (action.removed == self.version):", "+            if (action.removed is not self.version):", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))"]]], "result-type": "normal", "occurrence": 0}, "49": {"op-name": "replace_In_with_IsNot", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 26, in runTest\n    self.assertRaises(ArgumentTypeError, ksboolean, \"YesSir\")\nAssertionError: ArgumentTypeError not raised by ksboolean\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -15,7 +15,7 @@", "     try:", "         if (value.lower() in ('on', 'yes', 'true', '1')):", "             return True", "-        elif (value.lower() in ('off', 'no', 'false', '0')):", "+        elif (value.lower() is not ('off', 'no', 'false', '0')):", "             return False", "         else:", "             raise ArgumentTypeError((_('invalid boolean value: %r') % value))"]]], "result-type": "normal", "occurrence": 1}, "155": {"op-name": "replace_In_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 8, in runTest\n    self.assertTrue(ksboolean(\"ON\"))\n  File \"pykickstart.options\", line 61, in ksboolean\nTypeError: unorderable types: str() >= tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -13,7 +13,7 @@", " ", " def ksboolean(value):", "     try:", "-        if (value.lower() in ('on', 'yes', 'true', '1')):", "+        if (value.lower() >= ('on', 'yes', 'true', '1')):", "             return True", "         elif (value.lower() in ('off', 'no', 'false', '0')):", "             return False"]]], "result-type": "normal", "occurrence": 0}, "133": {"op-name": "replace_In_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_NotEq", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -165,7 +165,7 @@", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " ", "     def parse_known_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' != kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_known_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 5}, "1": {"op-name": "replace_IsNot_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -39,7 +39,7 @@", "         return self._join_parts(new_parts)", " ", "     def _join_parts(self, part_strings):", "-        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part is not SUPPRESS))])", "+        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part not in SUPPRESS))])", " ", " class ExtendAction(Action):", " "]]], "result-type": "normal", "occurrence": 0}, "17": {"op-name": "replace_GtE_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_GtE_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIs", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version is action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "110": {"op-name": "replace_Is_with_In", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIn", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple is None) or (option_tuple[0] in None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 1}, "4": {"op-name": "replace_IsNot_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -151,7 +151,7 @@", "             self._option_string_actions.pop(arg)", " ", "     def error(self, message):", "-        if (self.lineno is not None):", "+        if (self.lineno not in None):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))", "         else:", "             raise KickstartParseError(message)"]]], "result-type": "normal", "occurrence": 3}, "10": {"op-name": "replace_In_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -140,7 +140,7 @@", "     def remove_argument(self, arg, **kwargs):", "         candidate = None", "         for action in self._actions:", "-            if (arg in action.option_strings):", "+            if (arg is action.option_strings):", "                 candidate = action", "                 break", "         if candidate:"]]], "result-type": "normal", "occurrence": 3}, "61": {"op-name": "replace_Is_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple != None) or (option_tuple[0] is None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 0}, "35": {"op-name": "replace_IsNot_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -44,7 +44,7 @@", " class ExtendAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) < None):", "             setattr(namespace, self.dest, (getattr(namespace, self.dest) + values))", "         else:", "             setattr(namespace, self.dest, values)"]]], "result-type": "normal", "occurrence": 1}, "157": {"op-name": "replace_In_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -110,7 +110,7 @@", "         candidate = None", "         for action in self._actions:", "             for arg in args:", "-                if (arg in action.option_strings):", "+                if (arg >= action.option_strings):", "                     candidate = action", "                     break", "         if candidate:"]]], "result-type": "normal", "occurrence": 2}, "2": {"op-name": "replace_IsNot_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -44,7 +44,7 @@", " class ExtendAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) not in None):", "             setattr(namespace, self.dest, (getattr(namespace, self.dest) + values))", "         else:", "             setattr(namespace, self.dest, values)"]]], "result-type": "normal", "occurrence": 1}, "8": {"op-name": "replace_In_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 16, in runTest\n    self.assertFalse(ksboolean(\"OFF\"))\n  File \"pykickstart.options\", line 66, in ksboolean\nargparse.ArgumentTypeError: invalid boolean value: 'OFF'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -15,7 +15,7 @@", "     try:", "         if (value.lower() in ('on', 'yes', 'true', '1')):", "             return True", "-        elif (value.lower() in ('off', 'no', 'false', '0')):", "+        elif (value.lower() is ('off', 'no', 'false', '0')):", "             return False", "         else:", "             raise ArgumentTypeError((_('invalid boolean value: %r') % value))"]]], "result-type": "normal", "occurrence": 1}, "58": {"op-name": "replace_In_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -140,7 +140,7 @@", "     def remove_argument(self, arg, **kwargs):", "         candidate = None", "         for action in self._actions:", "-            if (arg in action.option_strings):", "+            if (arg < action.option_strings):", "                 candidate = action", "                 break", "         if candidate:"]]], "result-type": "normal", "occurrence": 3}, "48": {"op-name": "replace_In_with_IsNot", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 16, in runTest\n    self.assertFalse(ksboolean(\"OFF\"))\nAssertionError: True is not false\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -13,7 +13,7 @@", " ", " def ksboolean(value):", "     try:", "-        if (value.lower() in ('on', 'yes', 'true', '1')):", "+        if (value.lower() is not ('on', 'yes', 'true', '1')):", "             return True", "         elif (value.lower() in ('off', 'no', 'false', '0')):", "             return False"]]], "result-type": "normal", "occurrence": 0}, "153": {"op-name": "replace_IsNot_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -52,7 +52,7 @@", " class ExtendConstAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) is None):", "             setattr(namespace, self.dest, (self.const + values))", "         else:", "             setattr(namespace, self.dest, self.const)"]]], "result-type": "normal", "occurrence": 2}, "104": {"op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) < int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 1}, "122": {"op-name": "replace_In_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -110,7 +110,7 @@", "         candidate = None", "         for action in self._actions:", "             for arg in args:", "-                if (arg in action.option_strings):", "+                if (arg > action.option_strings):", "                     candidate = action", "                     break", "         if candidate:"]]], "result-type": "normal", "occurrence": 2}, "95": {"op-name": "replace_In_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -140,7 +140,7 @@", "     def remove_argument(self, arg, **kwargs):", "         candidate = None", "         for action in self._actions:", "-            if (arg in action.option_strings):", "+            if (arg not in action.option_strings):", "                 candidate = action", "                 break", "         if candidate:"]]], "result-type": "normal", "occurrence": 3}, "26": {"op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -91,7 +91,7 @@", "             self.error((_('The %(option)s option was introduced in version %(intro)s, but you are using kickstart syntax version %(version)s.') % mapping))", "         elif usedRemoved(action):", "             mapping = {'option': action.option_strings[0], 'removed': versionToString(action.removed), 'version': versionToString(self.version)}", "-            if (action.removed == self.version):", "+            if (action.removed <= self.version):", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))"]]], "result-type": "normal", "occurrence": 0}, "37": {"op-name": "replace_IsNot_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -151,7 +151,7 @@", "             self._option_string_actions.pop(arg)", " ", "     def error(self, message):", "-        if (self.lineno is not None):", "+        if (self.lineno < None):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))", "         else:", "             raise KickstartParseError(message)"]]], "result-type": "normal", "occurrence": 3}, "144": {"op-name": "number_replacer", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "number_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 173, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -90,7 +90,7 @@", "             mapping = {'option': action.option_strings[0], 'intro': versionToString(action.introduced), 'version': versionToString(self.version)}", "             self.error((_('The %(option)s option was introduced in version %(intro)s, but you are using kickstart syntax version %(version)s.') % mapping))", "         elif usedRemoved(action):", "-            mapping = {'option': action.option_strings[0], 'removed': versionToString(action.removed), 'version': versionToString(self.version)}", "+            mapping = {'option': action.option_strings[1], 'removed': versionToString(action.removed), 'version': versionToString(self.version)}", "             if (action.removed == self.version):", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:"]]], "result-type": "normal", "occurrence": 5}, "136": {"op-name": "replace_Is_with_IsNot", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIsNot", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple is not None) or (option_tuple[0] is None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 0}, "24": {"op-name": "replace_Is_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGtE", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated >= True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 2}, "21": {"op-name": "replace_IsNot_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Eq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -151,7 +151,7 @@", "             self._option_string_actions.pop(arg)", " ", "     def error(self, message):", "-        if (self.lineno is not None):", "+        if (self.lineno == None):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))", "         else:", "             raise KickstartParseError(message)"]]], "result-type": "normal", "occurrence": 3}, "98": {"op-name": "replace_IsNot_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -39,7 +39,7 @@", "         return self._join_parts(new_parts)", " ", "     def _join_parts(self, part_strings):", "-        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part is not SUPPRESS))])", "+        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part != SUPPRESS))])", " ", " class ExtendAction(Action):", " "]]], "result-type": "normal", "occurrence": 0}, "102": {"op-name": "replace_GtE_with_IsNot", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_GtE_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIsNot", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version is not action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "56": {"op-name": "replace_In_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 16, in runTest\n    self.assertFalse(ksboolean(\"OFF\"))\n  File \"pykickstart.options\", line 63, in ksboolean\nTypeError: unorderable types: str() < tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -15,7 +15,7 @@", "     try:", "         if (value.lower() in ('on', 'yes', 'true', '1')):", "             return True", "-        elif (value.lower() in ('off', 'no', 'false', '0')):", "+        elif (value.lower() < ('off', 'no', 'false', '0')):", "             return False", "         else:", "             raise ArgumentTypeError((_('invalid boolean value: %r') % value))"]]], "result-type": "normal", "occurrence": 1}, "59": {"op-name": "replace_In_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Lt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -160,7 +160,7 @@", "         pass", " ", "     def parse_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' < kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 4}, "99": {"op-name": "replace_IsNot_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -44,7 +44,7 @@", " class ExtendAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) != None):", "             setattr(namespace, self.dest, (getattr(namespace, self.dest) + values))", "         else:", "             setattr(namespace, self.dest, values)"]]], "result-type": "normal", "occurrence": 1}, "46": {"op-name": "replace_Gt_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -78,7 +78,7 @@", "     def _parse_optional(self, arg_string):", " ", "         def usedTooNew(action):", "-            return (action.introduced and (action.introduced > self.version))", "+            return (action.introduced and (action.introduced != self.version))", " ", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))"]]], "result-type": "normal", "occurrence": 0}, "69": {"op-name": "replace_In_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -110,7 +110,7 @@", "         candidate = None", "         for action in self._actions:", "             for arg in args:", "-                if (arg in action.option_strings):", "+                if (arg == action.option_strings):", "                     candidate = action", "                     break", "         if candidate:"]]], "result-type": "normal", "occurrence": 2}, "15": {"op-name": "replace_Is_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotIn", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple is None) or (option_tuple[0] not in None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 1}, "88": {"op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) is not int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 1}, "129": {"op-name": "replace_In_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 26, in runTest\n    self.assertRaises(ArgumentTypeError, ksboolean, \"YesSir\")\nAssertionError: ArgumentTypeError not raised by ksboolean\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -15,7 +15,7 @@", "     try:", "         if (value.lower() in ('on', 'yes', 'true', '1')):", "             return True", "-        elif (value.lower() in ('off', 'no', 'false', '0')):", "+        elif (value.lower() != ('off', 'no', 'false', '0')):", "             return False", "         else:", "             raise ArgumentTypeError((_('invalid boolean value: %r') % value))"]]], "result-type": "normal", "occurrence": 1}, "79": {"op-name": "replace_In_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 8, in runTest\n    self.assertTrue(ksboolean(\"ON\"))\n  File \"pykickstart.options\", line 61, in ksboolean\nTypeError: unorderable types: str() <= tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -13,7 +13,7 @@", " ", " def ksboolean(value):", "     try:", "-        if (value.lower() in ('on', 'yes', 'true', '1')):", "+        if (value.lower() <= ('on', 'yes', 'true', '1')):", "             return True", "         elif (value.lower() in ('off', 'no', 'false', '0')):", "             return False"]]], "result-type": "normal", "occurrence": 0}, "71": {"op-name": "replace_In_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Eq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -160,7 +160,7 @@", "         pass", " ", "     def parse_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' == kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 4}, "55": {"op-name": "replace_In_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 8, in runTest\n    self.assertTrue(ksboolean(\"ON\"))\n  File \"pykickstart.options\", line 61, in ksboolean\nTypeError: unorderable types: str() < tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -13,7 +13,7 @@", " ", " def ksboolean(value):", "     try:", "-        if (value.lower() in ('on', 'yes', 'true', '1')):", "+        if (value.lower() < ('on', 'yes', 'true', '1')):", "             return True", "         elif (value.lower() in ('off', 'no', 'false', '0')):", "             return False"]]], "result-type": "normal", "occurrence": 0}, "16": {"op-name": "replace_Is_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotIn", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated not in True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 2}, "63": {"op-name": "replace_Is_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotEq", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated != True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 2}, "33": {"op-name": "replace_IsNot_with_In", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -151,7 +151,7 @@", "             self._option_string_actions.pop(arg)", " ", "     def error(self, message):", "-        if (self.lineno is not None):", "+        if (self.lineno in None):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))", "         else:", "             raise KickstartParseError(message)"]]], "result-type": "normal", "occurrence": 3}, "159": {"op-name": "replace_In_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_GtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -160,7 +160,7 @@", "         pass", " ", "     def parse_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' >= kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 4}, "45": {"op-name": "replace_Is_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGt", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated > True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 2}, "30": {"op-name": "replace_IsNot_with_In", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -39,7 +39,7 @@", "         return self._join_parts(new_parts)", " ", "     def _join_parts(self, part_strings):", "-        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part is not SUPPRESS))])", "+        return '\\n'.join([part.rstrip(' ') for part in part_strings if (part and (part in SUPPRESS))])", " ", " class ExtendAction(Action):", " "]]], "result-type": "normal", "occurrence": 0}, "84": {"op-name": "replace_In_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_LtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -165,7 +165,7 @@", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " ", "     def parse_known_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' <= kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_known_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 5}, "77": {"op-name": "replace_GtE_with_In", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_GtE_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version in action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "72": {"op-name": "replace_In_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Eq", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -165,7 +165,7 @@", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " ", "     def parse_known_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' == kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_known_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 5}, "167": {"op-name": "replace_IsNot_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -151,7 +151,7 @@", "             self._option_string_actions.pop(arg)", " ", "     def error(self, message):", "-        if (self.lineno is not None):", "+        if (self.lineno > None):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))", "         else:", "             raise KickstartParseError(message)"]]], "result-type": "normal", "occurrence": 3}, "130": {"op-name": "replace_In_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -110,7 +110,7 @@", "         candidate = None", "         for action in self._actions:", "             for arg in args:", "-                if (arg in action.option_strings):", "+                if (arg != action.option_strings):", "                     candidate = action", "                     break", "         if candidate:"]]], "result-type": "normal", "occurrence": 2}, "143": {"op-name": "number_replacer", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 169, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -87,7 +87,7 @@", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):", "-            mapping = {'option': action.option_strings[0], 'intro': versionToString(action.introduced), 'version': versionToString(self.version)}", "+            mapping = {'option': action.option_strings[1], 'intro': versionToString(action.introduced), 'version': versionToString(self.version)}", "             self.error((_('The %(option)s option was introduced in version %(intro)s, but you are using kickstart syntax version %(version)s.') % mapping))", "         elif usedRemoved(action):", "             mapping = {'option': action.option_strings[0], 'removed': versionToString(action.removed), 'version': versionToString(self.version)}"]]], "result-type": "normal", "occurrence": 4}, "19": {"op-name": "replace_IsNot_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -44,7 +44,7 @@", " class ExtendAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) == None):", "             setattr(namespace, self.dest, (getattr(namespace, self.dest) + values))", "         else:", "             setattr(namespace, self.dest, values)"]]], "result-type": "normal", "occurrence": 1}, "92": {"op-name": "replace_In_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 8, in runTest\n    self.assertTrue(ksboolean(\"ON\"))\n  File \"pykickstart.options\", line 66, in ksboolean\nargparse.ArgumentTypeError: invalid boolean value: 'ON'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -13,7 +13,7 @@", " ", " def ksboolean(value):", "     try:", "-        if (value.lower() in ('on', 'yes', 'true', '1')):", "+        if (value.lower() not in ('on', 'yes', 'true', '1')):", "             return True", "         elif (value.lower() in ('off', 'no', 'false', '0')):", "             return False"]]], "result-type": "normal", "occurrence": 0}, "9": {"op-name": "replace_In_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -110,7 +110,7 @@", "         candidate = None", "         for action in self._actions:", "             for arg in args:", "-                if (arg in action.option_strings):", "+                if (arg is action.option_strings):", "                     candidate = action", "                     break", "         if candidate:"]]], "result-type": "normal", "occurrence": 2}, "20": {"op-name": "replace_IsNot_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_IsNot_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -52,7 +52,7 @@", " class ExtendConstAction(Action):", " ", "     def __call__(self, parser, namespace, values, option_string=None):", "-        if (getattr(namespace, self.dest, None) is not None):", "+        if (getattr(namespace, self.dest, None) == None):", "             setattr(namespace, self.dest, (self.const + values))", "         else:", "             setattr(namespace, self.dest, self.const)"]]], "result-type": "normal", "occurrence": 2}, "142": {"op-name": "number_replacer", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 166, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -85,7 +85,7 @@", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "         if ((option_tuple is None) or (option_tuple[0] is None)):", "             return option_tuple", "-        action = option_tuple[0]", "+        action = option_tuple[1]", "         if usedTooNew(action):", "             mapping = {'option': action.option_strings[0], 'intro': versionToString(action.introduced), 'version': versionToString(self.version)}", "             self.error((_('The %(option)s option was introduced in version %(intro)s, but you are using kickstart syntax version %(version)s.') % mapping))"]]], "result-type": "normal", "occurrence": 3}, "114": {"op-name": "replace_Eq_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -91,7 +91,7 @@", "             self.error((_('The %(option)s option was introduced in version %(intro)s, but you are using kickstart syntax version %(version)s.') % mapping))", "         elif usedRemoved(action):", "             mapping = {'option': action.option_strings[0], 'removed': versionToString(action.removed), 'version': versionToString(self.version)}", "-            if (action.removed == self.version):", "+            if (action.removed is self.version):", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))"]]], "result-type": "normal", "occurrence": 0}, "28": {"op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -91,7 +91,7 @@", "             self.error((_('The %(option)s option was introduced in version %(intro)s, but you are using kickstart syntax version %(version)s.') % mapping))", "         elif usedRemoved(action):", "             mapping = {'option': action.option_strings[0], 'removed': versionToString(action.removed), 'version': versionToString(self.version)}", "-            if (action.removed == self.version):", "+            if (action.removed > self.version):", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))"]]], "result-type": "normal", "occurrence": 0}, "50": {"op-name": "replace_In_with_IsNot", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -110,7 +110,7 @@", "         candidate = None", "         for action in self._actions:", "             for arg in args:", "-                if (arg in action.option_strings):", "+                if (arg is not action.option_strings):", "                     candidate = action", "                     break", "         if candidate:"]]], "result-type": "normal", "occurrence": 2}, "170": {"op-name": "boolean_replacer", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": 151, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -72,7 +72,7 @@", "         kwargs['description'] = textwrap.dedent(kwargs.pop('description'))", "         kwargs['epilog'] = textwrap.dedent(kwargs.pop('epilog', ''))", "         kwargs['prog'] = kwargs.pop('prog')", "-        ArgumentParser.__init__(self, *args, add_help=False, conflict_handler='resolve', formatter_class=KSHelpFormatter, **kwargs)", "+        ArgumentParser.__init__(self, *args, add_help=True, conflict_handler='resolve', formatter_class=KSHelpFormatter, **kwargs)", "         self.lineno = None", " ", "     def _parse_optional(self, arg_string):"]]], "result-type": "normal", "occurrence": 2}, "106": {"op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) not in int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 1}, "161": {"op-name": "replace_LtE_with_In", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_LtE_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -81,7 +81,7 @@", "             return (action.introduced and (action.introduced > self.version))", " ", "         def usedRemoved(action):", "-            return (action.removed and (action.removed <= self.version))", "+            return (action.removed and (action.removed in self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "         if ((option_tuple is None) or (option_tuple[0] is None)):", "             return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "160": {"op-name": "replace_In_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_GtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -165,7 +165,7 @@", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " ", "     def parse_known_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' >= kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_known_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 5}, "176": {"op-name": "replace_Gt_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -78,7 +78,7 @@", "     def _parse_optional(self, arg_string):", " ", "         def usedTooNew(action):", "-            return (action.introduced and (action.introduced > self.version))", "+            return (action.introduced and (action.introduced < self.version))", " ", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))"]]], "result-type": "normal", "occurrence": 0}, "93": {"op-name": "replace_In_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 16, in runTest\n    self.assertFalse(ksboolean(\"OFF\"))\n  File \"pykickstart.options\", line 66, in ksboolean\nargparse.ArgumentTypeError: invalid boolean value: 'OFF'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -15,7 +15,7 @@", "     try:", "         if (value.lower() in ('on', 'yes', 'true', '1')):", "             return True", "-        elif (value.lower() in ('off', 'no', 'false', '0')):", "+        elif (value.lower() not in ('off', 'no', 'false', '0')):", "             return False", "         else:", "             raise ArgumentTypeError((_('invalid boolean value: %r') % value))"]]], "result-type": "normal", "occurrence": 1}, "73": {"op-name": "replace_LtE_with_IsNot", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_LtE_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithIsNot", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -81,7 +81,7 @@", "             return (action.introduced and (action.introduced > self.version))", " ", "         def usedRemoved(action):", "-            return (action.removed and (action.removed <= self.version))", "+            return (action.removed and (action.removed is not self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "         if ((option_tuple is None) or (option_tuple[0] is None)):", "             return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "163": {"op-name": "replace_Gt_with_In", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -78,7 +78,7 @@", "     def _parse_optional(self, arg_string):", " ", "         def usedTooNew(action):", "-            return (action.introduced and (action.introduced > self.version))", "+            return (action.introduced and (action.introduced in self.version))", " ", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))"]]], "result-type": "normal", "occurrence": 0}, "175": {"op-name": "replace_Gt_with_Is", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -78,7 +78,7 @@", "     def _parse_optional(self, arg_string):", " ", "         def usedTooNew(action):", "-            return (action.introduced and (action.introduced > self.version))", "+            return (action.introduced and (action.introduced is self.version))", " ", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))"]]], "result-type": "normal", "occurrence": 0}, "23": {"op-name": "replace_Is_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Is_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGtE", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -83,7 +83,7 @@", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "-        if ((option_tuple is None) or (option_tuple[0] is None)):", "+        if ((option_tuple is None) or (option_tuple[0] >= None)):", "             return option_tuple", "         action = option_tuple[0]", "         if usedTooNew(action):"]]], "result-type": "normal", "occurrence": 1}, "64": {"op-name": "replace_Gt_with_IsNot", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -78,7 +78,7 @@", "     def _parse_optional(self, arg_string):", " ", "         def usedTooNew(action):", "-            return (action.introduced and (action.introduced > self.version))", "+            return (action.introduced and (action.introduced is not self.version))", " ", "         def usedRemoved(action):", "             return (action.removed and (action.removed <= self.version))"]]], "result-type": "normal", "occurrence": 0}, "126": {"op-name": "replace_GtE_with_NotEq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_GtE_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtEWithNotEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version != action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "52": {"op-name": "replace_In_with_IsNot", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_IsNot", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -160,7 +160,7 @@", "         pass", " ", "     def parse_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' is not kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 4}, "108": {"op-name": "replace_LtE_with_Lt", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_LtE_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithLt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -81,7 +81,7 @@", "             return (action.introduced and (action.introduced > self.version))", " ", "         def usedRemoved(action):", "-            return (action.removed and (action.removed <= self.version))", "+            return (action.removed and (action.removed < self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "         if ((option_tuple is None) or (option_tuple[0] is None)):", "             return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "67": {"op-name": "replace_In_with_Eq", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/options.py\", line 8, in runTest\n    self.assertTrue(ksboolean(\"ON\"))\n  File \"pykickstart.options\", line 66, in ksboolean\nargparse.ArgumentTypeError: invalid boolean value: 'ON'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -13,7 +13,7 @@", " ", " def ksboolean(value):", "     try:", "-        if (value.lower() in ('on', 'yes', 'true', '1')):", "+        if (value.lower() == ('on', 'yes', 'true', '1')):", "             return True", "         elif (value.lower() in ('off', 'no', 'false', '0')):", "             return False"]]], "result-type": "normal", "occurrence": 0}, "112": {"op-name": "replace_LtE_with_GtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_LtE_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtEWithGtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -81,7 +81,7 @@", "             return (action.introduced and (action.introduced > self.version))", " ", "         def usedRemoved(action):", "-            return (action.removed and (action.removed <= self.version))", "+            return (action.removed and (action.removed >= self.version))", "         option_tuple = ArgumentParser._parse_optional(self, arg_string)", "         if ((option_tuple is None) or (option_tuple[0] is None)):", "             return option_tuple"]]], "result-type": "normal", "occurrence": 0}, "96": {"op-name": "replace_In_with_NotIn", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_In_with_NotIn", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -160,7 +160,7 @@", "         pass", " ", "     def parse_args(self, *args, **kwargs):", "-        if ('lineno' in kwargs):", "+        if ('lineno' not in kwargs):", "             self.lineno = kwargs.pop('lineno')", "         return ArgumentParser.parse_args(self, *args, **kwargs)", " "]]], "result-type": "normal", "occurrence": 4}, "27": {"op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.options", "command": ["cosmic-ray", "worker", "pykickstart.options", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/options.py"], "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/options.py", "@@ -95,7 +95,7 @@", "                 self.error((_('The %(option)s option is no longer supported.') % mapping))", "             else:", "                 self.error((_('The %(option)s option was removed in version %(removed)s, but you are using kickstart syntax version %(version)s.') % mapping))", "-        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) == int) and (self.version >= action.deprecated))):", "+        elif ((action.deprecated is True) or (self.version and (type(action.deprecated) <= int) and (self.version >= action.deprecated))):", "             mapping = {'lineno': self.lineno, 'option': action.option_strings[0]}", "             warnings.warn((_('Ignoring deprecated option on line %(lineno)s:  The %(option)s option has been deprecated and no longer has any effect.  It may be removed from future releases, which will result in a fatal error from kickstart.  Please modify your kickstart file to remove this option.') % mapping), DeprecationWarning)", "         return option_tuple"]]], "result-type": "normal", "occurrence": 1}}, "_default": {}}