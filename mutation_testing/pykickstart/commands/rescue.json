{"work-items": {"4": {"command": ["cosmic-ray", "worker", "pykickstart.commands.rescue", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rescue.py"], "result-data": [{"line_number": 66, "occurrence": 3, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rescue.py\", line 29, in runTest\n    self.assert_parse(\"rescue\", \"rescue\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'rescue --nomount\\n' != 'rescue\\n'\n- rescue --nomount\n+ rescue\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rescue.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rescue.py", "@@ -29,7 +29,7 @@", " ", "     def _getParser(self):", "         op = KSOptionParser(prog='rescue', description=\"\\n                            Automatically enter the installer's rescue mode.\\n                            This gives you a chance to repair the system should\\n                            something catastrophic happen.\", epilog='\\n                            By default, the installer will find your system and\\n                            mount it in read-write mode, telling you where it has\\n                            performed this mount. You may optionally choose to\\n                            not mount anything or mount in read-only mode. Only\\n                            one of these two options may be given at any one\\n                            time.', version=F10)", "-        op.add_argument('--nomount', action='store_true', version=F10, default=False, help=\"\\n                        Don't mount the installed system.\")", "+        op.add_argument('--nomount', action='store_true', version=F10, default=True, help=\"\\n                        Don't mount the installed system.\")", "         op.add_argument('--romount', action='store_true', version=F10, default=False, help='\\n                        Mount the installed system in read-only mode.')", "         return op", " "]]], "occurrence": 3, "module-name": "pykickstart.commands.rescue", "result-type": "normal", "op-name": "boolean_replacer"}, "7": {"command": ["cosmic-ray", "worker", "pykickstart.commands.rescue", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rescue.py"], "result-data": [{"line_number": 31, "occurrence": 0, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rescue.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rescue.py", "@@ -9,7 +9,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.rescue = False"]]], "occurrence": 0, "module-name": "pykickstart.commands.rescue", "result-type": "normal", "op-name": "number_replacer"}, "1": {"command": ["cosmic-ray", "worker", "pykickstart.commands.rescue", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rescue.py"], "result-data": [{"line_number": 35, "occurrence": 0, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rescue.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rescue.py", "@@ -12,7 +12,7 @@", "     def __init__(self, writePriority=0, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "-        self.rescue = False", "+        self.rescue = True", "         self.nomount = kwargs.get('nomount', False)", "         self.romount = kwargs.get('romount', False)", " "]]], "occurrence": 0, "module-name": "pykickstart.commands.rescue", "result-type": "normal", "op-name": "boolean_replacer"}, "2": {"command": ["cosmic-ray", "worker", "pykickstart.commands.rescue", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rescue.py"], "result-data": [{"line_number": 36, "occurrence": 1, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rescue.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rescue.py", "@@ -13,7 +13,7 @@", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.rescue = False", "-        self.nomount = kwargs.get('nomount', False)", "+        self.nomount = kwargs.get('nomount', True)", "         self.romount = kwargs.get('romount', False)", " ", "     def __str__(self):"]]], "occurrence": 1, "module-name": "pykickstart.commands.rescue", "result-type": "normal", "op-name": "boolean_replacer"}, "3": {"command": ["cosmic-ray", "worker", "pykickstart.commands.rescue", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rescue.py"], "result-data": [{"line_number": 37, "occurrence": 2, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rescue.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rescue.py", "@@ -14,7 +14,7 @@", "         self.op = self._getParser()", "         self.rescue = False", "         self.nomount = kwargs.get('nomount', False)", "-        self.romount = kwargs.get('romount', False)", "+        self.romount = kwargs.get('romount', True)", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)"]]], "occurrence": 2, "module-name": "pykickstart.commands.rescue", "result-type": "normal", "op-name": "boolean_replacer"}, "6": {"command": ["cosmic-ray", "worker", "pykickstart.commands.rescue", "boolean_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rescue.py"], "result-data": [{"line_number": 80, "occurrence": 5, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rescue.py\", line 29, in runTest\n    self.assert_parse(\"rescue\", \"rescue\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'rescue\\n'\n+ rescue\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rescue.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rescue.py", "@@ -38,6 +38,6 @@", "         if (ns.nomount and ns.romount):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Only one of --nomount and --romount may be specified for rescue command.')))", "         self.set_to_self(ns)", "-        self.rescue = True", "+        self.rescue = False", "         return self", " "]]], "occurrence": 5, "module-name": "pykickstart.commands.rescue", "result-type": "normal", "op-name": "boolean_replacer"}, "5": {"command": ["cosmic-ray", "worker", "pykickstart.commands.rescue", "boolean_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rescue.py"], "result-data": [{"line_number": 69, "occurrence": 4, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rescue.py\", line 29, in runTest\n    self.assert_parse(\"rescue\", \"rescue\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'rescue --romount\\n' != 'rescue\\n'\n- rescue --romount\n+ rescue\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rescue.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rescue.py", "@@ -30,7 +30,7 @@", "     def _getParser(self):", "         op = KSOptionParser(prog='rescue', description=\"\\n                            Automatically enter the installer's rescue mode.\\n                            This gives you a chance to repair the system should\\n                            something catastrophic happen.\", epilog='\\n                            By default, the installer will find your system and\\n                            mount it in read-write mode, telling you where it has\\n                            performed this mount. You may optionally choose to\\n                            not mount anything or mount in read-only mode. Only\\n                            one of these two options may be given at any one\\n                            time.', version=F10)", "         op.add_argument('--nomount', action='store_true', version=F10, default=False, help=\"\\n                        Don't mount the installed system.\")", "-        op.add_argument('--romount', action='store_true', version=F10, default=False, help='\\n                        Mount the installed system in read-only mode.')", "+        op.add_argument('--romount', action='store_true', version=F10, default=True, help='\\n                        Mount the installed system in read-only mode.')", "         return op", " ", "     def parse(self, args):"]]], "occurrence": 4, "module-name": "pykickstart.commands.rescue", "result-type": "normal", "op-name": "boolean_replacer"}}, "work-parameters": {"1": {"timeout": 4.67253, "test-runner": "nose", "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rescue.py"]}}, "_default": {}}