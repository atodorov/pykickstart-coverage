{"work-items": {"23": {"op-name": "replace_NotEq_with_In", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(ns.timezone) != 1):", "+        if (len(ns.timezone) in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'timezone', 'options': extra}"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "17": {"op-name": "number_replacer", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 3, "line_number": 78}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 74, in runTest\n    self.assert_parse_error(\"timezone Eastern Central\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -36,7 +36,7 @@", "         self.set_to_self(ns)", "         if (len(ns.timezone) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) > 1):", "             mapping = {'command': 'timezone', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.timezone = ns.timezone[0]"]]], "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "3": {"op-name": "replace_Gt_with_NotIn", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -36,7 +36,7 @@", "         self.set_to_self(ns)", "         if (len(ns.timezone) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) not in 0):", "             mapping = {'command': 'timezone', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.timezone = ns.timezone[0]"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "26": {"op-name": "replace_Gt_with_LtE", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to timezone command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to timezone command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -36,7 +36,7 @@", "         self.set_to_self(ns)", "         if (len(ns.timezone) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) <= 0):", "             mapping = {'command': 'timezone', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.timezone = ns.timezone[0]"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "5": {"op-name": "boolean_replacer", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 0, "line_number": 35}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -12,7 +12,7 @@", "     def __init__(self, writePriority=0, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "-        self.isUtc = kwargs.get('isUtc', False)", "+        self.isUtc = kwargs.get('isUtc', True)", "         self.timezone = kwargs.get('timezone', '')", " ", "     def __str__(self):"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "1": {"op-name": "replace_NotEq_with_NotIn", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(ns.timezone) != 1):", "+        if (len(ns.timezone) not in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'timezone', 'options': extra}"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "4": {"op-name": "replace_Gt_with_Eq", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to timezone command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to timezone command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -36,7 +36,7 @@", "         self.set_to_self(ns)", "         if (len(ns.timezone) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) == 0):", "             mapping = {'command': 'timezone', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.timezone = ns.timezone[0]"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "7": {"op-name": "boolean_replacer", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 2, "line_number": 105}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 66, in runTest\n    \"timezone Europe/Prague --nontp\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'timezone Europe/Prague --isUtc --nontp\\n' != 'timezone Europe/Prague --nontp\\n'\n- timezone Europe/Prague --isUtc --nontp\n?                        --------\n+ timezone Europe/Prague --nontp\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -58,7 +58,7 @@", " ", "     def _getParser(self):", "         op = FC3_Timezone._getParser(self)", "-        op.add_argument('--utc', '--isUtc', dest='isUtc', action='store_true', default=False, version=FC6, help='\\n                        The ``--isUtc`` option was added.')", "+        op.add_argument('--utc', '--isUtc', dest='isUtc', action='store_true', default=True, version=FC6, help='\\n                        The ``--isUtc`` option was added.')", "         return op", " ", " class F18_Timezone(FC6_Timezone):"]]], "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "10": {"op-name": "replace_Gt_with_GtE", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to timezone command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to timezone command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -36,7 +36,7 @@", "         self.set_to_self(ns)", "         if (len(ns.timezone) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) >= 0):", "             mapping = {'command': 'timezone', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.timezone = ns.timezone[0]"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "14": {"op-name": "number_replacer", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 0, "line_number": 31}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -9,7 +9,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.isUtc = kwargs.get('isUtc', False)"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "16": {"op-name": "number_replacer", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 2, "line_number": 76}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the timezone command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the timezone command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(ns.timezone) != 1):", "+        if (len(ns.timezone) != 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'timezone', 'options': extra}"]]], "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "2": {"op-name": "replace_NotEq_with_Lt", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(ns.timezone) != 1):", "+        if (len(ns.timezone) < 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'timezone', 'options': extra}"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "24": {"op-name": "replace_Gt_with_NotEq", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -36,7 +36,7 @@", "         self.set_to_self(ns)", "         if (len(ns.timezone) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) != 0):", "             mapping = {'command': 'timezone', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.timezone = ns.timezone[0]"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "6": {"op-name": "boolean_replacer", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 1, "line_number": 57}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 28, in runTest\n    self.assert_parse(\"timezone Eastern\", \"timezone  Eastern\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'timezone --utc Eastern\\n' != 'timezone  Eastern\\n'\n- timezone --utc Eastern\n?          -----\n+ timezone  Eastern\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -27,7 +27,7 @@", " ", "     def _getParser(self):", "         op = KSOptionParser(prog='timezone', description='\\n                            This required command sets the system time zone to\\n                            which may be any of the time zones listed by\\n                            timeconfig.', version=FC3)", "-        op.add_argument('--utc', dest='isUtc', action='store_true', default=False, version=FC3, help='\\n                        If present, the system assumes the hardware clock is set\\n                        to UTC (Greenwich Mean) time.\\n\\n                       *To get the list of supported timezones, you can either\\n                        run this script:\\n                        http://vpodzime.fedorapeople.org/timezones_list.py or\\n                        look at this list:\\n                        http://vpodzime.fedorapeople.org/timezones_list.txt*\\n                        ')", "+        op.add_argument('--utc', dest='isUtc', action='store_true', default=True, version=FC3, help='\\n                        If present, the system assumes the hardware clock is set\\n                        to UTC (Greenwich Mean) time.\\n\\n                       *To get the list of supported timezones, you can either\\n                        run this script:\\n                        http://vpodzime.fedorapeople.org/timezones_list.py or\\n                        look at this list:\\n                        http://vpodzime.fedorapeople.org/timezones_list.txt*\\n                        ')", "         op.add_argument('timezone', metavar='<timezone>', nargs=1, version=FC3, help='\\n                        Timezone name, e.g. Europe/Sofia.')", "         return op", " "]]], "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "22": {"op-name": "replace_NotEq_with_Eq", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the timezone command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the timezone command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(ns.timezone) != 1):", "+        if (len(ns.timezone) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'timezone', 'options': extra}"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "13": {"op-name": "replace_Gt_with_IsNot", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -36,7 +36,7 @@", "         self.set_to_self(ns)", "         if (len(ns.timezone) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is not 0):", "             mapping = {'command': 'timezone', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.timezone = ns.timezone[0]"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "20": {"op-name": "replace_Gt_with_Lt", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 74, in runTest\n    self.assert_parse_error(\"timezone Eastern Central\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -36,7 +36,7 @@", "         self.set_to_self(ns)", "         if (len(ns.timezone) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) < 0):", "             mapping = {'command': 'timezone', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.timezone = ns.timezone[0]"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "28": {"op-name": "replace_NotEq_with_LtE", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the timezone command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the timezone command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(ns.timezone) != 1):", "+        if (len(ns.timezone) <= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'timezone', 'options': extra}"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "25": {"op-name": "replace_Gt_with_Is", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to timezone command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to timezone command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -36,7 +36,7 @@", "         self.set_to_self(ns)", "         if (len(ns.timezone) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is 0):", "             mapping = {'command': 'timezone', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.timezone = ns.timezone[0]"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "12": {"op-name": "replace_NotEq_with_Is", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the timezone command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the timezone command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(ns.timezone) != 1):", "+        if (len(ns.timezone) is 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'timezone', 'options': extra}"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "11": {"op-name": "replace_Gt_with_In", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -36,7 +36,7 @@", "         self.set_to_self(ns)", "         if (len(ns.timezone) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) in 0):", "             mapping = {'command': 'timezone', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.timezone = ns.timezone[0]"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "15": {"op-name": "number_replacer", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 1, "line_number": 67}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nthe following arguments are required: <timezone>\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nthe following arguments are required: <timezone>\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -28,7 +28,7 @@", "     def _getParser(self):", "         op = KSOptionParser(prog='timezone', description='\\n                            This required command sets the system time zone to\\n                            which may be any of the time zones listed by\\n                            timeconfig.', version=FC3)", "         op.add_argument('--utc', dest='isUtc', action='store_true', default=False, version=FC3, help='\\n                        If present, the system assumes the hardware clock is set\\n                        to UTC (Greenwich Mean) time.\\n\\n                       *To get the list of supported timezones, you can either\\n                        run this script:\\n                        http://vpodzime.fedorapeople.org/timezones_list.py or\\n                        look at this list:\\n                        http://vpodzime.fedorapeople.org/timezones_list.txt*\\n                        ')", "-        op.add_argument('timezone', metavar='<timezone>', nargs=1, version=FC3, help='\\n                        Timezone name, e.g. Europe/Sofia.')", "+        op.add_argument('timezone', metavar='<timezone>', nargs=2, version=FC3, help='\\n                        Timezone name, e.g. Europe/Sofia.')", "         return op", " ", "     def parse(self, args):"]]], "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "27": {"op-name": "replace_NotEq_with_Gt", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(ns.timezone) != 1):", "+        if (len(ns.timezone) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'timezone', 'options': extra}"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "8": {"op-name": "boolean_replacer", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 3, "line_number": 113}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -66,7 +66,7 @@", "     def __init__(self, writePriority=0, *args, **kwargs):", "         FC6_Timezone.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "-        self.nontp = kwargs.get('nontp', False)", "+        self.nontp = kwargs.get('nontp', True)", "         self.ntpservers = kwargs.get('ntpservers', set())", " ", "     def __str__(self):"]]], "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "9": {"op-name": "boolean_replacer", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 4, "line_number": 141}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 63, in runTest\n    self.assert_parse(\"timezone --isUtc Eastern\", \"timezone Eastern --isUtc\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'timezone Eastern --isUtc --nontp\\n' != 'timezone Eastern --isUtc\\n'\n- timezone Eastern --isUtc --nontp\n?                         --------\n+ timezone Eastern --isUtc\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -88,7 +88,7 @@", " ", "     def _getParser(self):", "         op = FC6_Timezone._getParser(self)", "-        op.add_argument('--nontp', action='store_true', default=False, version=F18, help='\\n                        Disable automatic starting of NTP service.\\n\\n                        ``--nontp`` and ``--ntpservers`` are mutually exclusive.\\n                        ')", "+        op.add_argument('--nontp', action='store_true', default=True, version=F18, help='\\n                        Disable automatic starting of NTP service.\\n\\n                        ``--nontp`` and ``--ntpservers`` are mutually exclusive.\\n                        ')", "         op.add_argument('--ntpservers', dest='ntpservers', type=commaSplit, metavar='<server1>,<server2>,...,<serverN>', version=F18, help=\"\\n                        Specify a list of NTP servers to be used (comma-separated\\n                        list with no spaces). The chrony package is automatically\\n                        installed when this option is used. If you don't want the\\n                        package to be automatically installed then use ``-chrony``\\n                        in package selection. For example::\\n\\n                        ``timezone --ntpservers=ntp.cesnet.cz,tik.nic.cz Europe/Prague``\\n                        \")", "         return op", " "]]], "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "boolean_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "18": {"op-name": "number_replacer", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 4, "line_number": 82}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\nIndexError: list index out of range\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -39,7 +39,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'timezone', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        self.timezone = ns.timezone[0]", "+        self.timezone = ns.timezone[1]", "         return self", " ", " class FC6_Timezone(FC3_Timezone):"]]], "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "19": {"op-name": "number_replacer", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 5, "line_number": 110}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -63,7 +63,7 @@", " ", " class F18_Timezone(FC6_Timezone):", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         FC6_Timezone.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.nontp = kwargs.get('nontp', False)"]]], "result-type": "normal", "occurrence": 5, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "number_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}, "21": {"op-name": "replace_NotEq_with_GtE", "module-name": "pykickstart.commands.timezone", "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.timezone\", line 161, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the timezone command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/timezone.py\", line 61, in runTest\n    self.assert_parse(\"timezone --utc Europe/Prague\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the timezone command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/timezone.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(ns.timezone) != 1):", "+        if (len(ns.timezone) >= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'timezone')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'timezone', 'options': extra}"]]], "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.timezone", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}}, "work-parameters": {"1": {"timeout": 15.352049999999998, "test-runner": "nose", "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/timezone.py"]}}, "_default": {}}