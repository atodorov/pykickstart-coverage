{"work-parameters": {"1": {"test-runner": "nose", "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "timeout": 11.519440000000001}}, "_default": {}, "work-items": {"51": {"occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_NotEq", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshpw command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -93,7 +93,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) == 0):", "+        if (len(ns.password) != 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "         if (len(extra) > 0):", "             mapping = {'command': 'sshpw', 'options': extra}"]]], "module-name": "pykickstart.commands.sshpw"}, "24": {"occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_NotIn", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -93,7 +93,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) == 0):", "+        if (len(ns.password) not in 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "         if (len(extra) > 0):", "             mapping = {'command': 'sshpw', 'options': extra}"]]], "module-name": "pykickstart.commands.sshpw"}, "10": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_Gt", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 80, in runTest\n    sshpw --username=someguy --iscrypted passwordB\"\"\", UserWarning)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -20,7 +20,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username > y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.sshpw"}, "23": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_NotIn", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 34, in runTest\n    self.assert_parse(\"sshpw --username=B --iscrypted secrethandshake\"))\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\nTypeError: argument of type 'F13_SshPwData' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -23,7 +23,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self not in y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "module-name": "pykickstart.commands.sshpw"}, "54": {"occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "number_replacer", "result-type": "normal", "result-data": [{"line_number": 161, "occurrence": 2, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -95,7 +95,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) == 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "-        if (len(extra) > 0):", "+        if (len(extra) > 1):", "             mapping = {'command': 'sshpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "module-name": "pykickstart.commands.sshpw"}, "46": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Gt_with_Is", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshpw command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshpw command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -95,7 +95,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) == 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "-        if (len(extra) > 0):", "+        if (len(extra) is 0):", "             mapping = {'command': 'sshpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "module-name": "pykickstart.commands.sshpw"}, "26": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_In", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 34, in runTest\n    self.assert_parse(\"sshpw --username=B --iscrypted secrethandshake\"))\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\nTypeError: argument of type 'F13_SshPwData' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -23,7 +23,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self in y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "module-name": "pykickstart.commands.sshpw"}, "18": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_Is", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -23,7 +23,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "module-name": "pykickstart.commands.sshpw"}, "36": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_In_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_In_with_Eq", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nAttributeError: 'list' object has no attribute 'username'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: 'list' object has no attribute 'username'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -101,7 +101,7 @@", "         self.set_to_obj(ns, ud)", "         ud.password = ' '.join(ns.password)", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud == self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "module-name": "pykickstart.commands.sshpw"}, "3": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "boolean_replacer", "result-type": "normal", "result-data": [{"line_number": 37, "occurrence": 1, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -15,7 +15,7 @@", "         self.username = kwargs.get('username', None)", "         self.isCrypted = kwargs.get('isCrypted', False)", "         self.password = kwargs.get('password', '')", "-        self.lock = kwargs.get('lock', False)", "+        self.lock = kwargs.get('lock', True)", " ", "     def __eq__(self, y):", "         if (not y):"]]], "module-name": "pykickstart.commands.sshpw"}, "15": {"occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_Lt", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 41, in runTest\n    self.assert_parse_error(\"sshpw --username=someguy\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -93,7 +93,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) == 0):", "+        if (len(ns.password) < 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "         if (len(extra) > 0):", "             mapping = {'command': 'sshpw', 'options': extra}"]]], "module-name": "pykickstart.commands.sshpw"}, "53": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "number_replacer", "result-type": "normal", "result-data": [{"line_number": 159, "occurrence": 1, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshpw command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -93,7 +93,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) == 0):", "+        if (len(ns.password) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "         if (len(extra) > 0):", "             mapping = {'command': 'sshpw', 'options': extra}"]]], "module-name": "pykickstart.commands.sshpw"}, "44": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_GtE", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 34, in runTest\n    self.assert_parse(\"sshpw --username=B --iscrypted secrethandshake\"))\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\nTypeError: unorderable types: F13_SshPwData() >= F13_SshPwData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -23,7 +23,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self >= y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "module-name": "pykickstart.commands.sshpw"}, "12": {"occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_Gt", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshpw command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -93,7 +93,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) == 0):", "+        if (len(ns.password) > 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "         if (len(extra) > 0):", "             mapping = {'command': 'sshpw', 'options': extra}"]]], "module-name": "pykickstart.commands.sshpw"}, "25": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_In", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -20,7 +20,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username in y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.sshpw"}, "34": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_IsNot", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 34, in runTest\n    self.assert_parse(\"sshpw --username=B --iscrypted secrethandshake\"))\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -23,7 +23,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is not y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "module-name": "pykickstart.commands.sshpw"}, "7": {"occurrence": 5, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "boolean_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "boolean_replacer", "result-type": "normal", "result-data": [{"line_number": 138, "occurrence": 5, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 46, in runTest\n    self.assert_parse(\"sshpw --username=someguy --lock secrethandshake\", \"sshpw --username=someguy --lock --plaintext secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'sshpw --username=someguy --lock --iscrypted secrethandshake\\n' != 'sshpw --username=someguy --lock --plaintext secrethandshake\\n'\n- sshpw --username=someguy --lock --iscrypted secrethandshake\n?                                    ^^^^^  ^\n+ sshpw --username=someguy --lock --plaintext secrethandshake\n?                                   +++ ^  ^^\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -84,7 +84,7 @@", "     def _getParser(self):", "         op = KSOptionParser(prog='sshpw', description='\\n                            The installer can start up ssh to provide for\\n                            interactivity and inspection, just like it can with\\n                            telnet. The \"inst.sshd\" option must be specified on\\n                            the kernel command-line for Anaconda to start an ssh\\n                            daemon. The sshpw command is used to control the\\n                            accounts created in the installation environment that\\n                            may be remotely logged into. For each instance of\\n                            this command given, a user will be created. These\\n                            users will not be created on the final system -\\n                            they only exist for use while the installer is\\n                            running.\\n\\n                            Note that by default, root has a blank password. If\\n                            you don\\'t want any user to be able to ssh in and\\n                            have full access to your hardware, you must specify\\n                            sshpw for username root. Also note that if Anaconda\\n                            fails to parse the kickstart file, it will allow\\n                            anyone to login as root and have full access to\\n                            your hardware.', version=F13)", "         op.add_argument('--username', required=True, metavar='<name>', version=F13, help='\\n                        Provides the name of the user. This option is required.\\n                        ')", "-        op.add_argument('--iscrypted', dest='isCrypted', action='store_true', default=False, version=F13, help='\\n                        If this is present, the password argument is assumed to\\n                        already be encrypted.')", "+        op.add_argument('--iscrypted', dest='isCrypted', action='store_true', default=True, version=F13, help='\\n                        If this is present, the password argument is assumed to\\n                        already be encrypted.')", "         op.add_argument('--plaintext', dest='isCrypted', action='store_false', version=F13, help='\\n                        If this is present, the password argument is assumed to\\n                        not be encrypted. This is the default.')", "         op.add_argument('--lock', action='store_true', default=False, version=F13, help='\\n                        If this is present, the new user account is locked by\\n                        default. That is, the user will not be able to login\\n                        from the console.')", "         op.add_argument('password', metavar='<password>', nargs='*', version=F13, help='\\n                        The password string to use.')"]]], "module-name": "pykickstart.commands.sshpw"}, "31": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Gt_with_Lt", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -95,7 +95,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) == 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "-        if (len(extra) > 0):", "+        if (len(extra) < 0):", "             mapping = {'command': 'sshpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "module-name": "pykickstart.commands.sshpw"}, "16": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_In_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_In_with_Lt", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: unorderable types: F13_SshPwData() < list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: unorderable types: F13_SshPwData() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -101,7 +101,7 @@", "         self.set_to_obj(ns, ud)", "         ud.password = ' '.join(ns.password)", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud < self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "module-name": "pykickstart.commands.sshpw"}, "9": {"occurrence": 7, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "boolean_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "boolean_replacer", "result-type": "normal", "result-data": [{"line_number": 187, "occurrence": 7, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 85, in runTest\n    self.assert_parse(\"sshpw --username=someguy a password with spaces\", \"sshpw --username=someguy --plaintext a password with spaces\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'sshpw --username=someguy --sshkey a password with spaces\\n' != 'sshpw --username=someguy --plaintext a password with spaces\\n'\n- sshpw --username=someguy --sshkey a password with spaces\n?                            ^^^^ ^\n+ sshpw --username=someguy --plaintext a password with spaces\n?                            ^^^^^^ ^^\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -118,6 +118,6 @@", " ", "     def _getParser(self):", "         op = F13_SshPw._getParser(self)", "-        op.add_argument('--sshkey', action='store_true', default=False, version=F24, help='\\n                        If this is used then the <password> string is\\n                        interpreted as an ssh key value.')", "+        op.add_argument('--sshkey', action='store_true', default=True, version=F24, help='\\n                        If this is used then the <password> string is\\n                        interpreted as an ssh key value.')", "         return op", " "]]], "module-name": "pykickstart.commands.sshpw"}, "6": {"occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "boolean_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "boolean_replacer", "result-type": "normal", "result-data": [{"line_number": 133, "occurrence": 4, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -83,7 +83,7 @@", " ", "     def _getParser(self):", "         op = KSOptionParser(prog='sshpw', description='\\n                            The installer can start up ssh to provide for\\n                            interactivity and inspection, just like it can with\\n                            telnet. The \"inst.sshd\" option must be specified on\\n                            the kernel command-line for Anaconda to start an ssh\\n                            daemon. The sshpw command is used to control the\\n                            accounts created in the installation environment that\\n                            may be remotely logged into. For each instance of\\n                            this command given, a user will be created. These\\n                            users will not be created on the final system -\\n                            they only exist for use while the installer is\\n                            running.\\n\\n                            Note that by default, root has a blank password. If\\n                            you don\\'t want any user to be able to ssh in and\\n                            have full access to your hardware, you must specify\\n                            sshpw for username root. Also note that if Anaconda\\n                            fails to parse the kickstart file, it will allow\\n                            anyone to login as root and have full access to\\n                            your hardware.', version=F13)", "-        op.add_argument('--username', required=True, metavar='<name>', version=F13, help='\\n                        Provides the name of the user. This option is required.\\n                        ')", "+        op.add_argument('--username', required=False, metavar='<name>', version=F13, help='\\n                        Provides the name of the user. This option is required.\\n                        ')", "         op.add_argument('--iscrypted', dest='isCrypted', action='store_true', default=False, version=F13, help='\\n                        If this is present, the password argument is assumed to\\n                        already be encrypted.')", "         op.add_argument('--plaintext', dest='isCrypted', action='store_false', version=F13, help='\\n                        If this is present, the password argument is assumed to\\n                        not be encrypted. This is the default.')", "         op.add_argument('--lock', action='store_true', default=False, version=F13, help='\\n                        If this is present, the new user account is locked by\\n                        default. That is, the user will not be able to login\\n                        from the console.')"]]], "module-name": "pykickstart.commands.sshpw"}, "29": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_LtE", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 34, in runTest\n    self.assert_parse(\"sshpw --username=B --iscrypted secrethandshake\"))\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\nTypeError: unorderable types: F13_SshPwData() <= F13_SshPwData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -23,7 +23,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self <= y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "module-name": "pykickstart.commands.sshpw"}, "33": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_IsNot", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name otherguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: An ssh user with the name otherguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -20,7 +20,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username is not y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.sshpw"}, "11": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_Gt", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 34, in runTest\n    self.assert_parse(\"sshpw --username=B --iscrypted secrethandshake\"))\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\nTypeError: unorderable types: F13_SshPwData() > F13_SshPwData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -23,7 +23,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self > y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "module-name": "pykickstart.commands.sshpw"}, "43": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_GtE", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -20,7 +20,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username >= y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.sshpw"}, "4": {"occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "boolean_replacer", "result-type": "normal", "result-data": [{"line_number": 41, "occurrence": 2, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -19,7 +19,7 @@", " ", "     def __eq__(self, y):", "         if (not y):", "-            return False", "+            return True", "         return (self.username == y.username)", " ", "     def __ne__(self, y):"]]], "module-name": "pykickstart.commands.sshpw"}, "39": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_In_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_In_with_NotEq", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name someguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: An ssh user with the name someguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -101,7 +101,7 @@", "         self.set_to_obj(ns, ud)", "         ud.password = ' '.join(ns.password)", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud != self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "module-name": "pykickstart.commands.sshpw"}, "32": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_In_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_In_with_Gt", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: unorderable types: F13_SshPwData() > list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: unorderable types: F13_SshPwData() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -101,7 +101,7 @@", "         self.set_to_obj(ns, ud)", "         ud.password = ' '.join(ns.password)", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud > self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "module-name": "pykickstart.commands.sshpw"}, "1": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Gt_with_LtE", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshpw command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshpw command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -95,7 +95,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) == 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "-        if (len(extra) > 0):", "+        if (len(extra) <= 0):", "             mapping = {'command': 'sshpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "module-name": "pykickstart.commands.sshpw"}, "50": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_NotEq", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 34, in runTest\n    self.assert_parse(\"sshpw --username=B --iscrypted secrethandshake\"))\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\nRecursionError: maximum recursion depth exceeded while calling a Python object\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -23,7 +23,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self != y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "module-name": "pykickstart.commands.sshpw"}, "2": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "boolean_replacer", "result-type": "normal", "result-data": [{"line_number": 35, "occurrence": 0, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -13,7 +13,7 @@", "     def __init__(self, *args, **kwargs):", "         BaseData.__init__(self, *args, **kwargs)", "         self.username = kwargs.get('username', None)", "-        self.isCrypted = kwargs.get('isCrypted', False)", "+        self.isCrypted = kwargs.get('isCrypted', True)", "         self.password = kwargs.get('password', '')", "         self.lock = kwargs.get('lock', False)", " "]]], "module-name": "pykickstart.commands.sshpw"}, "30": {"occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_LtE", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -93,7 +93,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) == 0):", "+        if (len(ns.password) <= 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "         if (len(extra) > 0):", "             mapping = {'command': 'sshpw', 'options': extra}"]]], "module-name": "pykickstart.commands.sshpw"}, "27": {"occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_In", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -93,7 +93,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) == 0):", "+        if (len(ns.password) in 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "         if (len(extra) > 0):", "             mapping = {'command': 'sshpw', 'options': extra}"]]], "module-name": "pykickstart.commands.sshpw"}, "38": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Gt_with_NotEq", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -95,7 +95,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) == 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "-        if (len(extra) > 0):", "+        if (len(extra) != 0):", "             mapping = {'command': 'sshpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "module-name": "pykickstart.commands.sshpw"}, "17": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_Is", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 80, in runTest\n    sshpw --username=someguy --iscrypted passwordB\"\"\", UserWarning)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -20,7 +20,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username is y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.sshpw"}, "22": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_NotIn", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name otherguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: An ssh user with the name otherguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -20,7 +20,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username not in y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.sshpw"}, "21": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Gt_with_Eq", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshpw command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshpw command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -95,7 +95,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) == 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "-        if (len(extra) > 0):", "+        if (len(extra) == 0):", "             mapping = {'command': 'sshpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "module-name": "pykickstart.commands.sshpw"}, "5": {"occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "boolean_replacer", "result-type": "normal", "result-data": [{"line_number": 76, "occurrence": 3, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -49,7 +49,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         F13_SshPwData.__init__(self, *args, **kwargs)", "-        self.sshkey = kwargs.get('sshkey', False)", "+        self.sshkey = kwargs.get('sshkey', True)", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.sshpw"}, "48": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_In_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_In_with_IsNot", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name someguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: An ssh user with the name someguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -101,7 +101,7 @@", "         self.set_to_obj(ns, ud)", "         ud.password = ' '.join(ns.password)", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud is not self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "module-name": "pykickstart.commands.sshpw"}, "28": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_LtE", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name otherguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: An ssh user with the name otherguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -20,7 +20,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username <= y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.sshpw"}, "8": {"occurrence": 6, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "boolean_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "boolean_replacer", "result-type": "normal", "result-data": [{"line_number": 145, "occurrence": 6, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 30, in runTest\n    self.assert_parse(\"sshpw --username=someguy --iscrypted secrethandshake\", \"sshpw --username=someguy --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'sshpw --username=someguy --lock --iscrypted secrethandshake\\n' != 'sshpw --username=someguy --iscrypted secrethandshake\\n'\n- sshpw --username=someguy --lock --iscrypted secrethandshake\n?                          -------\n+ sshpw --username=someguy --iscrypted secrethandshake\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -86,7 +86,7 @@", "         op.add_argument('--username', required=True, metavar='<name>', version=F13, help='\\n                        Provides the name of the user. This option is required.\\n                        ')", "         op.add_argument('--iscrypted', dest='isCrypted', action='store_true', default=False, version=F13, help='\\n                        If this is present, the password argument is assumed to\\n                        already be encrypted.')", "         op.add_argument('--plaintext', dest='isCrypted', action='store_false', version=F13, help='\\n                        If this is present, the password argument is assumed to\\n                        not be encrypted. This is the default.')", "-        op.add_argument('--lock', action='store_true', default=False, version=F13, help='\\n                        If this is present, the new user account is locked by\\n                        default. That is, the user will not be able to login\\n                        from the console.')", "+        op.add_argument('--lock', action='store_true', default=True, version=F13, help='\\n                        If this is present, the new user account is locked by\\n                        default. That is, the user will not be able to login\\n                        from the console.')", "         op.add_argument('password', metavar='<password>', nargs='*', version=F13, help='\\n                        The password string to use.')", "         return op", " "]]], "module-name": "pykickstart.commands.sshpw"}, "45": {"occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_GtE", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshpw command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -93,7 +93,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) == 0):", "+        if (len(ns.password) >= 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "         if (len(extra) > 0):", "             mapping = {'command': 'sshpw', 'options': extra}"]]], "module-name": "pykickstart.commands.sshpw"}, "13": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_Lt", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name otherguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: An ssh user with the name otherguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -20,7 +20,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username < y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.sshpw"}, "49": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_NotEq", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name otherguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: An ssh user with the name otherguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -20,7 +20,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username != y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.sshpw"}, "19": {"occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_Is", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -93,7 +93,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) == 0):", "+        if (len(ns.password) is 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "         if (len(extra) > 0):", "             mapping = {'command': 'sshpw', 'options': extra}"]]], "module-name": "pykickstart.commands.sshpw"}, "37": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_In_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_In_with_LtE", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: unorderable types: F13_SshPwData() <= list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: unorderable types: F13_SshPwData() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -101,7 +101,7 @@", "         self.set_to_obj(ns, ud)", "         ud.password = ' '.join(ns.password)", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud <= self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "module-name": "pykickstart.commands.sshpw"}, "35": {"occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_IsNot", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshpw command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -93,7 +93,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) == 0):", "+        if (len(ns.password) is not 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "         if (len(extra) > 0):", "             mapping = {'command': 'sshpw', 'options': extra}"]]], "module-name": "pykickstart.commands.sshpw"}, "41": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Gt_with_GtE", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshpw command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshpw command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -95,7 +95,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) == 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "-        if (len(extra) > 0):", "+        if (len(extra) >= 0):", "             mapping = {'command': 'sshpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "module-name": "pykickstart.commands.sshpw"}, "56": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Gt_with_IsNot", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -95,7 +95,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) == 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "-        if (len(extra) > 0):", "+        if (len(extra) is not 0):", "             mapping = {'command': 'sshpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "module-name": "pykickstart.commands.sshpw"}, "47": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_In_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_In_with_NotIn", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name someguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: An ssh user with the name someguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -101,7 +101,7 @@", "         self.set_to_obj(ns, ud)", "         ud.password = ' '.join(ns.password)", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud not in self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "module-name": "pykickstart.commands.sshpw"}, "55": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Gt_with_NotIn", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -95,7 +95,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) == 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "-        if (len(extra) > 0):", "+        if (len(extra) not in 0):", "             mapping = {'command': 'sshpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "module-name": "pykickstart.commands.sshpw"}, "14": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Eq_with_Lt", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 34, in runTest\n    self.assert_parse(\"sshpw --username=B --iscrypted secrethandshake\"))\n  File \"pykickstart.commands.sshpw\", line 46, in __ne__\nTypeError: unorderable types: F13_SshPwData() < F13_SshPwData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -23,7 +23,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self < y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "module-name": "pykickstart.commands.sshpw"}, "40": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_In_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_In_with_GtE", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: unorderable types: F13_SshPwData() >= list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: unorderable types: F13_SshPwData() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -101,7 +101,7 @@", "         self.set_to_obj(ns, ud)", "         ud.password = ' '.join(ns.password)", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud >= self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "module-name": "pykickstart.commands.sshpw"}, "52": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "number_replacer", "result-type": "normal", "result-data": [{"line_number": 99, "occurrence": 0, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -70,7 +70,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.sshUserList = kwargs.get('sshUserList', [])"]]], "module-name": "pykickstart.commands.sshpw"}, "20": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_In_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_In_with_Is", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 80, in runTest\n    sshpw --username=someguy --iscrypted passwordB\"\"\", UserWarning)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -101,7 +101,7 @@", "         self.set_to_obj(ns, ud)", "         ud.password = ' '.join(ns.password)", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud is self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "module-name": "pykickstart.commands.sshpw"}, "42": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.sshpw", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshpw.py"], "op-name": "replace_Gt_with_In", "result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshpw.py\", line 76, in runTest\n    sshpw --username=otherguy --iscrypted passwordA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshpw --username=someguy --iscrypted passwordA\nsshpw --username=otherguy --iscrypted passwordA: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshpw.py", "@@ -95,7 +95,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) == 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshpw')))", "-        if (len(extra) > 0):", "+        if (len(extra) in 0):", "             mapping = {'command': 'sshpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "module-name": "pykickstart.commands.sshpw"}}}