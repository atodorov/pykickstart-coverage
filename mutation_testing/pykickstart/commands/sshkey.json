{"_default": {}, "work-parameters": {"1": {"test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "timeout": 7.69019, "test-runner": "nose"}}, "work-items": {"23": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_NotEq", "occurrence": 1, "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 35, in runTest\n    self.assert_parse(\"sshkey --username=B '%s'\" % self.key))\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\nRecursionError: maximum recursion depth exceeded while calling a Python object\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -21,7 +21,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self != y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "result-type": "normal"}, "17": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_Gt", "occurrence": 1, "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 35, in runTest\n    self.assert_parse(\"sshkey --username=B '%s'\" % self.key))\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\nTypeError: unorderable types: F22_SshKeyData() > F22_SshKeyData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -21,7 +21,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self > y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "result-type": "normal"}, "40": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "number_replacer", "occurrence": 1, "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "line_number": 90}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nthe following arguments are required: \"ssh key\"\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': The following problem occurred on line 2 of the kickstart file:\n\nthe following arguments are required: \"ssh key\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -53,7 +53,7 @@", "     def _getParser(self):", "         op = KSOptionParser(prog='sshkey', description='\\n                            This installs a ssh key to the authorized_keys file\\n                            of the specified user on the installed system.', epilog='\\n                            Note that the key should be quoted, if it contains\\n                            spaces and the user should exist (or be root)\\n                            either via creation by a package install or the\\n                            kickstart ``user`` command.', version=F22)", "         op.add_argument('--username', required=True, metavar='<user>', version=F22, help='\\n                        User for which to install the specified key.')", "-        op.add_argument('sshkey', metavar='\"ssh key\"', nargs=1, version=F22, help='\\n                        The content of the ssh key to install.')", "+        op.add_argument('sshkey', metavar='\"ssh key\"', nargs=2, version=F22, help='\\n                        The content of the ssh key to install.')", "         return op", " ", "     def parse(self, args):"]]], "result-type": "normal"}, "18": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_In_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_In_with_Is", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 63, in runTest\n    sshkey --username=someguy 'this is the key'\"\"\", UserWarning)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -67,7 +67,7 @@", "         self.set_to_obj(ns, ud)", "         ud.key = ns.sshkey[0]", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud is self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "result-type": "normal"}, "29": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_Lt", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name otherguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': An ssh user with the name otherguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username < y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "result-type": "normal"}, "12": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_In", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username in y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "result-type": "normal"}, "10": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Gt_with_Is", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshkey command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshkey command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -61,7 +61,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.sshkey) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is 0):", "             mapping = {'command': 'sshkey', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "result-type": "normal"}, "36": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_NotEq_with_Is", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshkey command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshkey command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -59,7 +59,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.sshkey) != 1):", "+        if (len(ns.sshkey) is 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'sshkey', 'options': extra}"]]], "result-type": "normal"}, "46": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_GtE", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username >= y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "result-type": "normal"}, "20": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Gt_with_LtE", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshkey command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshkey command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -61,7 +61,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.sshkey) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) <= 0):", "             mapping = {'command': 'sshkey', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "result-type": "normal"}, "5": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_In_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_In_with_Lt", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: unorderable types: F22_SshKeyData() < list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': unorderable types: F22_SshKeyData() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -67,7 +67,7 @@", "         self.set_to_obj(ns, ud)", "         ud.key = ns.sshkey[0]", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud < self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "result-type": "normal"}, "51": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_In_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_In_with_NotIn", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name someguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': An ssh user with the name someguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -67,7 +67,7 @@", "         self.set_to_obj(ns, ud)", "         ud.key = ns.sshkey[0]", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud not in self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "result-type": "normal"}, "35": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_LtE", "occurrence": 1, "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 35, in runTest\n    self.assert_parse(\"sshkey --username=B '%s'\" % self.key))\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\nTypeError: unorderable types: F22_SshKeyData() <= F22_SshKeyData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -21,7 +21,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self <= y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "result-type": "normal"}, "34": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_LtE", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name otherguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': An ssh user with the name otherguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username <= y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "result-type": "normal"}, "21": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_NotEq_with_In", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -59,7 +59,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.sshkey) != 1):", "+        if (len(ns.sshkey) in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'sshkey', 'options': extra}"]]], "result-type": "normal"}, "6": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_Is", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 63, in runTest\n    sshkey --username=someguy 'this is the key'\"\"\", UserWarning)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username is y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "result-type": "normal"}, "15": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_NotEq_with_GtE", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshkey command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshkey command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -59,7 +59,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.sshkey) != 1):", "+        if (len(ns.sshkey) >= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'sshkey', 'options': extra}"]]], "result-type": "normal"}, "37": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Gt_with_NotIn", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -61,7 +61,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.sshkey) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) not in 0):", "             mapping = {'command': 'sshkey', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "result-type": "normal"}, "49": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "boolean_replacer", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "line_number": 39}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -17,7 +17,7 @@", " ", "     def __eq__(self, y):", "         if (not y):", "-            return False", "+            return True", "         return (self.username == y.username)", " ", "     def __ne__(self, y):"]]], "result-type": "normal"}, "2": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_NotIn", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name otherguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': An ssh user with the name otherguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username not in y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "result-type": "normal"}, "39": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "number_replacer", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "line_number": 65}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -39,7 +39,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.sshUserList = kwargs.get('sshUserList', [])"]]], "result-type": "normal"}, "19": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Gt_with_GtE", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshkey command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshkey command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -61,7 +61,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.sshkey) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) >= 0):", "             mapping = {'command': 'sshkey', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "result-type": "normal"}, "24": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_IsNot", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name otherguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': An ssh user with the name otherguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username is not y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "result-type": "normal"}, "8": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Gt_with_In", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -61,7 +61,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.sshkey) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) in 0):", "             mapping = {'command': 'sshkey', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "result-type": "normal"}, "25": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_IsNot", "occurrence": 1, "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 35, in runTest\n    self.assert_parse(\"sshkey --username=B '%s'\" % self.key))\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -21,7 +21,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is not y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "result-type": "normal"}, "30": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_Lt", "occurrence": 1, "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 35, in runTest\n    self.assert_parse(\"sshkey --username=B '%s'\" % self.key))\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\nTypeError: unorderable types: F22_SshKeyData() < F22_SshKeyData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -21,7 +21,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self < y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "result-type": "normal"}, "41": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "number_replacer", "occurrence": 2, "result-data": [{"occurrence": 2, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "line_number": 99}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshkey command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshkey command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -59,7 +59,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.sshkey) != 1):", "+        if (len(ns.sshkey) != 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'sshkey', 'options': extra}"]]], "result-type": "normal"}, "11": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_In_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_In_with_NotEq", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name someguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': An ssh user with the name someguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -67,7 +67,7 @@", "         self.set_to_obj(ns, ud)", "         ud.key = ns.sshkey[0]", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud != self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "result-type": "normal"}, "28": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_NotEq_with_NotIn", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -59,7 +59,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.sshkey) != 1):", "+        if (len(ns.sshkey) not in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'sshkey', 'options': extra}"]]], "result-type": "normal"}, "16": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_Gt", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 63, in runTest\n    sshkey --username=someguy 'this is the key'\"\"\", UserWarning)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username > y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "result-type": "normal"}, "3": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_NotIn", "occurrence": 1, "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 35, in runTest\n    self.assert_parse(\"sshkey --username=B '%s'\" % self.key))\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\nTypeError: argument of type 'F22_SshKeyData' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -21,7 +21,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self not in y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "result-type": "normal"}, "4": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_NotEq_with_LtE", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshkey command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshkey command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -59,7 +59,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.sshkey) != 1):", "+        if (len(ns.sshkey) <= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'sshkey', 'options': extra}"]]], "result-type": "normal"}, "9": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Gt_with_Eq", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshkey command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': The following problem occurred on line 2 of the kickstart file:\n\nUnexpected arguments to sshkey command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -61,7 +61,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.sshkey) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) == 0):", "             mapping = {'command': 'sshkey', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "result-type": "normal"}, "26": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_In_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_In_with_IsNot", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name someguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': An ssh user with the name someguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -67,7 +67,7 @@", "         self.set_to_obj(ns, ud)", "         ud.key = ns.sshkey[0]", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud is not self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "result-type": "normal"}, "32": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Gt_with_IsNot", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -61,7 +61,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.sshkey) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is not 0):", "             mapping = {'command': 'sshkey', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "result-type": "normal"}, "13": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_In", "occurrence": 1, "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 35, in runTest\n    self.assert_parse(\"sshkey --username=B '%s'\" % self.key))\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\nTypeError: argument of type 'F22_SshKeyData' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -21,7 +21,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self in y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "result-type": "normal"}, "14": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_In_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_In_with_GtE", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: unorderable types: F22_SshKeyData() >= list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': unorderable types: F22_SshKeyData() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -67,7 +67,7 @@", "         self.set_to_obj(ns, ud)", "         ud.key = ns.sshkey[0]", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud >= self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "result-type": "normal"}, "47": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_GtE", "occurrence": 1, "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 35, in runTest\n    self.assert_parse(\"sshkey --username=B '%s'\" % self.key))\n  File \"pykickstart.commands.sshkey\", line 44, in __ne__\nTypeError: unorderable types: F22_SshKeyData() >= F22_SshKeyData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -21,7 +21,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self >= y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "result-type": "normal"}, "50": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "boolean_replacer", "occurrence": 1, "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "line_number": 87}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -52,7 +52,7 @@", " ", "     def _getParser(self):", "         op = KSOptionParser(prog='sshkey', description='\\n                            This installs a ssh key to the authorized_keys file\\n                            of the specified user on the installed system.', epilog='\\n                            Note that the key should be quoted, if it contains\\n                            spaces and the user should exist (or be root)\\n                            either via creation by a package install or the\\n                            kickstart ``user`` command.', version=F22)", "-        op.add_argument('--username', required=True, metavar='<user>', version=F22, help='\\n                        User for which to install the specified key.')", "+        op.add_argument('--username', required=False, metavar='<user>', version=F22, help='\\n                        User for which to install the specified key.')", "         op.add_argument('sshkey', metavar='\"ssh key\"', nargs=1, version=F22, help='\\n                        The content of the ssh key to install.')", "         return op", " "]]], "result-type": "normal"}, "43": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "number_replacer", "occurrence": 4, "result-data": [{"occurrence": 4, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "line_number": 106}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nIndexError: list index out of range\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -65,7 +65,7 @@", "             mapping = {'command': 'sshkey', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)", "-        ud.key = ns.sshkey[0]", "+        ud.key = ns.sshkey[1]", "         ud.lineno = self.lineno", "         if (ud in self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))"]]], "result-type": "normal"}, "22": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_NotEq", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: An ssh user with the name otherguy has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': An ssh user with the name otherguy has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.username == y.username)", "+        return (self.username != y.username)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "result-type": "normal"}, "48": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Gt_with_Lt", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -61,7 +61,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.sshkey) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) < 0):", "             mapping = {'command': 'sshkey', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "result-type": "normal"}, "31": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_In_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_In_with_Gt", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: unorderable types: F22_SshKeyData() > list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': unorderable types: F22_SshKeyData() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -67,7 +67,7 @@", "         self.set_to_obj(ns, ud)", "         ud.key = ns.sshkey[0]", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud > self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "result-type": "normal"}, "44": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_NotEq_with_Lt", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -59,7 +59,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.sshkey) != 1):", "+        if (len(ns.sshkey) < 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'sshkey', 'options': extra}"]]], "result-type": "normal"}, "7": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Eq_with_Is", "occurrence": 1, "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -21,7 +21,7 @@", "         return (self.username == y.username)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "result-type": "normal"}, "1": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_In_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_In_with_LtE", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nTypeError: unorderable types: F22_SshKeyData() <= list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': unorderable types: F22_SshKeyData() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -67,7 +67,7 @@", "         self.set_to_obj(ns, ud)", "         ud.key = ns.sshkey[0]", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud <= self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "result-type": "normal"}, "42": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "number_replacer", "occurrence": 3, "result-data": [{"occurrence": 3, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "line_number": 101}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -61,7 +61,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.sshkey) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) > 1):", "             mapping = {'command': 'sshkey', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "result-type": "normal"}, "33": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_Gt_with_NotEq", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -61,7 +61,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.sshkey) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) != 0):", "             mapping = {'command': 'sshkey', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_obj(ns, ud)"]]], "result-type": "normal"}, "38": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_NotEq_with_Eq", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshkey command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': The following problem occurred on line 2 of the kickstart file:\n\nA single argument is expected for the sshkey command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -59,7 +59,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.sshkey) != 1):", "+        if (len(ns.sshkey) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'sshkey', 'options': extra}"]]], "result-type": "normal"}, "27": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_NotEq_with_Gt", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -59,7 +59,7 @@", "     def parse(self, args):", "         ud = self.dataClass()", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.sshkey) != 1):", "+        if (len(ns.sshkey) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'sshkey')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'sshkey', 'options': extra}"]]], "result-type": "normal"}, "45": {"command": ["cosmic-ray", "worker", "pykickstart.commands.sshkey", "replace_In_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/sshkey.py"], "module-name": "pykickstart.commands.sshkey", "op-name": "replace_In_with_Eq", "occurrence": 0, "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nAttributeError: 'list' object has no attribute 'username'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/sshkey.py\", line 59, in runTest\n    sshkey --username=otherguy 'this is the key'\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nsshkey --username=someguy 'this is the key'\nsshkey --username=otherguy 'this is the key': 'list' object has no attribute 'username'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/sshkey.py", "@@ -67,7 +67,7 @@", "         self.set_to_obj(ns, ud)", "         ud.key = ns.sshkey[0]", "         ud.lineno = self.lineno", "-        if (ud in self.dataList()):", "+        if (ud == self.dataList()):", "             warnings.warn((_('An ssh user with the name %s has already been defined.') % ud.username))", "         return ud", " "]]], "result-type": "normal"}}}