{"_default": {}, "work-items": {"83": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_In_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_In_with_LtE", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 416, in parse\nTypeError: unorderable types: F12_PartData() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint != 'swap') and (pd <= self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "114": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 5, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 54, in runTest\n    self.assert_parse(\"part / --onbiosdisk=hda --size=100\", \"part / --onbiosdisk=hda --size=100%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.partition\", line 93, in __str__\n  File \"pykickstart.commands.partition\", line 180, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 153, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 107, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 84, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -60,7 +60,7 @@", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'", "-        if (self.size and (self.size != 0)):", "+        if (self.size and (self.size in 0)):", "             retval += (' --size=%s' % self.size)", "         if (hasattr(self, 'start') and (self.start != 0)):", "             retval += (' --start=%s' % self.start)"]]], "module-name": "pykickstart.commands.partition"}, "164": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 11, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 11, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fsprofile=\"\"\\n' != 'part /home\\n'\n- part /home --fsprofile=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -123,7 +123,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_PartData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile >= ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.partition"}, "213": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 18, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 18, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -400,7 +400,7 @@", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         if (retval.fstype == 'tmpfs'):", "-            if (retval.grow or (retval.maxSizeMB != 0)):", "+            if (retval.grow or (retval.maxSizeMB < 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "module-name": "pykickstart.commands.partition"}, "99": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 15, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 15, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -231,7 +231,7 @@", "         retval = ''", "         for part in self.partitions:", "             retval += part.__str__()", "-        if (retval != ''):", "+        if (retval not in ''):", "             return ('# Disk partitioning information\\n' + retval)", "         else:", "             return ''"]]], "module-name": "pykickstart.commands.partition"}, "102": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 18, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 18, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -400,7 +400,7 @@", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         if (retval.fstype == 'tmpfs'):", "-            if (retval.grow or (retval.maxSizeMB != 0)):", "+            if (retval.grow or (retval.maxSizeMB not in 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "module-name": "pykickstart.commands.partition"}, "235": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 18, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 18, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -400,7 +400,7 @@", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         if (retval.fstype == 'tmpfs'):", "-            if (retval.grow or (retval.maxSizeMB != 0)):", "+            if (retval.grow or (retval.maxSizeMB == 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "module-name": "pykickstart.commands.partition"}, "67": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 7, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 7, "line_number": 149}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -118,7 +118,7 @@", "         self.fsopts = kwargs.get('fsopts', '')", "         self.label = kwargs.get('label', '')", "         self.fsprofile = kwargs.get('fsprofile', '')", "-        self.encrypted = kwargs.get('encrypted', False)", "+        self.encrypted = kwargs.get('encrypted', True)", "         self.passphrase = kwargs.get('passphrase', '')", " ", "     def _getArgsAsStr(self):"]]], "module-name": "pykickstart.commands.partition"}, "8": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 6, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --start=0\\n' != 'part /home\\n'\n- part /home --start=0\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -62,7 +62,7 @@", "             retval += ' --recommended'", "         if (self.size and (self.size != 0)):", "             retval += (' --size=%s' % self.size)", "-        if (hasattr(self, 'start') and (self.start != 0)):", "+        if (hasattr(self, 'start') and (self.start <= 0)):", "             retval += (' --start=%s' % self.start)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "54": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_NotEq", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -31,7 +31,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint != y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.partition"}, "66": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 6, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 6, "line_number": 124}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -97,7 +97,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         FC4_PartData.__init__(self, *args, **kwargs)", "-        self.encrypted = kwargs.get('encrypted', False)", "+        self.encrypted = kwargs.get('encrypted', True)", "         self.passphrase = kwargs.get('passphrase', '')", " ", "     def _getArgsAsStr(self):"]]], "module-name": "pykickstart.commands.partition"}, "81": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "21", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 21, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 21, "line_number": 570}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 212, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 205, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 580, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\n--resize can only be used in conjunction with --onpart\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -369,7 +369,7 @@", " ", "     def _getParser(self):", "         op = F14_Partition._getParser(self)", "-        op.add_argument('--resize', action='store_true', version=F17, default=False, help='\\n                        Attempt to resize this partition to the size given by\\n                        ``--size=``. This option must be used with\\n                        ``--onpart --size=``, or an error will be raised.')", "+        op.add_argument('--resize', action='store_true', version=F17, default=True, help='\\n                        Attempt to resize this partition to the size given by\\n                        ``--size=``. This option must be used with\\n                        ``--onpart --size=``, or an error will be raised.')", "         return op", " ", "     def parse(self, args):"]]], "module-name": "pykickstart.commands.partition"}, "175": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_IsNot", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 243, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 227, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 212, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 205, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 55, in runTest\n    self.assert_parse(\"part swap --grow --maxsize=100\", \"part swap --grow --maxsize=100%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 644, in parse\n  File \"pykickstart.commands.partition\", line 621, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nThe --fstype=tmpfs option can't be used together with --grow or --maxsize\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -399,7 +399,7 @@", "         if self.handler.autopart.seen:", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if (retval.fstype == 'tmpfs'):", "+        if (retval.fstype is not 'tmpfs'):", "             if (retval.grow or (retval.maxSizeMB != 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))"]]], "module-name": "pykickstart.commands.partition"}, "140": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 3, "line_number": 66}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --end=0\\n' != 'part /home\\n'\n- part /home --end=0\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -42,7 +42,7 @@", "             retval += ' --active'", "         if self.primOnly:", "             retval += ' --asprimary'", "-        if (hasattr(self, 'end') and (self.end != 0)):", "+        if (hasattr(self, 'end') and (self.end != 1)):", "             retval += (' --end=%s' % self.end)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.partition"}, "2": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --end=0\\n' != 'part /home\\n'\n- part /home --end=0\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -42,7 +42,7 @@", "             retval += ' --active'", "         if self.primOnly:", "             retval += ' --asprimary'", "-        if (hasattr(self, 'end') and (self.end != 0)):", "+        if (hasattr(self, 'end') and (self.end <= 0)):", "             retval += (' --end=%s' % self.end)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.partition"}, "151": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 14, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 14, "line_number": 413}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 413, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -270,7 +270,7 @@", "         pd = self.dataClass()", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "-        pd.mountpoint = ns.mntpoint[0]", "+        pd.mountpoint = ns.mntpoint[1]", "         if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd"]]], "module-name": "pykickstart.commands.partition"}, "16": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 14, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 14, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 243, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 227, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 212, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 205, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --mkfsoptions=\"\"\\n' != 'part /home\\n'\n- part /home --mkfsoptions=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -211,7 +211,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F18_PartData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts <= ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "49": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_In", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -31,7 +31,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint in y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.partition"}, "72": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 12, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 12, "line_number": 341}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --active\\n' != 'part /home\\n'\n- part /home --active\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -245,7 +245,7 @@", "                 return value", "         op = KSOptionParser(prog='part', description='\\n                            Creates a partition on the system. This command is\\n                            required. All partitions created will be formatted\\n                            as part of the installation process unless\\n                            ``--noformat`` and ``--onpart`` are used.\\n                            ', epilog='\\n                            If partitioning fails for any reason, diagnostic\\n                            messages will appear on virtual console 3.', version=FC3)", "         op.add_argument('mntpoint', metavar='<mntpoint>', nargs=1, version=FC3, help='\\n                        The ``<mntpoint>`` is where the partition will be mounted\\n                        and must be of one of the following forms:\\n\\n                        ``/<path>``\\n\\n                        For example, /, /usr, /home\\n\\n                        ``swap``\\n\\n                        The partition will be used as swap space.\\n\\n                        ``raid.<id>``\\n\\n                        The partition will be used for software RAID.\\n                        Refer to the ``raid`` command.\\n\\n                        ``pv.<id>``\\n\\n                        The partition will be used for LVM. Refer to the\\n                        ``logvol`` command.\\n\\n                        ``btrfs.<id>``\\n\\n                        The partition will be used for BTRFS volume. Rerefer to\\n                        the ``btrfs`` command.\\n\\n                        ``biosboot``\\n\\n                        The partition will be used for a BIOS Boot Partition. As\\n                        of Fedora 16 there must be a biosboot partition for the\\n                        bootloader to be successfully installed onto a disk that\\n                        contains a GPT/GUID partition table. Rerefer to the\\n                        ``bootloader`` command.\\n                        ')", "-        op.add_argument('--active', action='store_true', default=False, version=FC3, help='')", "+        op.add_argument('--active', action='store_true', default=True, version=FC3, help='')", "         op.add_argument('--asprimary', dest='primOnly', action='store_true', default=False, version=FC3, help='\\n                        Forces automatic allocation of the partition as a primary\\n                        partition or the partitioning will fail.\\n\\n                        **TIP:** *The ``--asprimary`` option only makes sense\\n                        with the MBR partitioning scheme and is ignored when the\\n                        GPT partitioning scheme is used.*')", "         op.add_argument('--start', type=int, version=FC3, help='')", "         op.add_argument('--end', type=int, version=FC3, help='')"]]], "module-name": "pykickstart.commands.partition"}, "190": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 14, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 14, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 243, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 227, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 212, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 205, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --mkfsoptions=\"\"\\n' != 'part /home\\n'\n- part /home --mkfsoptions=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -211,7 +211,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F18_PartData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts is ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "50": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_In", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\n  File \"pykickstart.commands.partition\", line 57, in __ne__\nTypeError: 'in <string>' requires string as left operand, not F12_PartData\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -34,7 +34,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self in y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.partition"}, "121": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 12, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 12, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 144, in runTest\n    \"part / --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --encrypted\\n' != 'part / --encrypted --passphrase=\"blahblah\"\\n'\n- part / --encrypted\n+ part / --encrypted --passphrase=\"blahblah\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -127,7 +127,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase in ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "103": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_LtE", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --maxsize=0\\n' != 'part /home\\n'\n- part /home --maxsize=0\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -48,7 +48,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB <= 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.partition"}, "225": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 8, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 8, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fsoptions=\"\"\\n' != 'part /home\\n'\n- part /home --fsoptions=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -85,7 +85,7 @@", "         retval = FC3_PartData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts == ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         if (self.label != ''):", "             retval += (' --label=%s' % self.label)"]]], "module-name": "pykickstart.commands.partition"}, "177": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fstype=\"\"\\n' != 'part /home\\n'\n- part /home --fstype=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -44,7 +44,7 @@", "             retval += ' --asprimary'", "         if (hasattr(self, 'end') and (self.end != 0)):", "             retval += (' --end=%s' % self.end)", "-        if (self.fstype != ''):", "+        if (self.fstype is ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "module-name": "pykickstart.commands.partition"}, "226": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 9, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 9, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --label=\\n' != 'part /home\\n'\n- part /home --label=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -87,7 +87,7 @@", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "-        if (self.label != ''):", "+        if (self.label == ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "231": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 14, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 14, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 243, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 227, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 212, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 205, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --mkfsoptions=\"\"\\n' != 'part /home\\n'\n- part /home --mkfsoptions=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -211,7 +211,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F18_PartData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts == ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "171": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 18, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 18, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -400,7 +400,7 @@", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         if (retval.fstype == 'tmpfs'):", "-            if (retval.grow or (retval.maxSizeMB != 0)):", "+            if (retval.grow or (retval.maxSizeMB >= 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "module-name": "pykickstart.commands.partition"}, "46": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_NotIn", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -399,7 +399,7 @@", "         if self.handler.autopart.seen:", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if (retval.fstype == 'tmpfs'):", "+        if (retval.fstype not in 'tmpfs'):", "             if (retval.grow or (retval.maxSizeMB != 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))"]]], "module-name": "pykickstart.commands.partition"}, "204": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 9, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 9, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 106, in runTest\n    \"part /home --bytes-per-inode=2048 --fsoptions=\\\"blah\\\" --label=home\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --bytes-per-inode=2048 --fsoptions=\"blah\"\\n' != 'part /home --bytes-per-inode=2048 --fsoptions=\"blah\" --label=home\\n'\n- part /home --bytes-per-inode=2048 --fsoptions=\"blah\"\n+ part /home --bytes-per-inode=2048 --fsoptions=\"blah\" --label=home\n?                                                     +++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -87,7 +87,7 @@", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "-        if (self.label != ''):", "+        if (self.label < ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "32": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 10, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 10, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -104,7 +104,7 @@", "         retval = FC4_PartData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase > ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "167": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 14, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 14, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 243, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 227, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 212, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 205, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --mkfsoptions=\"\"\\n' != 'part /home\\n'\n- part /home --mkfsoptions=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -211,7 +211,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F18_PartData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts >= ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "37": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 15, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 15, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -231,7 +231,7 @@", "         retval = ''", "         for part in self.partitions:", "             retval += part.__str__()", "-        if (retval != ''):", "+        if (retval > ''):", "             return ('# Disk partitioning information\\n' + retval)", "         else:", "             return ''"]]], "module-name": "pykickstart.commands.partition"}, "176": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --end=0\\n' != 'part /home\\n'\n- part /home --end=0\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -42,7 +42,7 @@", "             retval += ' --active'", "         if self.primOnly:", "             retval += ' --asprimary'", "-        if (hasattr(self, 'end') and (self.end != 0)):", "+        if (hasattr(self, 'end') and (self.end is 0)):", "             retval += (' --end=%s' % self.end)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.partition"}, "11": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 9, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 9, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --label=\\n' != 'part /home\\n'\n- part /home --label=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -87,7 +87,7 @@", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "-        if (self.label != ''):", "+        if (self.label <= ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "17": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 15, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 15, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 95, in runTest\n    self.assertEqual(parser.__str__(), \"# Disk partitioning information\\npart /home\\n\")\nAssertionError: '' != '# Disk partitioning information\\npart /home\\n'\n+ # Disk partitioning information\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -231,7 +231,7 @@", "         retval = ''", "         for part in self.partitions:", "             retval += part.__str__()", "-        if (retval != ''):", "+        if (retval <= ''):", "             return ('# Disk partitioning information\\n' + retval)", "         else:", "             return ''"]]], "module-name": "pykickstart.commands.partition"}, "123": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 14, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 14, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 243, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 227, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 212, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 205, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --mkfsoptions=\"\"\\n' != 'part /home\\n'\n- part /home --mkfsoptions=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -211,7 +211,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F18_PartData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts in ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "196": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 48, in runTest\n    \"part raid.1 --active --asprimary --fstype=\\\"ext3\\\" --noformat%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part raid.1 --active --asprimary --noformat\\n' != 'part raid.1 --active --asprimary --fstype=\"ext3\" --noformat\\n'\n- part raid.1 --active --asprimary --noformat\n+ part raid.1 --active --asprimary --fstype=\"ext3\" --noformat\n?                                  ++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -44,7 +44,7 @@", "             retval += ' --asprimary'", "         if (hasattr(self, 'end') and (self.end != 0)):", "             retval += (' --end=%s' % self.end)", "-        if (self.fstype != ''):", "+        if (self.fstype < ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "module-name": "pykickstart.commands.partition"}, "52": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_NotEq", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -48,7 +48,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB != 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.partition"}, "113": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --onpart=\\n' != 'part /home\\n'\n- part /home --onpart=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -56,7 +56,7 @@", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)", "-        if (self.onPart != ''):", "+        if (self.onPart in ''):", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'"]]], "module-name": "pykickstart.commands.partition"}, "227": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 10, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 10, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 125, in runTest\n    \"part / --bytes-per-inode=4096 --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --bytes-per-inode=4096 --encrypted\\n' != 'part / --bytes-per-inode=4096 --encrypted --passphrase=\"blahblah\"\\n'\n- part / --bytes-per-inode=4096 --encrypted\n+ part / --bytes-per-inode=4096 --encrypted --passphrase=\"blahblah\"\n?                                          ++++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -104,7 +104,7 @@", "         retval = FC4_PartData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase == ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "228": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 11, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 11, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fsprofile=\"\"\\n' != 'part /home\\n'\n- part /home --fsprofile=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -123,7 +123,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_PartData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile == ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.partition"}, "207": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 12, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 12, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 144, in runTest\n    \"part / --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --encrypted\\n' != 'part / --encrypted --passphrase=\"blahblah\"\\n'\n- part / --encrypted\n+ part / --encrypted --passphrase=\"blahblah\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -127,7 +127,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase < ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "238": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_In", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 406, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -264,7 +264,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) in 0):", "             mapping = {'command': 'partition', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         pd = self.dataClass()"]]], "module-name": "pykickstart.commands.partition"}, "86": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -52,7 +52,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.onbiosdisk != ''):", "+        if (self.onbiosdisk not in ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)"]]], "module-name": "pykickstart.commands.partition"}, "42": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_Lt", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\n  File \"pykickstart.commands.partition\", line 57, in __ne__\nTypeError: unorderable types: F12_PartData() < str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -34,7 +34,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self < y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.partition"}, "5": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --ondisk=\\n' != 'part /home\\n'\n- part /home --ondisk=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -54,7 +54,7 @@", "             retval += ' --noformat'", "         if (self.onbiosdisk != ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "-        if (self.disk != ''):", "+        if (self.disk <= ''):", "             retval += (' --ondisk=%s' % self.disk)", "         if (self.onPart != ''):", "             retval += (' --onpart=%s' % self.onPart)"]]], "module-name": "pykickstart.commands.partition"}, "45": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_NotIn", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\n  File \"pykickstart.commands.partition\", line 57, in __ne__\nTypeError: 'in <string>' requires string as left operand, not F12_PartData\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -34,7 +34,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self not in y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.partition"}, "219": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --onbiosdisk=\\n' != 'part /home\\n'\n- part /home --onbiosdisk=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -52,7 +52,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.onbiosdisk != ''):", "+        if (self.onbiosdisk == ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)"]]], "module-name": "pykickstart.commands.partition"}, "126": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 17, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 17, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint in 'swap') and (pd in self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "73": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 13, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 13, "line_number": 344}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --asprimary\\n' != 'part /home\\n'\n- part /home --asprimary\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -246,7 +246,7 @@", "         op = KSOptionParser(prog='part', description='\\n                            Creates a partition on the system. This command is\\n                            required. All partitions created will be formatted\\n                            as part of the installation process unless\\n                            ``--noformat`` and ``--onpart`` are used.\\n                            ', epilog='\\n                            If partitioning fails for any reason, diagnostic\\n                            messages will appear on virtual console 3.', version=FC3)", "         op.add_argument('mntpoint', metavar='<mntpoint>', nargs=1, version=FC3, help='\\n                        The ``<mntpoint>`` is where the partition will be mounted\\n                        and must be of one of the following forms:\\n\\n                        ``/<path>``\\n\\n                        For example, /, /usr, /home\\n\\n                        ``swap``\\n\\n                        The partition will be used as swap space.\\n\\n                        ``raid.<id>``\\n\\n                        The partition will be used for software RAID.\\n                        Refer to the ``raid`` command.\\n\\n                        ``pv.<id>``\\n\\n                        The partition will be used for LVM. Refer to the\\n                        ``logvol`` command.\\n\\n                        ``btrfs.<id>``\\n\\n                        The partition will be used for BTRFS volume. Rerefer to\\n                        the ``btrfs`` command.\\n\\n                        ``biosboot``\\n\\n                        The partition will be used for a BIOS Boot Partition. As\\n                        of Fedora 16 there must be a biosboot partition for the\\n                        bootloader to be successfully installed onto a disk that\\n                        contains a GPT/GUID partition table. Rerefer to the\\n                        ``bootloader`` command.\\n                        ')", "         op.add_argument('--active', action='store_true', default=False, version=FC3, help='')", "-        op.add_argument('--asprimary', dest='primOnly', action='store_true', default=False, version=FC3, help='\\n                        Forces automatic allocation of the partition as a primary\\n                        partition or the partitioning will fail.\\n\\n                        **TIP:** *The ``--asprimary`` option only makes sense\\n                        with the MBR partitioning scheme and is ignored when the\\n                        GPT partitioning scheme is used.*')", "+        op.add_argument('--asprimary', dest='primOnly', action='store_true', default=True, version=FC3, help='\\n                        Forces automatic allocation of the partition as a primary\\n                        partition or the partitioning will fail.\\n\\n                        **TIP:** *The ``--asprimary`` option only makes sense\\n                        with the MBR partitioning scheme and is ignored when the\\n                        GPT partitioning scheme is used.*')", "         op.add_argument('--start', type=int, version=FC3, help='')", "         op.add_argument('--end', type=int, version=FC3, help='')", "         op.add_argument('--fstype', '--type', dest='fstype', version=FC3, help='\\n                        Sets the file system type for the partition. Valid\\n                        values include ext4, ext3, ext2, xfs, btrfs, swap, and\\n                        vfat. Other filesystems may be valid depending on\\n                        command line arguments passed to anaconda to enable\\n                        other filesystems.')"]]], "module-name": "pykickstart.commands.partition"}, "146": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 9, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 9, "line_number": 272}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -222,7 +222,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=130, *args, **kwargs):", "+    def __init__(self, writePriority=131, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.partitions = kwargs.get('partitions', [])"]]], "module-name": "pykickstart.commands.partition"}, "199": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 39, in runTest\n    self.assert_parse(\"part /home --onpart=/dev/sda1\", \"part /home --onpart=sda1%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home\\n' != 'part /home --onpart=sda1\\n'\n- part /home\n+ part /home --onpart=sda1\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -56,7 +56,7 @@", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)", "-        if (self.onPart != ''):", "+        if (self.onPart < ''):", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'"]]], "module-name": "pykickstart.commands.partition"}, "230": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 13, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 13, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 144, in runTest\n    \"part / --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --encrypted --passphrase=\"blahblah\" --escrowcert=\"\"\\n' != 'part / --encrypted --passphrase=\"blahblah\"\\n'\n- part / --encrypted --passphrase=\"blahblah\" --escrowcert=\"\"\n?                                           ----------------\n+ part / --encrypted --passphrase=\"blahblah\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -146,7 +146,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F11_PartData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert == '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.partition"}, "48": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_Lt", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 80, in runTest\n    self.assert_parse_error(\"part / /home /usr\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -264,7 +264,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) < 0):", "             mapping = {'command': 'partition', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         pd = self.dataClass()"]]], "module-name": "pykickstart.commands.partition"}, "94": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 10, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 10, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -104,7 +104,7 @@", "         retval = FC4_PartData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase not in ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "229": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 12, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 12, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 144, in runTest\n    \"part / --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --encrypted\\n' != 'part / --encrypted --passphrase=\"blahblah\"\\n'\n- part / --encrypted\n+ part / --encrypted --passphrase=\"blahblah\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -127,7 +127,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase == ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "212": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 17, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 17, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint < 'swap') and (pd in self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "44": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_NotIn", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -31,7 +31,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint not in y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.partition"}, "139": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 2, "line_number": 47}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --start=1\\n' != 'part /home\\n'\n- part /home --start=1\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -25,7 +25,7 @@", "         self.onPart = kwargs.get('onPart', '')", "         self.recommended = kwargs.get('recommended', False)", "         self.size = kwargs.get('size', None)", "-        self.start = kwargs.get('start', 0)", "+        self.start = kwargs.get('start', 1)", "         self.mountpoint = kwargs.get('mountpoint', '')", " ", "     def __eq__(self, y):"]]], "module-name": "pykickstart.commands.partition"}, "106": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_Gt", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -31,7 +31,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint > y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.partition"}, "239": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_Eq", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --maxsize=0\\n' != 'part /home\\n'\n- part /home --maxsize=0\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -48,7 +48,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB == 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.partition"}, "136": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_In_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_In_with_GtE", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 416, in parse\nTypeError: unorderable types: F12_PartData() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint != 'swap') and (pd >= self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "182": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 6, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --start=0\\n' != 'part /home\\n'\n- part /home --start=0\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -62,7 +62,7 @@", "             retval += ' --recommended'", "         if (self.size and (self.size != 0)):", "             retval += (' --size=%s' % self.size)", "-        if (hasattr(self, 'start') and (self.start != 0)):", "+        if (hasattr(self, 'start') and (self.start is 0)):", "             retval += (' --start=%s' % self.start)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "63": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 3, "line_number": 41}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 135, in runTest\n    self.assertEqual(data._getArgsAsStr(), \" --bytes-per-inode=4096 --encrypted\")\nAssertionError: ' --noformat --bytes-per-inode=4096 --encrypted' != ' --bytes-per-inode=4096 --encrypted'\n-  --noformat --bytes-per-inode=4096 --encrypted\n? -----------\n+  --bytes-per-inode=4096 --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -19,7 +19,7 @@", "         self.fstype = kwargs.get('fstype', '')", "         self.grow = kwargs.get('grow', False)", "         self.maxSizeMB = kwargs.get('maxSizeMB', 0)", "-        self.format = kwargs.get('format', True)", "+        self.format = kwargs.get('format', False)", "         self.onbiosdisk = kwargs.get('onbiosdisk', '')", "         self.disk = kwargs.get('disk', '')", "         self.onPart = kwargs.get('onPart', '')"]]], "module-name": "pykickstart.commands.partition"}, "26": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -56,7 +56,7 @@", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)", "-        if (self.onPart != ''):", "+        if (self.onPart > ''):", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'"]]], "module-name": "pykickstart.commands.partition"}, "14": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 12, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 12, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 144, in runTest\n    \"part / --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --encrypted\\n' != 'part / --encrypted --passphrase=\"blahblah\"\\n'\n- part / --encrypted\n+ part / --encrypted --passphrase=\"blahblah\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -127,7 +127,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase <= ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "232": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 15, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 15, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 95, in runTest\n    self.assertEqual(parser.__str__(), \"# Disk partitioning information\\npart /home\\n\")\nAssertionError: '' != '# Disk partitioning information\\npart /home\\n'\n+ # Disk partitioning information\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -231,7 +231,7 @@", "         retval = ''", "         for part in self.partitions:", "             retval += part.__str__()", "-        if (retval != ''):", "+        if (retval == ''):", "             return ('# Disk partitioning information\\n' + retval)", "         else:", "             return ''"]]], "module-name": "pykickstart.commands.partition"}, "157": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --onpart=\\n' != 'part /home\\n'\n- part /home --onpart=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -56,7 +56,7 @@", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)", "-        if (self.onPart != ''):", "+        if (self.onPart >= ''):", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'"]]], "module-name": "pykickstart.commands.partition"}, "62": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 2, "line_number": 39}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 135, in runTest\n    self.assertEqual(data._getArgsAsStr(), \" --bytes-per-inode=4096 --encrypted\")\nAssertionError: ' --grow --bytes-per-inode=4096 --encrypted' != ' --bytes-per-inode=4096 --encrypted'\n-  --grow --bytes-per-inode=4096 --encrypted\n? -------\n+  --bytes-per-inode=4096 --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -17,7 +17,7 @@", "         self.primOnly = kwargs.get('primOnly', False)", "         self.end = kwargs.get('end', 0)", "         self.fstype = kwargs.get('fstype', '')", "-        self.grow = kwargs.get('grow', False)", "+        self.grow = kwargs.get('grow', True)", "         self.maxSizeMB = kwargs.get('maxSizeMB', 0)", "         self.format = kwargs.get('format', True)", "         self.onbiosdisk = kwargs.get('onbiosdisk', '')"]]], "module-name": "pykickstart.commands.partition"}, "21": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_In_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_In_with_IsNot", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 417, in parse\nUserWarning: A partition with the mountpoint /home has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint != 'swap') and (pd is not self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "202": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 7, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 7, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 101, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home\\n' != 'part /home --bytes-per-inode=4096\\n'\n- part /home\n+ part /home --bytes-per-inode=4096\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_PartData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode < 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "module-name": "pykickstart.commands.partition"}, "148": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 11, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 11, "line_number": 305}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 402, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1994, in _parse_known_args\n    ', '.join(required_actions))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 249, in error\n    raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nthe following arguments are required: <mntpoint>\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -244,7 +244,7 @@", "             else:", "                 return value", "         op = KSOptionParser(prog='part', description='\\n                            Creates a partition on the system. This command is\\n                            required. All partitions created will be formatted\\n                            as part of the installation process unless\\n                            ``--noformat`` and ``--onpart`` are used.\\n                            ', epilog='\\n                            If partitioning fails for any reason, diagnostic\\n                            messages will appear on virtual console 3.', version=FC3)", "-        op.add_argument('mntpoint', metavar='<mntpoint>', nargs=1, version=FC3, help='\\n                        The ``<mntpoint>`` is where the partition will be mounted\\n                        and must be of one of the following forms:\\n\\n                        ``/<path>``\\n\\n                        For example, /, /usr, /home\\n\\n                        ``swap``\\n\\n                        The partition will be used as swap space.\\n\\n                        ``raid.<id>``\\n\\n                        The partition will be used for software RAID.\\n                        Refer to the ``raid`` command.\\n\\n                        ``pv.<id>``\\n\\n                        The partition will be used for LVM. Refer to the\\n                        ``logvol`` command.\\n\\n                        ``btrfs.<id>``\\n\\n                        The partition will be used for BTRFS volume. Rerefer to\\n                        the ``btrfs`` command.\\n\\n                        ``biosboot``\\n\\n                        The partition will be used for a BIOS Boot Partition. As\\n                        of Fedora 16 there must be a biosboot partition for the\\n                        bootloader to be successfully installed onto a disk that\\n                        contains a GPT/GUID partition table. Rerefer to the\\n                        ``bootloader`` command.\\n                        ')", "+        op.add_argument('mntpoint', metavar='<mntpoint>', nargs=2, version=FC3, help='\\n                        The ``<mntpoint>`` is where the partition will be mounted\\n                        and must be of one of the following forms:\\n\\n                        ``/<path>``\\n\\n                        For example, /, /usr, /home\\n\\n                        ``swap``\\n\\n                        The partition will be used as swap space.\\n\\n                        ``raid.<id>``\\n\\n                        The partition will be used for software RAID.\\n                        Refer to the ``raid`` command.\\n\\n                        ``pv.<id>``\\n\\n                        The partition will be used for LVM. Refer to the\\n                        ``logvol`` command.\\n\\n                        ``btrfs.<id>``\\n\\n                        The partition will be used for BTRFS volume. Rerefer to\\n                        the ``btrfs`` command.\\n\\n                        ``biosboot``\\n\\n                        The partition will be used for a BIOS Boot Partition. As\\n                        of Fedora 16 there must be a biosboot partition for the\\n                        bootloader to be successfully installed onto a disk that\\n                        contains a GPT/GUID partition table. Rerefer to the\\n                        ``bootloader`` command.\\n                        ')", "         op.add_argument('--active', action='store_true', default=False, version=FC3, help='')", "         op.add_argument('--asprimary', dest='primOnly', action='store_true', default=False, version=FC3, help='\\n                        Forces automatic allocation of the partition as a primary\\n                        partition or the partitioning will fail.\\n\\n                        **TIP:** *The ``--asprimary`` option only makes sense\\n                        with the MBR partitioning scheme and is ignored when the\\n                        GPT partitioning scheme is used.*')", "         op.add_argument('--start', type=int, version=FC3, help='')"]]], "module-name": "pykickstart.commands.partition"}, "93": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 9, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 9, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -87,7 +87,7 @@", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "-        if (self.label != ''):", "+        if (self.label not in ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "170": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 17, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 17, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint >= 'swap') and (pd in self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "107": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_Gt", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\n  File \"pykickstart.commands.partition\", line 57, in __ne__\nTypeError: unorderable types: F12_PartData() > str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -34,7 +34,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self > y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.partition"}, "133": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_LtE", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -31,7 +31,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint <= y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.partition"}, "39": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 17, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 17, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint > 'swap') and (pd in self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "150": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 13, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 13, "line_number": 406}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 82, in runTest\n    self.assert_parse_error(\"part /home --unknown=value\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -264,7 +264,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) > 1):", "             mapping = {'command': 'partition', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         pd = self.dataClass()"]]], "module-name": "pykickstart.commands.partition"}, "10": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 8, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 8, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fsoptions=\"\"\\n' != 'part /home\\n'\n- part /home --fsoptions=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -85,7 +85,7 @@", "         retval = FC3_PartData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts <= ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         if (self.label != ''):", "             retval += (' --label=%s' % self.label)"]]], "module-name": "pykickstart.commands.partition"}, "240": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_Eq", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 408, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to partition command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -264,7 +264,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) == 0):", "             mapping = {'command': 'partition', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         pd = self.dataClass()"]]], "module-name": "pykickstart.commands.partition"}, "209": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 14, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 14, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 247, in runTest\n    \"part / --size=4096 --mkfsoptions=\\\"some,thing\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --size=4096\\n' != 'part / --size=4096 --mkfsoptions=\"some,thing\"\\n'\n- part / --size=4096\n+ part / --size=4096 --mkfsoptions=\"some,thing\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -211,7 +211,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F18_PartData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts < ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "105": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_In_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_In_with_Is", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint != 'swap') and (pd is self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "172": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_In_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_In_with_NotIn", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 417, in parse\nUserWarning: A partition with the mountpoint /home has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint != 'swap') and (pd not in self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "158": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 5, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -60,7 +60,7 @@", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'", "-        if (self.size and (self.size != 0)):", "+        if (self.size and (self.size >= 0)):", "             retval += (' --size=%s' % self.size)", "         if (hasattr(self, 'start') and (self.start != 0)):", "             retval += (' --start=%s' % self.start)"]]], "module-name": "pykickstart.commands.partition"}, "183": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 7, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 7, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 101, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home\\n' != 'part /home --bytes-per-inode=4096\\n'\n- part /home\n+ part /home --bytes-per-inode=4096\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_PartData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode is 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "module-name": "pykickstart.commands.partition"}, "129": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_IsNot", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -264,7 +264,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is not 0):", "             mapping = {'command': 'partition', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         pd = self.dataClass()"]]], "module-name": "pykickstart.commands.partition"}, "84": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.partition\", line 93, in __str__\n  File \"pykickstart.commands.partition\", line 153, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 107, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 66, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -42,7 +42,7 @@", "             retval += ' --active'", "         if self.primOnly:", "             retval += ' --asprimary'", "-        if (hasattr(self, 'end') and (self.end != 0)):", "+        if (hasattr(self, 'end') and (self.end not in 0)):", "             retval += (' --end=%s' % self.end)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.partition"}, "60": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 0, "line_number": 35}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 135, in runTest\n    self.assertEqual(data._getArgsAsStr(), \" --bytes-per-inode=4096 --encrypted\")\nAssertionError: ' --active --bytes-per-inode=4096 --encrypted' != ' --bytes-per-inode=4096 --encrypted'\n-  --active --bytes-per-inode=4096 --encrypted\n? ---------\n+  --bytes-per-inode=4096 --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -13,7 +13,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         BaseData.__init__(self, *args, **kwargs)", "-        self.active = kwargs.get('active', False)", "+        self.active = kwargs.get('active', True)", "         self.primOnly = kwargs.get('primOnly', False)", "         self.end = kwargs.get('end', 0)", "         self.fstype = kwargs.get('fstype', '')"]]], "module-name": "pykickstart.commands.partition"}, "152": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 15, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 15, "line_number": 619}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -400,7 +400,7 @@", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         if (retval.fstype == 'tmpfs'):", "-            if (retval.grow or (retval.maxSizeMB != 0)):", "+            if (retval.grow or (retval.maxSizeMB != 1)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "module-name": "pykickstart.commands.partition"}, "220": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --ondisk=\\n' != 'part /home\\n'\n- part /home --ondisk=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -54,7 +54,7 @@", "             retval += ' --noformat'", "         if (self.onbiosdisk != ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "-        if (self.disk != ''):", "+        if (self.disk == ''):", "             retval += (' --ondisk=%s' % self.disk)", "         if (self.onPart != ''):", "             retval += (' --onpart=%s' % self.onPart)"]]], "module-name": "pykickstart.commands.partition"}, "203": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 8, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 8, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 106, in runTest\n    \"part /home --bytes-per-inode=2048 --fsoptions=\\\"blah\\\" --label=home\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --bytes-per-inode=2048 --label=home\\n' != 'part /home --bytes-per-inode=2048 --fsoptions=\"blah\" --label=home\\n'\n- part /home --bytes-per-inode=2048 --label=home\n+ part /home --bytes-per-inode=2048 --fsoptions=\"blah\" --label=home\n?                                   +++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -85,7 +85,7 @@", "         retval = FC3_PartData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts < ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         if (self.label != ''):", "             retval += (' --label=%s' % self.label)"]]], "module-name": "pykickstart.commands.partition"}, "180": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --onpart=\\n' != 'part /home\\n'\n- part /home --onpart=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -56,7 +56,7 @@", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)", "-        if (self.onPart != ''):", "+        if (self.onPart is ''):", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'"]]], "module-name": "pykickstart.commands.partition"}, "41": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_Lt", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -31,7 +31,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint < y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.partition"}, "116": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 7, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 7, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 101, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.partition\", line 93, in __str__\n  File \"pykickstart.commands.partition\", line 109, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_PartData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode in 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "module-name": "pykickstart.commands.partition"}, "156": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --ondisk=\\n' != 'part /home\\n'\n- part /home --ondisk=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -54,7 +54,7 @@", "             retval += ' --noformat'", "         if (self.onbiosdisk != ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "-        if (self.disk != ''):", "+        if (self.disk >= ''):", "             retval += (' --ondisk=%s' % self.disk)", "         if (self.onPart != ''):", "             retval += (' --onpart=%s' % self.onPart)"]]], "module-name": "pykickstart.commands.partition"}, "243": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_GtE", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -31,7 +31,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint >= y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.partition"}, "132": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_NotIn", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 406, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -264,7 +264,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) not in 0):", "             mapping = {'command': 'partition', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         pd = self.dataClass()"]]], "module-name": "pykickstart.commands.partition"}, "24": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -52,7 +52,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.onbiosdisk != ''):", "+        if (self.onbiosdisk > ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)"]]], "module-name": "pykickstart.commands.partition"}, "31": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 9, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 9, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -87,7 +87,7 @@", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "-        if (self.label != ''):", "+        if (self.label > ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "9": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 7, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 7, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 101, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home\\n' != 'part /home --bytes-per-inode=4096\\n'\n- part /home\n+ part /home --bytes-per-inode=4096\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_PartData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode <= 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "module-name": "pykickstart.commands.partition"}, "111": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --onbiosdisk=\\n' != 'part /home\\n'\n- part /home --onbiosdisk=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -52,7 +52,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.onbiosdisk != ''):", "+        if (self.onbiosdisk in ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)"]]], "module-name": "pykickstart.commands.partition"}, "71": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 11, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 11, "line_number": 237}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -192,7 +192,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         F17_PartData.__init__(self, *args, **kwargs)", "-        self.hibernation = kwargs.get('hibernation', False)", "+        self.hibernation = kwargs.get('hibernation', True)", "         self.cipher = kwargs.get('cipher', '')", " ", "     def _getArgsAsStr(self):"]]], "module-name": "pykickstart.commands.partition"}, "197": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 54, in runTest\n    self.assert_parse(\"part / --onbiosdisk=hda --size=100\", \"part / --onbiosdisk=hda --size=100%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --size=100\\n' != 'part / --onbiosdisk=hda --size=100\\n'\n- part / --size=100\n+ part / --onbiosdisk=hda --size=100\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -52,7 +52,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.onbiosdisk != ''):", "+        if (self.onbiosdisk < ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)"]]], "module-name": "pykickstart.commands.partition"}, "201": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 6, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 45, in runTest\n    \"part raid.1 --end=10 --start=1%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part raid.1 --end=10\\n' != 'part raid.1 --end=10 --start=1\\n'\n- part raid.1 --end=10\n+ part raid.1 --end=10 --start=1\n?                     ++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -62,7 +62,7 @@", "             retval += ' --recommended'", "         if (self.size and (self.size != 0)):", "             retval += (' --size=%s' % self.size)", "-        if (hasattr(self, 'start') and (self.start != 0)):", "+        if (hasattr(self, 'start') and (self.start < 0)):", "             retval += (' --start=%s' % self.start)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "191": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 15, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 15, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 95, in runTest\n    self.assertEqual(parser.__str__(), \"# Disk partitioning information\\npart /home\\n\")\nAssertionError: '' != '# Disk partitioning information\\npart /home\\n'\n+ # Disk partitioning information\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -231,7 +231,7 @@", "         retval = ''", "         for part in self.partitions:", "             retval += part.__str__()", "-        if (retval != ''):", "+        if (retval is ''):", "             return ('# Disk partitioning information\\n' + retval)", "         else:", "             return ''"]]], "module-name": "pykickstart.commands.partition"}, "188": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 12, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 12, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 144, in runTest\n    \"part / --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --encrypted\\n' != 'part / --encrypted --passphrase=\"blahblah\"\\n'\n- part / --encrypted\n+ part / --encrypted --passphrase=\"blahblah\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -127,7 +127,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase is ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "28": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 6, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -62,7 +62,7 @@", "             retval += ' --recommended'", "         if (self.size and (self.size != 0)):", "             retval += (' --size=%s' % self.size)", "-        if (hasattr(self, 'start') and (self.start != 0)):", "+        if (hasattr(self, 'start') and (self.start > 0)):", "             retval += (' --start=%s' % self.start)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "120": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 11, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 11, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fsprofile=\"\"\\n' != 'part /home\\n'\n- part /home --fsprofile=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -123,7 +123,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_PartData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile in ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.partition"}, "109": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.partition\", line 93, in __str__\n  File \"pykickstart.commands.partition\", line 153, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 107, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 66, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -42,7 +42,7 @@", "             retval += ' --active'", "         if self.primOnly:", "             retval += ' --asprimary'", "-        if (hasattr(self, 'end') and (self.end != 0)):", "+        if (hasattr(self, 'end') and (self.end in 0)):", "             retval += (' --end=%s' % self.end)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.partition"}, "97": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 13, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 13, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -146,7 +146,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F11_PartData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert not in '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.partition"}, "163": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 10, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 10, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 135, in runTest\n    self.assertEqual(data._getArgsAsStr(), \" --bytes-per-inode=4096 --encrypted\")\nAssertionError: ' --bytes-per-inode=4096 --encrypted --passphrase=\"\"' != ' --bytes-per-inode=4096 --encrypted'\n-  --bytes-per-inode=4096 --encrypted --passphrase=\"\"\n?                                    ----------------\n+  --bytes-per-inode=4096 --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -104,7 +104,7 @@", "         retval = FC4_PartData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase >= ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "4": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --onbiosdisk=\\n' != 'part /home\\n'\n- part /home --onbiosdisk=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -52,7 +52,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.onbiosdisk != ''):", "+        if (self.onbiosdisk <= ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)"]]], "module-name": "pykickstart.commands.partition"}, "241": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_GtE", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --maxsize=0\\n' != 'part /home\\n'\n- part /home --maxsize=0\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -48,7 +48,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB >= 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.partition"}, "43": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_Lt", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 243, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 227, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 212, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 205, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 55, in runTest\n    self.assert_parse(\"part swap --grow --maxsize=100\", \"part swap --grow --maxsize=100%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 644, in parse\n  File \"pykickstart.commands.partition\", line 621, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nThe --fstype=tmpfs option can't be used together with --grow or --maxsize\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -399,7 +399,7 @@", "         if self.handler.autopart.seen:", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if (retval.fstype == 'tmpfs'):", "+        if (retval.fstype < 'tmpfs'):", "             if (retval.grow or (retval.maxSizeMB != 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))"]]], "module-name": "pykickstart.commands.partition"}, "98": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 14, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 14, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -211,7 +211,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F18_PartData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts not in ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "74": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 14, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 14, "line_number": 360}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --grow\\n' != 'part /home\\n'\n- part /home --grow\n?           -------\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -250,7 +250,7 @@", "         op.add_argument('--start', type=int, version=FC3, help='')", "         op.add_argument('--end', type=int, version=FC3, help='')", "         op.add_argument('--fstype', '--type', dest='fstype', version=FC3, help='\\n                        Sets the file system type for the partition. Valid\\n                        values include ext4, ext3, ext2, xfs, btrfs, swap, and\\n                        vfat. Other filesystems may be valid depending on\\n                        command line arguments passed to anaconda to enable\\n                        other filesystems.')", "-        op.add_argument('--grow', action='store_true', default=False, version=FC3, help='\\n                        Tells the partition to grow to fill available space\\n                        (if any), or up to the maximum size setting. Note that\\n                        ``--grow`` is not supported for partitions containing a\\n                        RAID volume on top of them.')", "+        op.add_argument('--grow', action='store_true', default=True, version=FC3, help='\\n                        Tells the partition to grow to fill available space\\n                        (if any), or up to the maximum size setting. Note that\\n                        ``--grow`` is not supported for partitions containing a\\n                        RAID volume on top of them.')", "         op.add_argument('--maxsize', dest='maxSizeMB', type=int, version=FC3, help='\\n                        The maximum size in MiB the partition may grow to.\\n                        Specify an integer value here, and do not append any\\n                        units. This option is only relevant if ``--grow`` is\\n                        specified as well.')", "         op.add_argument('--noformat', dest='format', version=FC3, action='store_false', default=True, help='\\n                        Tells the installation program not to format the\\n                        partition, for use with the ``--onpart`` command.')", "         op.add_argument('--onbiosdisk', version=FC3, help='\\n                        Forces the partition to be created on a particular disk\\n                        as discovered by the BIOS.')"]]], "module-name": "pykickstart.commands.partition"}, "205": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 10, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 10, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 125, in runTest\n    \"part / --bytes-per-inode=4096 --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --bytes-per-inode=4096 --encrypted\\n' != 'part / --bytes-per-inode=4096 --encrypted --passphrase=\"blahblah\"\\n'\n- part / --bytes-per-inode=4096 --encrypted\n+ part / --bytes-per-inode=4096 --encrypted --passphrase=\"blahblah\"\n?                                          ++++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -104,7 +104,7 @@", "         retval = FC4_PartData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase < ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "30": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 8, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 8, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -85,7 +85,7 @@", "         retval = FC3_PartData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts > ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         if (self.label != ''):", "             retval += (' --label=%s' % self.label)"]]], "module-name": "pykickstart.commands.partition"}, "25": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -54,7 +54,7 @@", "             retval += ' --noformat'", "         if (self.onbiosdisk != ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "-        if (self.disk != ''):", "+        if (self.disk > ''):", "             retval += (' --ondisk=%s' % self.disk)", "         if (self.onPart != ''):", "             retval += (' --onpart=%s' % self.onPart)"]]], "module-name": "pykickstart.commands.partition"}, "90": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 6, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.partition\", line 93, in __str__\n  File \"pykickstart.commands.partition\", line 153, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 107, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 86, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -62,7 +62,7 @@", "             retval += ' --recommended'", "         if (self.size and (self.size != 0)):", "             retval += (' --size=%s' % self.size)", "-        if (hasattr(self, 'start') and (self.start != 0)):", "+        if (hasattr(self, 'start') and (self.start not in 0)):", "             retval += (' --start=%s' % self.start)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "33": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 11, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 11, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -123,7 +123,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_PartData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile > ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.partition"}, "57": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_Is", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -31,7 +31,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint is y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.partition"}, "36": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 14, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 14, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -211,7 +211,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F18_PartData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts > ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "124": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 15, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 15, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 95, in runTest\n    self.assertEqual(parser.__str__(), \"# Disk partitioning information\\npart /home\\n\")\nAssertionError: '' != '# Disk partitioning information\\npart /home\\n'\n+ # Disk partitioning information\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -231,7 +231,7 @@", "         retval = ''", "         for part in self.partitions:", "             retval += part.__str__()", "-        if (retval != ''):", "+        if (retval in ''):", "             return ('# Disk partitioning information\\n' + retval)", "         else:", "             return ''"]]], "module-name": "pykickstart.commands.partition"}, "173": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_IsNot", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -31,7 +31,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint is not y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.partition"}, "100": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 16, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 16, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 404, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -262,7 +262,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) not in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'partition', 'options': extra}"]]], "module-name": "pykickstart.commands.partition"}, "162": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 9, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 9, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --label=\\n' != 'part /home\\n'\n- part /home --label=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -87,7 +87,7 @@", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "-        if (self.label != ''):", "+        if (self.label >= ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "85": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -44,7 +44,7 @@", "             retval += ' --asprimary'", "         if (hasattr(self, 'end') and (self.end != 0)):", "             retval += (' --end=%s' % self.end)", "-        if (self.fstype != ''):", "+        if (self.fstype not in ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "module-name": "pykickstart.commands.partition"}, "104": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_LtE", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 408, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to partition command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -264,7 +264,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) <= 0):", "             mapping = {'command': 'partition', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         pd = self.dataClass()"]]], "module-name": "pykickstart.commands.partition"}, "234": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 17, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 17, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint == 'swap') and (pd in self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "64": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 4, "line_number": 45}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 135, in runTest\n    self.assertEqual(data._getArgsAsStr(), \" --bytes-per-inode=4096 --encrypted\")\nAssertionError: ' --recommended --bytes-per-inode=4096 --encrypted' != ' --bytes-per-inode=4096 --encrypted'\n-  --recommended --bytes-per-inode=4096 --encrypted\n? --------------\n+  --bytes-per-inode=4096 --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -23,7 +23,7 @@", "         self.onbiosdisk = kwargs.get('onbiosdisk', '')", "         self.disk = kwargs.get('disk', '')", "         self.onPart = kwargs.get('onPart', '')", "-        self.recommended = kwargs.get('recommended', False)", "+        self.recommended = kwargs.get('recommended', True)", "         self.size = kwargs.get('size', None)", "         self.start = kwargs.get('start', 0)", "         self.mountpoint = kwargs.get('mountpoint', '')"]]], "module-name": "pykickstart.commands.partition"}, "181": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 5, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 54, in runTest\n    self.assert_parse(\"part / --onbiosdisk=hda --size=100\", \"part / --onbiosdisk=hda --size=100%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --onbiosdisk=hda\\n' != 'part / --onbiosdisk=hda --size=100\\n'\n- part / --onbiosdisk=hda\n+ part / --onbiosdisk=hda --size=100\n?                        +++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -60,7 +60,7 @@", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'", "-        if (self.size and (self.size != 0)):", "+        if (self.size and (self.size is 0)):", "             retval += (' --size=%s' % self.size)", "         if (hasattr(self, 'start') and (self.start != 0)):", "             retval += (' --start=%s' % self.start)"]]], "module-name": "pykickstart.commands.partition"}, "101": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 17, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 17, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint not in 'swap') and (pd in self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "224": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 7, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 7, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 101, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home\\n' != 'part /home --bytes-per-inode=4096\\n'\n- part /home\n+ part /home --bytes-per-inode=4096\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_PartData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode == 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "module-name": "pykickstart.commands.partition"}, "59": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_Is", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -399,7 +399,7 @@", "         if self.handler.autopart.seen:", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if (retval.fstype == 'tmpfs'):", "+        if (retval.fstype is 'tmpfs'):", "             if (retval.grow or (retval.maxSizeMB != 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))"]]], "module-name": "pykickstart.commands.partition"}, "211": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 16, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 16, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -262,7 +262,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) < 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'partition', 'options': extra}"]]], "module-name": "pykickstart.commands.partition"}, "161": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 8, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 8, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fsoptions=\"\"\\n' != 'part /home\\n'\n- part /home --fsoptions=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -85,7 +85,7 @@", "         retval = FC3_PartData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts >= ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         if (self.label != ''):", "             retval += (' --label=%s' % self.label)"]]], "module-name": "pykickstart.commands.partition"}, "185": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 9, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 9, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --label=\\n' != 'part /home\\n'\n- part /home --label=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -87,7 +87,7 @@", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "-        if (self.label != ''):", "+        if (self.label is ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "125": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 16, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 16, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 404, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -262,7 +262,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'partition', 'options': extra}"]]], "module-name": "pykickstart.commands.partition"}, "141": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 4, "line_number": 72}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -48,7 +48,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB > 1):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.partition"}, "77": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 17, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 17, "line_number": 455}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 121, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 101, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --bytes-per-inode=4096 --encrypted\\n' != 'part /home --bytes-per-inode=4096\\n'\n- part /home --bytes-per-inode=4096 --encrypted\n?                                  ------------\n+ part /home --bytes-per-inode=4096\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -299,7 +299,7 @@", " ", "     def _getParser(self):", "         op = FC4_Partition._getParser(self)", "-        op.add_argument('--encrypted', action='store_true', version=RHEL5, default=False, help='\\n                        Specify that this partition should be encrypted.')", "+        op.add_argument('--encrypted', action='store_true', version=RHEL5, default=True, help='\\n                        Specify that this partition should be encrypted.')", "         op.add_argument('--passphrase', version=RHEL5, help='\\n                        Specify the passphrase to use when encrypting this\\n                        partition. Without the above --encrypted option, this\\n                        option does nothing. If no passphrase is specified, the\\n                        default system-wide one is used, or the installer will\\n                        stop and prompt if there is no default.')", "         return op", " "]]], "module-name": "pykickstart.commands.partition"}, "35": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 13, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 13, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -146,7 +146,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F11_PartData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert > '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.partition"}, "236": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_In_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_In_with_Lt", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 416, in parse\nTypeError: unorderable types: F12_PartData() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint != 'swap') and (pd < self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "7": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 5, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 54, in runTest\n    self.assert_parse(\"part / --onbiosdisk=hda --size=100\", \"part / --onbiosdisk=hda --size=100%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --onbiosdisk=hda\\n' != 'part / --onbiosdisk=hda --size=100\\n'\n- part / --onbiosdisk=hda\n+ part / --onbiosdisk=hda --size=100\n?                        +++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -60,7 +60,7 @@", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'", "-        if (self.size and (self.size != 0)):", "+        if (self.size and (self.size <= 0)):", "             retval += (' --size=%s' % self.size)", "         if (hasattr(self, 'start') and (self.start != 0)):", "             retval += (' --start=%s' % self.start)"]]], "module-name": "pykickstart.commands.partition"}, "187": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 11, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 11, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fsprofile=\"\"\\n' != 'part /home\\n'\n- part /home --fsprofile=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -123,7 +123,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_PartData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile is ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.partition"}, "40": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 18, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 18, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -400,7 +400,7 @@", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         if (retval.fstype == 'tmpfs'):", "-            if (retval.grow or (retval.maxSizeMB != 0)):", "+            if (retval.grow or (retval.maxSizeMB > 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "module-name": "pykickstart.commands.partition"}, "210": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 15, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 15, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 95, in runTest\n    self.assertEqual(parser.__str__(), \"# Disk partitioning information\\npart /home\\n\")\nAssertionError: '' != '# Disk partitioning information\\npart /home\\n'\n+ # Disk partitioning information\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -231,7 +231,7 @@", "         retval = ''", "         for part in self.partitions:", "             retval += part.__str__()", "-        if (retval != ''):", "+        if (retval < ''):", "             return ('# Disk partitioning information\\n' + retval)", "         else:", "             return ''"]]], "module-name": "pykickstart.commands.partition"}, "208": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 13, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 13, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 166, in runTest\n    \"part / --encrypted --escrowcert=\\\"http://x/y\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --encrypted\\n' != 'part / --encrypted --escrowcert=\"http://x/y\"\\n'\n- part / --encrypted\n+ part / --encrypted --escrowcert=\"http://x/y\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -146,7 +146,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F11_PartData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert < '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.partition"}, "65": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 5, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 5, "line_number": 52}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 87, in runTest\n    self.assertFalse(pd == \"\")\nAssertionError: True is not false\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -30,7 +30,7 @@", " ", "     def __eq__(self, y):", "         if (not y):", "-            return False", "+            return True", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):"]]], "module-name": "pykickstart.commands.partition"}, "127": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 18, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 18, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -400,7 +400,7 @@", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         if (retval.fstype == 'tmpfs'):", "-            if (retval.grow or (retval.maxSizeMB != 0)):", "+            if (retval.grow or (retval.maxSizeMB in 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "module-name": "pykickstart.commands.partition"}, "218": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fstype=\"\"\\n' != 'part /home\\n'\n- part /home --fstype=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -44,7 +44,7 @@", "             retval += ' --asprimary'", "         if (hasattr(self, 'end') and (self.end != 0)):", "             retval += (' --end=%s' % self.end)", "-        if (self.fstype != ''):", "+        if (self.fstype == ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "module-name": "pykickstart.commands.partition"}, "87": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -54,7 +54,7 @@", "             retval += ' --noformat'", "         if (self.onbiosdisk != ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "-        if (self.disk != ''):", "+        if (self.disk not in ''):", "             retval += (' --ondisk=%s' % self.disk)", "         if (self.onPart != ''):", "             retval += (' --onpart=%s' % self.onPart)"]]], "module-name": "pykickstart.commands.partition"}, "134": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_LtE", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\n  File \"pykickstart.commands.partition\", line 57, in __ne__\nTypeError: unorderable types: F12_PartData() <= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -34,7 +34,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self <= y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.partition"}, "245": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_GtE", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -399,7 +399,7 @@", "         if self.handler.autopart.seen:", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if (retval.fstype == 'tmpfs'):", "+        if (retval.fstype >= 'tmpfs'):", "             if (retval.grow or (retval.maxSizeMB != 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))"]]], "module-name": "pykickstart.commands.partition"}, "193": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 17, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 17, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint is 'swap') and (pd in self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "27": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 5, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -60,7 +60,7 @@", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'", "-        if (self.size and (self.size != 0)):", "+        if (self.size and (self.size > 0)):", "             retval += (' --size=%s' % self.size)", "         if (hasattr(self, 'start') and (self.start != 0)):", "             retval += (' --start=%s' % self.start)"]]], "module-name": "pykickstart.commands.partition"}, "118": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 9, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 9, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --label=\\n' != 'part /home\\n'\n- part /home --label=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -87,7 +87,7 @@", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "-        if (self.label != ''):", "+        if (self.label in ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "1": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_In_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_In_with_Eq", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint != 'swap') and (pd == self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "23": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -44,7 +44,7 @@", "             retval += ' --asprimary'", "         if (hasattr(self, 'end') and (self.end != 0)):", "             retval += (' --end=%s' % self.end)", "-        if (self.fstype != ''):", "+        if (self.fstype > ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "module-name": "pykickstart.commands.partition"}, "184": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 8, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 8, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fsoptions=\"\"\\n' != 'part /home\\n'\n- part /home --fsoptions=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -85,7 +85,7 @@", "         retval = FC3_PartData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts is ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         if (self.label != ''):", "             retval += (' --label=%s' % self.label)"]]], "module-name": "pykickstart.commands.partition"}, "206": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 11, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 11, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 145, in runTest\n    self.assert_parse(\"part /home --fsprofile=blah\", \"part /home --fsprofile=\\\"blah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home\\n' != 'part /home --fsprofile=\"blah\"\\n'\n- part /home\n+ part /home --fsprofile=\"blah\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -123,7 +123,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_PartData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile < ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.partition"}, "160": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 7, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 7, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_PartData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode >= 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "module-name": "pykickstart.commands.partition"}, "95": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 11, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 11, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -123,7 +123,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_PartData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile not in ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.partition"}, "169": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 16, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 16, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 405, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for partition\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -262,7 +262,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) >= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'partition', 'options': extra}"]]], "module-name": "pykickstart.commands.partition"}, "216": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_In_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_In_with_Gt", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 416, in parse\nTypeError: unorderable types: F12_PartData() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint != 'swap') and (pd > self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "34": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 12, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 12, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -127,7 +127,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase > ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "29": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 7, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 7, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_PartData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode > 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "module-name": "pykickstart.commands.partition"}, "130": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_In_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_In_with_NotEq", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 417, in parse\nUserWarning: A partition with the mountpoint /home has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint != 'swap') and (pd != self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "222": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 5, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 54, in runTest\n    self.assert_parse(\"part / --onbiosdisk=hda --size=100\", \"part / --onbiosdisk=hda --size=100%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --onbiosdisk=hda\\n' != 'part / --onbiosdisk=hda --size=100\\n'\n- part / --onbiosdisk=hda\n+ part / --onbiosdisk=hda --size=100\n?                        +++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -60,7 +60,7 @@", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'", "-        if (self.size and (self.size != 0)):", "+        if (self.size and (self.size == 0)):", "             retval += (' --size=%s' % self.size)", "         if (hasattr(self, 'start') and (self.start != 0)):", "             retval += (' --start=%s' % self.start)"]]], "module-name": "pykickstart.commands.partition"}, "115": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 6, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.partition\", line 93, in __str__\n  File \"pykickstart.commands.partition\", line 153, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 107, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 86, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -62,7 +62,7 @@", "             retval += ' --recommended'", "         if (self.size and (self.size != 0)):", "             retval += (' --size=%s' % self.size)", "-        if (hasattr(self, 'start') and (self.start != 0)):", "+        if (hasattr(self, 'start') and (self.start in 0)):", "             retval += (' --start=%s' % self.start)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "178": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --onbiosdisk=\\n' != 'part /home\\n'\n- part /home --onbiosdisk=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -52,7 +52,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.onbiosdisk != ''):", "+        if (self.onbiosdisk is ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)"]]], "module-name": "pykickstart.commands.partition"}, "144": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 7, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 7, "line_number": 102}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 101, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --bytes-per-inode=4097\\n' != 'part /home --bytes-per-inode=4096\\n'\n- part /home --bytes-per-inode=4097\n?                                 ^\n+ part /home --bytes-per-inode=4096\n?                                 ^\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -77,7 +77,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         FC3_PartData.__init__(self, *args, **kwargs)", "-        self.bytesPerInode = kwargs.get('bytesPerInode', 4096)", "+        self.bytesPerInode = kwargs.get('bytesPerInode', 4097)", "         self.fsopts = kwargs.get('fsopts', '')", "         self.label = kwargs.get('label', '')", " "]]], "module-name": "pykickstart.commands.partition"}, "80": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "20", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 20, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 20, "line_number": 535}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 184, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --hibernation\\n' != 'part /home\\n'\n- part /home --hibernation\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -342,7 +342,7 @@", "     def _getParser(self):", "         op = F12_Partition._getParser(self)", "         op.add_argument('--cipher', version=RHEL6, help='\\n                        Only relevant if ``--encrypted`` is specified.\\n                        Specifies which encryption algorithm should be used to\\n                        encrypt the filesystem.')", "-        op.add_argument('--hibernation', action='store_true', default=False, version=RHEL6, help='\\n                        This option can be used to automatically determine the\\n                        size of the swap partition big enough for hibernation.\\n                        ')", "+        op.add_argument('--hibernation', action='store_true', default=True, version=RHEL6, help='\\n                        This option can be used to automatically determine the\\n                        size of the swap partition big enough for hibernation.\\n                        ')", "         return op", " ", "     def parse(self, args):"]]], "module-name": "pykickstart.commands.partition"}, "108": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_Gt", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -399,7 +399,7 @@", "         if self.handler.autopart.seen:", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if (retval.fstype == 'tmpfs'):", "+        if (retval.fstype > 'tmpfs'):", "             if (retval.grow or (retval.maxSizeMB != 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))"]]], "module-name": "pykickstart.commands.partition"}, "22": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -42,7 +42,7 @@", "             retval += ' --active'", "         if self.primOnly:", "             retval += ' --asprimary'", "-        if (hasattr(self, 'end') and (self.end != 0)):", "+        if (hasattr(self, 'end') and (self.end > 0)):", "             retval += (' --end=%s' % self.end)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.partition"}, "223": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 6, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --start=0\\n' != 'part /home\\n'\n- part /home --start=0\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -62,7 +62,7 @@", "             retval += ' --recommended'", "         if (self.size and (self.size != 0)):", "             retval += (' --size=%s' % self.size)", "-        if (hasattr(self, 'start') and (self.start != 0)):", "+        if (hasattr(self, 'start') and (self.start == 0)):", "             retval += (' --start=%s' % self.start)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "47": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_Lt", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 55, in runTest\n    self.assert_parse(\"part swap --grow --maxsize=100\", \"part swap --grow --maxsize=100%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part swap --grow\\n' != 'part swap --grow --maxsize=100\\n'\n- part swap --grow\n+ part swap --grow --maxsize=100\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -48,7 +48,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB < 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.partition"}, "166": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 13, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 13, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 144, in runTest\n    \"part / --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --encrypted --passphrase=\"blahblah\" --escrowcert=\"\"\\n' != 'part / --encrypted --passphrase=\"blahblah\"\\n'\n- part / --encrypted --passphrase=\"blahblah\" --escrowcert=\"\"\n?                                           ----------------\n+ part / --encrypted --passphrase=\"blahblah\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -146,7 +146,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F11_PartData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert >= '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.partition"}, "217": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --end=0\\n' != 'part /home\\n'\n- part /home --end=0\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -42,7 +42,7 @@", "             retval += ' --active'", "         if self.primOnly:", "             retval += ' --asprimary'", "-        if (hasattr(self, 'end') and (self.end != 0)):", "+        if (hasattr(self, 'end') and (self.end == 0)):", "             retval += (' --end=%s' % self.end)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.partition"}, "142": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 5, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 5, "line_number": 84}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -60,7 +60,7 @@", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'", "-        if (self.size and (self.size != 0)):", "+        if (self.size and (self.size != 1)):", "             retval += (' --size=%s' % self.size)", "         if (hasattr(self, 'start') and (self.start != 0)):", "             retval += (' --start=%s' % self.start)"]]], "module-name": "pykickstart.commands.partition"}, "55": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_NotEq", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\n  File \"pykickstart.commands.partition\", line 57, in __ne__\nRecursionError: maximum recursion depth exceeded in comparison\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -34,7 +34,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self != y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.partition"}, "13": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 11, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 11, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fsprofile=\"\"\\n' != 'part /home\\n'\n- part /home --fsprofile=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -123,7 +123,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_PartData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile <= ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.partition"}, "70": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 10, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 10, "line_number": 220}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -178,7 +178,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         F14_PartData.__init__(self, *args, **kwargs)", "-        self.resize = kwargs.get('resize', False)", "+        self.resize = kwargs.get('resize', True)", " ", "     def _getArgsAsStr(self):", "         retval = F14_PartData._getArgsAsStr(self)"]]], "module-name": "pykickstart.commands.partition"}, "233": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 16, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 16, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 405, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for partition\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -262,7 +262,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'partition', 'options': extra}"]]], "module-name": "pykickstart.commands.partition"}, "53": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_NotEq", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -264,7 +264,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) != 0):", "             mapping = {'command': 'partition', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         pd = self.dataClass()"]]], "module-name": "pykickstart.commands.partition"}, "68": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 8, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 8, "line_number": 177}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -142,7 +142,7 @@", "     def __init__(self, *args, **kwargs):", "         F11_PartData.__init__(self, *args, **kwargs)", "         self.escrowcert = kwargs.get('escrowcert', '')", "-        self.backuppassphrase = kwargs.get('backuppassphrase', False)", "+        self.backuppassphrase = kwargs.get('backuppassphrase', True)", " ", "     def _getArgsAsStr(self):", "         retval = F11_PartData._getArgsAsStr(self)"]]], "module-name": "pykickstart.commands.partition"}, "112": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --ondisk=\\n' != 'part /home\\n'\n- part /home --ondisk=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -54,7 +54,7 @@", "             retval += ' --noformat'", "         if (self.onbiosdisk != ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "-        if (self.disk != ''):", "+        if (self.disk in ''):", "             retval += (' --ondisk=%s' % self.disk)", "         if (self.onPart != ''):", "             retval += (' --onpart=%s' % self.onPart)"]]], "module-name": "pykickstart.commands.partition"}, "6": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --onpart=\\n' != 'part /home\\n'\n- part /home --onpart=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -56,7 +56,7 @@", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)", "-        if (self.onPart != ''):", "+        if (self.onPart <= ''):", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'"]]], "module-name": "pykickstart.commands.partition"}, "119": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 10, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 10, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 125, in runTest\n    \"part / --bytes-per-inode=4096 --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --bytes-per-inode=4096 --encrypted\\n' != 'part / --bytes-per-inode=4096 --encrypted --passphrase=\"blahblah\"\\n'\n- part / --bytes-per-inode=4096 --encrypted\n+ part / --bytes-per-inode=4096 --encrypted --passphrase=\"blahblah\"\n?                                          ++++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -104,7 +104,7 @@", "         retval = FC4_PartData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase in ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "174": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_IsNot", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -34,7 +34,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is not y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.partition"}, "15": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 13, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 13, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 144, in runTest\n    \"part / --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --encrypted --passphrase=\"blahblah\" --escrowcert=\"\"\\n' != 'part / --encrypted --passphrase=\"blahblah\"\\n'\n- part / --encrypted --passphrase=\"blahblah\" --escrowcert=\"\"\n?                                           ----------------\n+ part / --encrypted --passphrase=\"blahblah\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -146,7 +146,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F11_PartData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert <= '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.partition"}, "20": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 18, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 18, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -400,7 +400,7 @@", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         if (retval.fstype == 'tmpfs'):", "-            if (retval.grow or (retval.maxSizeMB != 0)):", "+            if (retval.grow or (retval.maxSizeMB <= 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "module-name": "pykickstart.commands.partition"}, "198": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 51, in runTest\n    \"part pv.1 --ondisk=sda --onpart=sda1 --recommended%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part pv.1 --onpart=sda1 --recommended\\n' != 'part pv.1 --ondisk=sda --onpart=sda1 --recommended\\n'\n- part pv.1 --onpart=sda1 --recommended\n+ part pv.1 --ondisk=sda --onpart=sda1 --recommended\n?          +++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -54,7 +54,7 @@", "             retval += ' --noformat'", "         if (self.onbiosdisk != ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "-        if (self.disk != ''):", "+        if (self.disk < ''):", "             retval += (' --ondisk=%s' % self.disk)", "         if (self.onPart != ''):", "             retval += (' --onpart=%s' % self.onPart)"]]], "module-name": "pykickstart.commands.partition"}, "145": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 8, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 8, "line_number": 109}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_PartData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 1)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "module-name": "pykickstart.commands.partition"}, "82": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "22", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 22, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 22, "line_number": 593}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 227, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 212, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 205, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --hibernation\\n' != 'part /home\\n'\n- part /home --hibernation\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -386,7 +386,7 @@", " ", "     def _getParser(self):", "         op = F17_Partition._getParser(self)", "-        op.add_argument('--hibernation', action='store_true', default=False, version=F18, help='\\n                        This option can be used to automatically determine the\\n                        size of the swap partition big enough for hibernation.\\n                        ')", "+        op.add_argument('--hibernation', action='store_true', default=True, version=F18, help='\\n                        This option can be used to automatically determine the\\n                        size of the swap partition big enough for hibernation.\\n                        ')", "         op.add_argument('--cipher', version=F18, help='\\n                        Only relevant if ``--encrypted`` is specified. Specifies\\n                        which encryption algorithm should be used to encrypt the\\n                        filesystem.')", "         return op", " "]]], "module-name": "pykickstart.commands.partition"}, "186": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 10, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 10, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 125, in runTest\n    \"part / --bytes-per-inode=4096 --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --bytes-per-inode=4096 --encrypted\\n' != 'part / --bytes-per-inode=4096 --encrypted --passphrase=\"blahblah\"\\n'\n- part / --bytes-per-inode=4096 --encrypted\n+ part / --bytes-per-inode=4096 --encrypted --passphrase=\"blahblah\"\n?                                          ++++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -104,7 +104,7 @@", "         retval = FC4_PartData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase is ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "117": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 8, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 8, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fsoptions=\"\"\\n' != 'part /home\\n'\n- part /home --fsoptions=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -85,7 +85,7 @@", "         retval = FC3_PartData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts in ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         if (self.label != ''):", "             retval += (' --label=%s' % self.label)"]]], "module-name": "pykickstart.commands.partition"}, "192": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 16, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 16, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 405, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for partition\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -262,7 +262,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) is 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'partition', 'options': extra}"]]], "module-name": "pykickstart.commands.partition"}, "61": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 1, "line_number": 36}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 135, in runTest\n    self.assertEqual(data._getArgsAsStr(), \" --bytes-per-inode=4096 --encrypted\")\nAssertionError: ' --asprimary --bytes-per-inode=4096 --encrypted' != ' --bytes-per-inode=4096 --encrypted'\n-  --asprimary --bytes-per-inode=4096 --encrypted\n? ------------\n+  --bytes-per-inode=4096 --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -14,7 +14,7 @@", "     def __init__(self, *args, **kwargs):", "         BaseData.__init__(self, *args, **kwargs)", "         self.active = kwargs.get('active', False)", "-        self.primOnly = kwargs.get('primOnly', False)", "+        self.primOnly = kwargs.get('primOnly', True)", "         self.end = kwargs.get('end', 0)", "         self.fstype = kwargs.get('fstype', '')", "         self.grow = kwargs.get('grow', False)"]]], "module-name": "pykickstart.commands.partition"}, "137": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 0, "line_number": 37}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --end=1\\n' != 'part /home\\n'\n- part /home --end=1\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -15,7 +15,7 @@", "         BaseData.__init__(self, *args, **kwargs)", "         self.active = kwargs.get('active', False)", "         self.primOnly = kwargs.get('primOnly', False)", "-        self.end = kwargs.get('end', 0)", "+        self.end = kwargs.get('end', 1)", "         self.fstype = kwargs.get('fstype', '')", "         self.grow = kwargs.get('grow', False)", "         self.maxSizeMB = kwargs.get('maxSizeMB', 0)"]]], "module-name": "pykickstart.commands.partition"}, "88": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -56,7 +56,7 @@", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)", "-        if (self.onPart != ''):", "+        if (self.onPart not in ''):", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'"]]], "module-name": "pykickstart.commands.partition"}, "92": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 8, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 8, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -85,7 +85,7 @@", "         retval = FC3_PartData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts not in ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         if (self.label != ''):", "             retval += (' --label=%s' % self.label)"]]], "module-name": "pykickstart.commands.partition"}, "179": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --ondisk=\\n' != 'part /home\\n'\n- part /home --ondisk=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -54,7 +54,7 @@", "             retval += ' --noformat'", "         if (self.onbiosdisk != ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "-        if (self.disk != ''):", "+        if (self.disk is ''):", "             retval += (' --ondisk=%s' % self.disk)", "         if (self.onPart != ''):", "             retval += (' --onpart=%s' % self.onPart)"]]], "module-name": "pykickstart.commands.partition"}, "18": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 16, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 16, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 405, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for partition\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -262,7 +262,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) <= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'partition', 'options': extra}"]]], "module-name": "pykickstart.commands.partition"}, "128": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_IsNot", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -48,7 +48,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB is not 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.partition"}, "237": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_In", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.partition\", line 93, in __str__\n  File \"pykickstart.commands.partition\", line 180, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 153, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 107, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 72, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -48,7 +48,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB in 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.partition"}, "242": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_GtE", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 408, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to partition command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -264,7 +264,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) >= 0):", "             mapping = {'command': 'partition', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         pd = self.dataClass()"]]], "module-name": "pykickstart.commands.partition"}, "221": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Eq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --onpart=\\n' != 'part /home\\n'\n- part /home --onpart=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -56,7 +56,7 @@", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)", "-        if (self.onPart != ''):", "+        if (self.onPart == ''):", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'"]]], "module-name": "pykickstart.commands.partition"}, "76": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 16, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 16, "line_number": 392}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --recommended\\n' != 'part /home\\n'\n- part /home --recommended\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -256,7 +256,7 @@", "         op.add_argument('--onbiosdisk', version=FC3, help='\\n                        Forces the partition to be created on a particular disk\\n                        as discovered by the BIOS.')", "         op.add_argument('--ondisk', '--ondrive', dest='disk', version=FC3, help='\\n                        Forces the partition to be created on a particular disk.\\n                        ')", "         op.add_argument('--onpart', '--usepart', dest='onPart', type=part_cb, version=FC3, help='\\n                        Put the partition on an already existing device. Use\\n                        \"--onpart=LABEL=name\" or \"--onpart=UUID=name\" to specify\\n                        a partition by label or uuid respectively.\\n\\n                        Anaconda may create partitions in any particular order,\\n                        so it is safer to use labels than absolute partition\\n                        names.')", "-        op.add_argument('--recommended', action='store_true', default=False, version=FC3, help='\\n                        Determine the size of the partition automatically.\\n                        ')", "+        op.add_argument('--recommended', action='store_true', default=True, version=FC3, help='\\n                        Determine the size of the partition automatically.\\n                        ')", "         op.add_argument('--size', type=int, version=FC3, help='\\n                        The minimum partition size in MiB. Specify an integer\\n                        value here and do not append any units.')", "         return op", " "]]], "module-name": "pykickstart.commands.partition"}, "168": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 15, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 15, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -231,7 +231,7 @@", "         retval = ''", "         for part in self.partitions:", "             retval += part.__str__()", "-        if (retval != ''):", "+        if (retval >= ''):", "             return ('# Disk partitioning information\\n' + retval)", "         else:", "             return ''"]]], "module-name": "pykickstart.commands.partition"}, "51": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_In", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 243, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 227, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 212, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 205, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 55, in runTest\n    self.assert_parse(\"part swap --grow --maxsize=100\", \"part swap --grow --maxsize=100%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 644, in parse\n  File \"pykickstart.commands.partition\", line 621, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nThe --fstype=tmpfs option can't be used together with --grow or --maxsize\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -399,7 +399,7 @@", "         if self.handler.autopart.seen:", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if (retval.fstype == 'tmpfs'):", "+        if (retval.fstype in 'tmpfs'):", "             if (retval.grow or (retval.maxSizeMB != 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))"]]], "module-name": "pykickstart.commands.partition"}, "149": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 12, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 12, "line_number": 404}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 405, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for partition\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -262,7 +262,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) != 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'partition', 'options': extra}"]]], "module-name": "pykickstart.commands.partition"}, "12": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 10, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 10, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 125, in runTest\n    \"part / --bytes-per-inode=4096 --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --bytes-per-inode=4096 --encrypted\\n' != 'part / --bytes-per-inode=4096 --encrypted --passphrase=\"blahblah\"\\n'\n- part / --bytes-per-inode=4096 --encrypted\n+ part / --bytes-per-inode=4096 --encrypted --passphrase=\"blahblah\"\n?                                          ++++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -104,7 +104,7 @@", "         retval = FC4_PartData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase <= ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "56": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_NotEq", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 243, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 227, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 212, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 205, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 55, in runTest\n    self.assert_parse(\"part swap --grow --maxsize=100\", \"part swap --grow --maxsize=100%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 644, in parse\n  File \"pykickstart.commands.partition\", line 621, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nThe --fstype=tmpfs option can't be used together with --grow or --maxsize\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -399,7 +399,7 @@", "         if self.handler.autopart.seen:", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if (retval.fstype == 'tmpfs'):", "+        if (retval.fstype != 'tmpfs'):", "             if (retval.grow or (retval.maxSizeMB != 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))"]]], "module-name": "pykickstart.commands.partition"}, "96": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 12, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 12, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -127,7 +127,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase not in ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "58": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_Is", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -34,7 +34,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.partition"}, "3": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fstype=\"\"\\n' != 'part /home\\n'\n- part /home --fstype=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -44,7 +44,7 @@", "             retval += ' --asprimary'", "         if (hasattr(self, 'end') and (self.end != 0)):", "             retval += (' --end=%s' % self.end)", "-        if (self.fstype != ''):", "+        if (self.fstype <= ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "module-name": "pykickstart.commands.partition"}, "244": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_GtE", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\n  File \"pykickstart.commands.partition\", line 57, in __ne__\nTypeError: unorderable types: F12_PartData() >= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -34,7 +34,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self >= y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.partition"}, "154": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fstype=\"\"\\n' != 'part /home\\n'\n- part /home --fstype=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -44,7 +44,7 @@", "             retval += ' --asprimary'", "         if (hasattr(self, 'end') and (self.end != 0)):", "             retval += (' --end=%s' % self.end)", "-        if (self.fstype != ''):", "+        if (self.fstype >= ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "module-name": "pykickstart.commands.partition"}, "200": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 5, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 54, in runTest\n    self.assert_parse(\"part / --onbiosdisk=hda --size=100\", \"part / --onbiosdisk=hda --size=100%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --onbiosdisk=hda\\n' != 'part / --onbiosdisk=hda --size=100\\n'\n- part / --onbiosdisk=hda\n+ part / --onbiosdisk=hda --size=100\n?                        +++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -60,7 +60,7 @@", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'", "-        if (self.size and (self.size != 0)):", "+        if (self.size and (self.size < 0)):", "             retval += (' --size=%s' % self.size)", "         if (hasattr(self, 'start') and (self.start != 0)):", "             retval += (' --start=%s' % self.start)"]]], "module-name": "pykickstart.commands.partition"}, "215": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_Is", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 408, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to partition command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -264,7 +264,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is 0):", "             mapping = {'command': 'partition', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         pd = self.dataClass()"]]], "module-name": "pykickstart.commands.partition"}, "155": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --onbiosdisk=\\n' != 'part /home\\n'\n- part /home --onbiosdisk=\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -52,7 +52,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.onbiosdisk != ''):", "+        if (self.onbiosdisk >= ''):", "             retval += (' --onbiosdisk=%s' % self.onbiosdisk)", "         if (self.disk != ''):", "             retval += (' --ondisk=%s' % self.disk)"]]], "module-name": "pykickstart.commands.partition"}, "159": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 6, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --start=0\\n' != 'part /home\\n'\n- part /home --start=0\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -62,7 +62,7 @@", "             retval += ' --recommended'", "         if (self.size and (self.size != 0)):", "             retval += (' --size=%s' % self.size)", "-        if (hasattr(self, 'start') and (self.start != 0)):", "+        if (hasattr(self, 'start') and (self.start >= 0)):", "             retval += (' --start=%s' % self.start)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "135": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Eq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Eq_with_LtE", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 243, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 227, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 212, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 205, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 55, in runTest\n    self.assert_parse(\"part swap --grow --maxsize=100\", \"part swap --grow --maxsize=100%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.partition\", line 644, in parse\n  File \"pykickstart.commands.partition\", line 621, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nThe --fstype=tmpfs option can't be used together with --grow or --maxsize\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -399,7 +399,7 @@", "         if self.handler.autopart.seen:", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if (retval.fstype == 'tmpfs'):", "+        if (retval.fstype <= 'tmpfs'):", "             if (retval.grow or (retval.maxSizeMB != 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))"]]], "module-name": "pykickstart.commands.partition"}, "38": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Gt", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 16, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 16, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -262,7 +262,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'partition')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'partition', 'options': extra}"]]], "module-name": "pykickstart.commands.partition"}, "122": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 13, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 13, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 144, in runTest\n    \"part / --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --encrypted --passphrase=\"blahblah\" --escrowcert=\"\"\\n' != 'part / --encrypted --passphrase=\"blahblah\"\\n'\n- part / --encrypted --passphrase=\"blahblah\" --escrowcert=\"\"\n?                                           ----------------\n+ part / --encrypted --passphrase=\"blahblah\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -146,7 +146,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F11_PartData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert in '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.partition"}, "19": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_LtE", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 17, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 17, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -271,7 +271,7 @@", "         self.set_to_obj(ns, pd)", "         pd.lineno = self.lineno", "         pd.mountpoint = ns.mntpoint[0]", "-        if ((pd.mountpoint != 'swap') and (pd in self.dataList())):", "+        if ((pd.mountpoint <= 'swap') and (pd in self.dataList())):", "             warnings.warn((_('A partition with the mountpoint %s has already been defined.') % pd.mountpoint))", "         return pd", " "]]], "module-name": "pykickstart.commands.partition"}, "165": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 12, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 12, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 164, in runTest\n    \"part / --encrypted\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --encrypted --passphrase=\"\"\\n' != 'part / --encrypted\\n'\n- part / --encrypted --passphrase=\"\"\n+ part / --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -127,7 +127,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase >= ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "78": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 18, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 18, "line_number": 482}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --encrypted\\n' != 'part /home\\n'\n- part /home --encrypted\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -311,7 +311,7 @@", "         op = FC4_Partition._getParser(self)", "         op.add_argument('--bytes-per-inode', deprecated=F9)", "         op.add_argument('--fsprofile', version=F9, help='\\n                        Specifies a usage type to be passed to the program that\\n                        makes a filesystem on this partition. A usage type\\n                        defines a variety of tuning parameters to be used when\\n                        making a filesystem. For this option to work, the\\n                        filesystem must support the concept of usage types and\\n                        there must be a configuration file that lists valid\\n                        types. For ext2/3/4, this configuration file is\\n                        ``/etc/mke2fs.conf``.')", "-        op.add_argument('--encrypted', action='store_true', version=F9, default=False, help='\\n                        Specify that this partition should be encrypted.')", "+        op.add_argument('--encrypted', action='store_true', version=F9, default=True, help='\\n                        Specify that this partition should be encrypted.')", "         op.add_argument('--passphrase', version=F9, help='\\n                        Specify the passphrase to use when encrypting this\\n                        partition. Without the above --encrypted option, this\\n                        option does nothing. If no passphrase is specified, the\\n                        default system-wide one is used, or the installer will\\n                        stop and prompt if there is no default.')", "         return op", " "]]], "module-name": "pykickstart.commands.partition"}, "89": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 5, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 54, in runTest\n    self.assert_parse(\"part / --onbiosdisk=hda --size=100\", \"part / --onbiosdisk=hda --size=100%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.partition\", line 93, in __str__\n  File \"pykickstart.commands.partition\", line 180, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 153, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 107, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 84, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -60,7 +60,7 @@", "             retval += (' --onpart=%s' % self.onPart)", "         if self.recommended:", "             retval += ' --recommended'", "-        if (self.size and (self.size != 0)):", "+        if (self.size and (self.size not in 0)):", "             retval += (' --size=%s' % self.size)", "         if (hasattr(self, 'start') and (self.start != 0)):", "             retval += (' --start=%s' % self.start)"]]], "module-name": "pykickstart.commands.partition"}, "143": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 6, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 6, "line_number": 86}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --start=0\\n' != 'part /home\\n'\n- part /home --start=0\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -62,7 +62,7 @@", "             retval += ' --recommended'", "         if (self.size and (self.size != 0)):", "             retval += (' --size=%s' % self.size)", "-        if (hasattr(self, 'start') and (self.start != 0)):", "+        if (hasattr(self, 'start') and (self.start != 1)):", "             retval += (' --start=%s' % self.start)", "         return retval", " "]]], "module-name": "pykickstart.commands.partition"}, "138": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 1, "line_number": 40}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --maxsize=1\\n' != 'part /home\\n'\n- part /home --maxsize=1\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -18,7 +18,7 @@", "         self.end = kwargs.get('end', 0)", "         self.fstype = kwargs.get('fstype', '')", "         self.grow = kwargs.get('grow', False)", "-        self.maxSizeMB = kwargs.get('maxSizeMB', 0)", "+        self.maxSizeMB = kwargs.get('maxSizeMB', 1)", "         self.format = kwargs.get('format', True)", "         self.onbiosdisk = kwargs.get('onbiosdisk', '')", "         self.disk = kwargs.get('disk', '')"]]], "module-name": "pykickstart.commands.partition"}, "153": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --end=0\\n' != 'part /home\\n'\n- part /home --end=0\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -42,7 +42,7 @@", "             retval += ' --active'", "         if self.primOnly:", "             retval += ' --asprimary'", "-        if (hasattr(self, 'end') and (self.end != 0)):", "+        if (hasattr(self, 'end') and (self.end >= 0)):", "             retval += (' --end=%s' % self.end)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.partition"}, "195": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 43, in runTest\n    \"part raid.1 --active --asprimary --end=10 --fstype=\\\"ext3\\\" --noformat%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part raid.1 --active --asprimary --fstype=\"ext3\" --noformat\\n' != 'part raid.1 --active --asprimary --end=10 --fstype=\"ext3\" --noformat\\n'\n- part raid.1 --active --asprimary --fstype=\"ext3\" --noformat\n+ part raid.1 --active --asprimary --end=10 --fstype=\"ext3\" --noformat\n?                                 +++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -42,7 +42,7 @@", "             retval += ' --active'", "         if self.primOnly:", "             retval += ' --asprimary'", "-        if (hasattr(self, 'end') and (self.end != 0)):", "+        if (hasattr(self, 'end') and (self.end < 0)):", "             retval += (' --end=%s' % self.end)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.partition"}, "91": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_NotIn", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 7, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 7, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 101, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.partition\", line 93, in __str__\n  File \"pykickstart.commands.partition\", line 109, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_PartData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode not in 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "module-name": "pykickstart.commands.partition"}, "79": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "19", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 19, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 19, "line_number": 514}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 166, in runTest\n    \"part / --encrypted --escrowcert=\\\"http://x/y\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --encrypted --escrowcert=\"http://x/y\" --backuppassphrase\\n' != 'part / --encrypted --escrowcert=\"http://x/y\"\\n'\n- part / --encrypted --escrowcert=\"http://x/y\" --backuppassphrase\n?                                             -------------------\n+ part / --encrypted --escrowcert=\"http://x/y\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -332,7 +332,7 @@", "     def _getParser(self):", "         op = F11_Partition._getParser(self)", "         op.add_argument('--escrowcert', metavar='<url>', version=F12, help='\\n                        Load an X.509 certificate from ``<url>``. Store the\\n                        data encryption key of this partition, encrypted using\\n                        the certificate, as a file in ``/root``. Only relevant\\n                        if ``--encrypted`` is specified as well.')", "-        op.add_argument('--backuppassphrase', action='store_true', version=F12, default=False, help='\\n                        Only relevant if ``--escrowcert`` is specified as well.\\n                        In addition to storing the data encryption key, generate\\n                        a random passphrase and add it to this partition. Then\\n                        store the passphrase, encrypted using the certificate\\n                        specified by ``--escrowcert``, as a file in ``/root``.\\n                        If more than one LUKS volume uses ``--backuppassphrase``,\\n                        the same passphrase will be used for all such volumes.\\n                        ')", "+        op.add_argument('--backuppassphrase', action='store_true', version=F12, default=True, help='\\n                        Only relevant if ``--escrowcert`` is specified as well.\\n                        In addition to storing the data encryption key, generate\\n                        a random passphrase and add it to this partition. Then\\n                        store the passphrase, encrypted using the certificate\\n                        specified by ``--escrowcert``, as a file in ``/root``.\\n                        If more than one LUKS volume uses ``--backuppassphrase``,\\n                        the same passphrase will be used for all such volumes.\\n                        ')", "         return op", " ", " class RHEL6_Partition(F12_Partition):"]]], "module-name": "pykickstart.commands.partition"}, "110": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --fstype=\"\"\\n' != 'part /home\\n'\n- part /home --fstype=\"\"\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -44,7 +44,7 @@", "             retval += ' --asprimary'", "         if (hasattr(self, 'end') and (self.end != 0)):", "             retval += (' --end=%s' % self.end)", "-        if (self.fstype != ''):", "+        if (self.fstype in ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "module-name": "pykickstart.commands.partition"}, "147": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "number_replacer", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "number_replacer", "result-type": "normal", "occurrence": 10, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 10, "line_number": 292}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 39, in runTest\n    self.assert_parse(\"part /home --onpart=/dev/sda1\", \"part /home --onpart=sda1%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --onpart=da1\\n' != 'part /home --onpart=sda1\\n'\n- part /home --onpart=da1\n+ part /home --onpart=sda1\n?                     +\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -240,7 +240,7 @@", " ", "         def part_cb(value):", "             if value.startswith('/dev/'):", "-                return value[5:]", "+                return value[6:]", "             else:", "                 return value", "         op = KSOptionParser(prog='part', description='\\n                            Creates a partition on the system. This command is\\n                            required. All partitions created will be formatted\\n                            as part of the installation process unless\\n                            ``--noformat`` and ``--onpart`` are used.\\n                            ', epilog='\\n                            If partitioning fails for any reason, diagnostic\\n                            messages will appear on virtual console 3.', version=FC3)"]]], "module-name": "pykickstart.commands.partition"}, "69": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 9, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 9, "line_number": 198}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -159,7 +159,7 @@", "     def __init__(self, *args, **kwargs):", "         F12_PartData.__init__(self, *args, **kwargs)", "         self.cipher = kwargs.get('cipher', '')", "-        self.hibernation = kwargs.get('hibernation', False)", "+        self.hibernation = kwargs.get('hibernation', True)", " ", "     def _getArgsAsStr(self):", "         retval = F12_PartData._getArgsAsStr(self)"]]], "module-name": "pykickstart.commands.partition"}, "189": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 13, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 13, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 144, in runTest\n    \"part / --encrypted --passphrase=\\\"blahblah\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part / --encrypted --passphrase=\"blahblah\" --escrowcert=\"\"\\n' != 'part / --encrypted --passphrase=\"blahblah\"\\n'\n- part / --encrypted --passphrase=\"blahblah\" --escrowcert=\"\"\n?                                           ----------------\n+ part / --encrypted --passphrase=\"blahblah\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -146,7 +146,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F11_PartData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert is '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.partition"}, "75": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "boolean_replacer", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "boolean_replacer", "result-type": "normal", "occurrence": 15, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 15, "line_number": 373}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --noformat\\n' != 'part /home\\n'\n- part /home --noformat\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -252,7 +252,7 @@", "         op.add_argument('--fstype', '--type', dest='fstype', version=FC3, help='\\n                        Sets the file system type for the partition. Valid\\n                        values include ext4, ext3, ext2, xfs, btrfs, swap, and\\n                        vfat. Other filesystems may be valid depending on\\n                        command line arguments passed to anaconda to enable\\n                        other filesystems.')", "         op.add_argument('--grow', action='store_true', default=False, version=FC3, help='\\n                        Tells the partition to grow to fill available space\\n                        (if any), or up to the maximum size setting. Note that\\n                        ``--grow`` is not supported for partitions containing a\\n                        RAID volume on top of them.')", "         op.add_argument('--maxsize', dest='maxSizeMB', type=int, version=FC3, help='\\n                        The maximum size in MiB the partition may grow to.\\n                        Specify an integer value here, and do not append any\\n                        units. This option is only relevant if ``--grow`` is\\n                        specified as well.')", "-        op.add_argument('--noformat', dest='format', version=FC3, action='store_false', default=True, help='\\n                        Tells the installation program not to format the\\n                        partition, for use with the ``--onpart`` command.')", "+        op.add_argument('--noformat', dest='format', version=FC3, action='store_false', default=False, help='\\n                        Tells the installation program not to format the\\n                        partition, for use with the ``--onpart`` command.')", "         op.add_argument('--onbiosdisk', version=FC3, help='\\n                        Forces the partition to be created on a particular disk\\n                        as discovered by the BIOS.')", "         op.add_argument('--ondisk', '--ondrive', dest='disk', version=FC3, help='\\n                        Forces the partition to be created on a particular disk.\\n                        ')", "         op.add_argument('--onpart', '--usepart', dest='onPart', type=part_cb, version=FC3, help='\\n                        Put the partition on an already existing device. Use\\n                        \"--onpart=LABEL=name\" or \"--onpart=UUID=name\" to specify\\n                        a partition by label or uuid respectively.\\n\\n                        Anaconda may create partitions in any particular order,\\n                        so it is safer to use labels than absolute partition\\n                        names.')"]]], "module-name": "pykickstart.commands.partition"}, "214": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_Is", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'part /home --maxsize=0\\n' != 'part /home\\n'\n- part /home --maxsize=0\n+ part /home\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -48,7 +48,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB is 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.partition"}, "194": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_NotEq_with_Is", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 18, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 18, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -400,7 +400,7 @@", "             errorMsg = _(\"The part/partition and autopart commands can't be used at the same time\")", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         if (retval.fstype == 'tmpfs'):", "-            if (retval.grow or (retval.maxSizeMB != 0)):", "+            if (retval.grow or (retval.maxSizeMB is 0)):", "                 errorMsg = _(\"The --fstype=tmpfs option can't be used together with --grow or --maxsize\")", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "module-name": "pykickstart.commands.partition"}, "131": {"command": ["cosmic-ray", "worker", "pykickstart.commands.partition", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "op-name": "replace_Gt_with_NotIn", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 159, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 140, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/partition.py\", line 38, in runTest\n    self.assert_parse(\"part /home\", \"part /home%s\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.partition\", line 93, in __str__\n  File \"pykickstart.commands.partition\", line 180, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 153, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 107, in _getArgsAsStr\n  File \"pykickstart.commands.partition\", line 72, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/partition.py", "@@ -48,7 +48,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB not in 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.partition"}}, "work-parameters": {"1": {"timeout": 120.13132, "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/partition.py"], "test-runner": "nose"}}}