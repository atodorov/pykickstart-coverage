{"work-items": {"5": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'install\\n' != 'upgrade\\n'\n- install\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -31,7 +31,7 @@", " ", "     def parse(self, args):", "         self.op.parse_args(args=args, lineno=self.lineno)", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd < 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_Lt", "occurrence": 0}, "18": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 33, in runTest\n    self.assert_parse(\"install\", \"install\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'upgrade\\n' != 'install\\n'\n- upgrade\n+ install\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -65,7 +65,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd <= 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_LtE", "occurrence": 2}, "1": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Is_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -17,7 +17,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.upgrade is None):", "+        if (self.upgrade == None):", "             return retval", "         if self.upgrade:", "             retval += '# Upgrade existing installation\\nupgrade\\n'"]]], "op-name": "replace_Is_with_Eq", "occurrence": 0}, "45": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.upgrade\", line 94, in parse\nTypeError: unorderable types: NoneType() >= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -61,7 +61,7 @@", " ", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "-        if (ns.root_device == ''):", "+        if (ns.root_device >= ''):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device"]]], "op-name": "replace_Eq_with_GtE", "occurrence": 1}, "23": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_IsNot_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'upgrade --root-device=None\\n' != 'upgrade\\n'\n- upgrade --root-device=None\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -47,7 +47,7 @@", "         self.root_device = kwargs.get('root_device', None)", " ", "     def __str__(self):", "-        if (self.upgrade and (self.root_device is not None)):", "+        if (self.upgrade and (self.root_device is None)):", "             retval = KickstartCommand.__str__(self)", "             retval += ('# Upgrade existing installation\\nupgrade --root-device=%s\\n' % self.root_device)", "         else:"]]], "op-name": "replace_IsNot_with_Is", "occurrence": 0}, "31": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": 100, "occurrence": 2, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'install\\n' != 'upgrade\\n'\n- install\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -66,7 +66,7 @@", "         else:", "             self.root_device = ns.root_device", "         if (self.currentCmd == 'upgrade'):", "-            self.upgrade = True", "+            self.upgrade = False", "         else:", "             self.upgrade = False", "         return self"]]], "op-name": "boolean_replacer", "occurrence": 2}, "15": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_IsNot_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.upgrade\", line 77, in __str__\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -47,7 +47,7 @@", "         self.root_device = kwargs.get('root_device', None)", " ", "     def __str__(self):", "-        if (self.upgrade and (self.root_device is not None)):", "+        if (self.upgrade and (self.root_device in None)):", "             retval = KickstartCommand.__str__(self)", "             retval += ('# Upgrade existing installation\\nupgrade --root-device=%s\\n' % self.root_device)", "         else:"]]], "op-name": "replace_IsNot_with_In", "occurrence": 0}, "43": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": 70, "occurrence": 1, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -41,7 +41,7 @@", "     removedKeywords = FC3_Upgrade.removedKeywords", "     removedAttrs = FC3_Upgrade.removedAttrs", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         FC3_Upgrade.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.root_device = kwargs.get('root_device', None)"]]], "op-name": "number_replacer", "occurrence": 1}, "30": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": 62, "occurrence": 1, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 33, in runTest\n    self.assert_parse(\"install\", \"install\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'upgrade\\n' != 'install\\n'\n- upgrade\n+ install\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -34,7 +34,7 @@", "         if (self.currentCmd == 'upgrade'):", "             self.upgrade = True", "         else:", "-            self.upgrade = False", "+            self.upgrade = True", "         return self", " ", " class F11_Upgrade(FC3_Upgrade):"]]], "op-name": "boolean_replacer", "occurrence": 1}, "6": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.upgrade\", line 94, in parse\nTypeError: unorderable types: NoneType() < str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -61,7 +61,7 @@", " ", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "-        if (ns.root_device == ''):", "+        if (ns.root_device < ''):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device"]]], "op-name": "replace_Eq_with_Lt", "occurrence": 1}, "9": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.upgrade\", line 94, in parse\nTypeError: unorderable types: NoneType() > str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -61,7 +61,7 @@", " ", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "-        if (ns.root_device == ''):", "+        if (ns.root_device > ''):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device"]]], "op-name": "replace_Eq_with_Gt", "occurrence": 1}, "40": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Is_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.upgrade\", line 81, in __str__\n  File \"pykickstart.commands.upgrade\", line 40, in __str__\nTypeError: unorderable types: bool() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -17,7 +17,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.upgrade is None):", "+        if (self.upgrade <= None):", "             return retval", "         if self.upgrade:", "             retval += '# Upgrade existing installation\\nupgrade\\n'"]]], "op-name": "replace_Is_with_LtE", "occurrence": 0}, "24": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_IsNot_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.upgrade\", line 77, in __str__\nTypeError: unorderable types: NoneType() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -47,7 +47,7 @@", "         self.root_device = kwargs.get('root_device', None)", " ", "     def __str__(self):", "-        if (self.upgrade and (self.root_device is not None)):", "+        if (self.upgrade and (self.root_device < None)):", "             retval = KickstartCommand.__str__(self)", "             retval += ('# Upgrade existing installation\\nupgrade --root-device=%s\\n' % self.root_device)", "         else:"]]], "op-name": "replace_IsNot_with_Lt", "occurrence": 0}, "47": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_IsNot_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'upgrade --root-device=None\\n' != 'upgrade\\n'\n- upgrade --root-device=None\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -47,7 +47,7 @@", "         self.root_device = kwargs.get('root_device', None)", " ", "     def __str__(self):", "-        if (self.upgrade and (self.root_device is not None)):", "+        if (self.upgrade and (self.root_device == None)):", "             retval = KickstartCommand.__str__(self)", "             retval += ('# Upgrade existing installation\\nupgrade --root-device=%s\\n' % self.root_device)", "         else:"]]], "op-name": "replace_IsNot_with_Eq", "occurrence": 0}, "10": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'install\\n' != 'upgrade\\n'\n- install\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -65,7 +65,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd > 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_Gt", "occurrence": 2}, "2": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Is_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.upgrade\", line 81, in __str__\n  File \"pykickstart.commands.upgrade\", line 40, in __str__\nTypeError: unorderable types: bool() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -17,7 +17,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.upgrade is None):", "+        if (self.upgrade < None):", "             return retval", "         if self.upgrade:", "             retval += '# Upgrade existing installation\\nupgrade\\n'"]]], "op-name": "replace_Is_with_Lt", "occurrence": 0}, "33": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_IsNot_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.upgrade\", line 77, in __str__\nTypeError: unorderable types: NoneType() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -47,7 +47,7 @@", "         self.root_device = kwargs.get('root_device', None)", " ", "     def __str__(self):", "-        if (self.upgrade and (self.root_device is not None)):", "+        if (self.upgrade and (self.root_device <= None)):", "             retval = KickstartCommand.__str__(self)", "             retval += ('# Upgrade existing installation\\nupgrade --root-device=%s\\n' % self.root_device)", "         else:"]]], "op-name": "replace_IsNot_with_LtE", "occurrence": 0}, "49": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.upgrade\", line 94, in parse\nTypeError: 'in <string>' requires string as left operand, not NoneType\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -61,7 +61,7 @@", " ", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "-        if (ns.root_device == ''):", "+        if (ns.root_device not in ''):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device"]]], "op-name": "replace_Eq_with_NotIn", "occurrence": 1}, "8": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'install\\n' != 'upgrade\\n'\n- install\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -31,7 +31,7 @@", " ", "     def parse(self, args):", "         self.op.parse_args(args=args, lineno=self.lineno)", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd > 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_Gt", "occurrence": 0}, "36": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.upgrade\", line 95, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command upgrade does not accept empty parameter --root-device\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -61,7 +61,7 @@", " ", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "-        if (ns.root_device == ''):", "+        if (ns.root_device != ''):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device"]]], "op-name": "replace_Eq_with_NotEq", "occurrence": 1}, "21": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'install\\n' != 'upgrade\\n'\n- install\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -65,7 +65,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd is 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_Is", "occurrence": 2}, "12": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -31,7 +31,7 @@", " ", "     def parse(self, args):", "         self.op.parse_args(args=args, lineno=self.lineno)", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd in 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_In", "occurrence": 0}, "42": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": 32, "occurrence": 0, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -10,7 +10,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.upgrade = kwargs.get('upgrade', None)", "         self.op = self._getParser()"]]], "op-name": "number_replacer", "occurrence": 0}, "35": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'install\\n' != 'upgrade\\n'\n- install\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -31,7 +31,7 @@", " ", "     def parse(self, args):", "         self.op.parse_args(args=args, lineno=self.lineno)", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd != 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_NotEq", "occurrence": 0}, "26": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 33, in runTest\n    self.assert_parse(\"install\", \"install\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'upgrade\\n' != 'install\\n'\n- upgrade\n+ install\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -31,7 +31,7 @@", " ", "     def parse(self, args):", "         self.op.parse_args(args=args, lineno=self.lineno)", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd is not 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_IsNot", "occurrence": 0}, "3": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_IsNot_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.upgrade\", line 77, in __str__\nTypeError: unorderable types: NoneType() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -47,7 +47,7 @@", "         self.root_device = kwargs.get('root_device', None)", " ", "     def __str__(self):", "-        if (self.upgrade and (self.root_device is not None)):", "+        if (self.upgrade and (self.root_device > None)):", "             retval = KickstartCommand.__str__(self)", "             retval += ('# Upgrade existing installation\\nupgrade --root-device=%s\\n' % self.root_device)", "         else:"]]], "op-name": "replace_IsNot_with_Gt", "occurrence": 0}, "29": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": 60, "occurrence": 0, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'install\\n' != 'upgrade\\n'\n- install\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -32,7 +32,7 @@", "     def parse(self, args):", "         self.op.parse_args(args=args, lineno=self.lineno)", "         if (self.currentCmd == 'upgrade'):", "-            self.upgrade = True", "+            self.upgrade = False", "         else:", "             self.upgrade = False", "         return self"]]], "op-name": "boolean_replacer", "occurrence": 0}, "27": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.upgrade\", line 95, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command upgrade does not accept empty parameter --root-device\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -61,7 +61,7 @@", " ", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "-        if (ns.root_device == ''):", "+        if (ns.root_device is not ''):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device"]]], "op-name": "replace_Eq_with_IsNot", "occurrence": 1}, "48": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'install\\n' != 'upgrade\\n'\n- install\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -31,7 +31,7 @@", " ", "     def parse(self, args):", "         self.op.parse_args(args=args, lineno=self.lineno)", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd not in 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_NotIn", "occurrence": 0}, "39": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Is_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.upgrade\", line 81, in __str__\n  File \"pykickstart.commands.upgrade\", line 40, in __str__\nTypeError: unorderable types: bool() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -17,7 +17,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.upgrade is None):", "+        if (self.upgrade > None):", "             return retval", "         if self.upgrade:", "             retval += '# Upgrade existing installation\\nupgrade\\n'"]]], "op-name": "replace_Is_with_Gt", "occurrence": 0}, "11": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_IsNot_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.upgrade\", line 77, in __str__\nTypeError: unorderable types: NoneType() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -47,7 +47,7 @@", "         self.root_device = kwargs.get('root_device', None)", " ", "     def __str__(self):", "-        if (self.upgrade and (self.root_device is not None)):", "+        if (self.upgrade and (self.root_device >= None)):", "             retval = KickstartCommand.__str__(self)", "             retval += ('# Upgrade existing installation\\nupgrade --root-device=%s\\n' % self.root_device)", "         else:"]]], "op-name": "replace_IsNot_with_GtE", "occurrence": 0}, "19": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'install\\n' != 'upgrade\\n'\n- install\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -31,7 +31,7 @@", " ", "     def parse(self, args):", "         self.op.parse_args(args=args, lineno=self.lineno)", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd is 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_Is", "occurrence": 0}, "25": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Is_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.upgrade\", line 81, in __str__\n  File \"pykickstart.commands.upgrade\", line 40, in __str__\nTypeError: unorderable types: bool() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -17,7 +17,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.upgrade is None):", "+        if (self.upgrade >= None):", "             return retval", "         if self.upgrade:", "             retval += '# Upgrade existing installation\\nupgrade\\n'"]]], "op-name": "replace_Is_with_GtE", "occurrence": 0}, "22": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Is_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.upgrade\", line 81, in __str__\n  File \"pykickstart.commands.upgrade\", line 40, in __str__\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -17,7 +17,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.upgrade is None):", "+        if (self.upgrade not in None):", "             return retval", "         if self.upgrade:", "             retval += '# Upgrade existing installation\\nupgrade\\n'"]]], "op-name": "replace_Is_with_NotIn", "occurrence": 0}, "13": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.upgrade\", line 94, in parse\nTypeError: 'in <string>' requires string as left operand, not NoneType\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -61,7 +61,7 @@", " ", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "-        if (ns.root_device == ''):", "+        if (ns.root_device in ''):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device"]]], "op-name": "replace_Eq_with_In", "occurrence": 1}, "41": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_IsNot_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.upgrade\", line 77, in __str__\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -47,7 +47,7 @@", "         self.root_device = kwargs.get('root_device', None)", " ", "     def __str__(self):", "-        if (self.upgrade and (self.root_device is not None)):", "+        if (self.upgrade and (self.root_device not in None)):", "             retval = KickstartCommand.__str__(self)", "             retval += ('# Upgrade existing installation\\nupgrade --root-device=%s\\n' % self.root_device)", "         else:"]]], "op-name": "replace_IsNot_with_NotIn", "occurrence": 0}, "20": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -61,7 +61,7 @@", " ", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "-        if (ns.root_device == ''):", "+        if (ns.root_device is ''):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device"]]], "op-name": "replace_Eq_with_Is", "occurrence": 1}, "14": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -65,7 +65,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd in 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_In", "occurrence": 2}, "51": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_IsNot_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -47,7 +47,7 @@", "         self.root_device = kwargs.get('root_device', None)", " ", "     def __str__(self):", "-        if (self.upgrade and (self.root_device is not None)):", "+        if (self.upgrade and (self.root_device != None)):", "             retval = KickstartCommand.__str__(self)", "             retval += ('# Upgrade existing installation\\nupgrade --root-device=%s\\n' % self.root_device)", "         else:"]]], "op-name": "replace_IsNot_with_NotEq", "occurrence": 0}, "32": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": 102, "occurrence": 3, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 33, in runTest\n    self.assert_parse(\"install\", \"install\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'upgrade\\n' != 'install\\n'\n- upgrade\n+ install\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -68,7 +68,7 @@", "         if (self.currentCmd == 'upgrade'):", "             self.upgrade = True", "         else:", "-            self.upgrade = False", "+            self.upgrade = True", "         return self", " ", " class F20_Upgrade(DeprecatedCommand, F11_Upgrade):"]]], "op-name": "boolean_replacer", "occurrence": 3}, "46": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -65,7 +65,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd >= 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_GtE", "occurrence": 2}, "44": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -31,7 +31,7 @@", " ", "     def parse(self, args):", "         self.op.parse_args(args=args, lineno=self.lineno)", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd >= 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_GtE", "occurrence": 0}, "37": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'install\\n' != 'upgrade\\n'\n- install\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -65,7 +65,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd != 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_NotEq", "occurrence": 2}, "34": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Is_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'upgrade\\n'\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -17,7 +17,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.upgrade is None):", "+        if (self.upgrade is not None):", "             return retval", "         if self.upgrade:", "             retval += '# Upgrade existing installation\\nupgrade\\n'"]]], "op-name": "replace_Is_with_IsNot", "occurrence": 0}, "17": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.upgrade\", line 94, in parse\nTypeError: unorderable types: NoneType() <= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -61,7 +61,7 @@", " ", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "-        if (ns.root_device == ''):", "+        if (ns.root_device <= ''):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device"]]], "op-name": "replace_Eq_with_LtE", "occurrence": 1}, "28": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 33, in runTest\n    self.assert_parse(\"install\", \"install\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'upgrade\\n' != 'install\\n'\n- upgrade\n+ install\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -65,7 +65,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd is not 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_IsNot", "occurrence": 2}, "50": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'install\\n' != 'upgrade\\n'\n- install\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -65,7 +65,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd not in 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_NotIn", "occurrence": 2}, "16": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 33, in runTest\n    self.assert_parse(\"install\", \"install\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'upgrade\\n' != 'install\\n'\n- upgrade\n+ install\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -31,7 +31,7 @@", " ", "     def parse(self, args):", "         self.op.parse_args(args=args, lineno=self.lineno)", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd <= 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_LtE", "occurrence": 0}, "7": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Eq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'install\\n' != 'upgrade\\n'\n- install\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -65,7 +65,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %(command)s does not accept empty parameter %(parameter)s') % {'command': 'upgrade', 'parameter': '--root-device'})))", "         else:", "             self.root_device = ns.root_device", "-        if (self.currentCmd == 'upgrade'):", "+        if (self.currentCmd < 'upgrade'):", "             self.upgrade = True", "         else:", "             self.upgrade = False"]]], "op-name": "replace_Eq_with_Lt", "occurrence": 2}, "4": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Is_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.upgrade\", line 81, in __str__\n  File \"pykickstart.commands.upgrade\", line 40, in __str__\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -17,7 +17,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.upgrade is None):", "+        if (self.upgrade in None):", "             return retval", "         if self.upgrade:", "             retval += '# Upgrade existing installation\\nupgrade\\n'"]]], "op-name": "replace_Is_with_In", "occurrence": 0}, "38": {"result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.upgrade", "replace_Is_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "module-name": "pykickstart.commands.upgrade", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 43, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/upgrade.py\", line 32, in runTest\n    self.assert_parse(\"upgrade\", \"upgrade\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'upgrade\\n'\n+ upgrade\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/upgrade.py", "@@ -17,7 +17,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.upgrade is None):", "+        if (self.upgrade != None):", "             return retval", "         if self.upgrade:", "             retval += '# Upgrade existing installation\\nupgrade\\n'"]]], "op-name": "replace_Is_with_NotEq", "occurrence": 0}}, "work-parameters": {"1": {"test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/upgrade.py"], "timeout": 7.40578, "test-runner": "nose"}}, "_default": {}}