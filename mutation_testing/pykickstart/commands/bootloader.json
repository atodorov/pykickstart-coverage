{"work-items": {"80": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 18, "line_number": 417}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 165, in runTest\n    F18_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 137, in runTest\n    F17_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 123, in runTest\n    F15_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --extlinux\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --extlinux\n?                                          -----------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -289,7 +289,7 @@", " ", "     def _getParser(self):", "         op = F18_Bootloader._getParser(self)", "-        op.add_argument('--extlinux', action='store_true', default=False, version=F19, help='\\n                        Use the extlinux bootloader instead of GRUB. This option\\n                        only works on machines that are supported by extlinux.')", "+        op.add_argument('--extlinux', action='store_true', default=True, version=F19, help='\\n                        Use the extlinux bootloader instead of GRUB. This option\\n                        only works on machines that are supported by extlinux.')", "         return op", " ", " class F21_Bootloader(F19_Bootloader):"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 18}, "8": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --linear --location=mbr\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --linear --location=mbr\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n?            ++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -26,7 +26,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine in ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.linear:", "             retval += ' --linear'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "35": {"result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 4, "line_number": 184}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -115,7 +115,7 @@", "     removedKeywords = FC4_Bootloader.removedKeywords", "     removedAttrs = FC4_Bootloader.removedAttrs", " ", "-    def __init__(self, writePriority=10, *args, **kwargs):", "+    def __init__(self, writePriority=11, *args, **kwargs):", "         FC4_Bootloader.__init__(self, writePriority, *args, **kwargs)", "         self.timeout = kwargs.get('timeout', None)", "         self.default = kwargs.get('default', '')"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 4}, "13": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --password=\"\"\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --password=\"\"\n?                                          --------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -89,7 +89,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password in ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_In", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 5}, "28": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --driveorder=\"\"\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --driveorder=\"\"\n?                                                   ----------------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -42,7 +42,7 @@", "             retval += ' --upgrade'", "         if self.useLilo:", "             retval += ' --useLilo'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) is 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "19": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --md5pass=\"\"\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --md5pass=\"\"\n?                                                   -------------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -36,7 +36,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass == ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 2}, "107": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine not in ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.location:", "             retval += (' --location=%s' % self.location)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_NotIn", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 4}, "101": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -95,7 +95,7 @@", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) is not 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "126": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --password=\"\"\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --password=\"\"\n?                                          --------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -89,7 +89,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password >= ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_GtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 5}, "124": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 69, in runTest\n    self.assertEqual(cmd.__str__(), \"\")\nAssertionError: '# System bootloader configuration\\nbootloader\\n' != ''\n- # System bootloader configuration\n- bootloader\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -48,7 +48,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.location != ''):", "+        if (self.location >= ''):", "             retval += '# System bootloader configuration\\nbootloader'", "             retval += (self._getArgsAsStr() + '\\n')", "         return retval"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 3}, "41": {"result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 10, "line_number": 402}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -277,7 +277,7 @@", "     removedKeywords = F18_Bootloader.removedKeywords", "     removedAttrs = F18_Bootloader.removedAttrs", " ", "-    def __init__(self, writePriority=10, *args, **kwargs):", "+    def __init__(self, writePriority=11, *args, **kwargs):", "         F18_Bootloader.__init__(self, writePriority, *args, **kwargs)", "         self.extlinux = kwargs.get('extlinux', False)", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "number_replacer", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 10}, "17": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --linear --location=mbr\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --linear --location=mbr\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n?            ++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -26,7 +26,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine == ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.linear:", "             retval += ' --linear'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "81": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 19, "line_number": 430}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 174, in runTest\n    F19_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 165, in runTest\n    F18_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 137, in runTest\n    F17_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 123, in runTest\n    F15_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 70, in runTest\n    self.assertEqual(cmd._getArgsAsStr(), \"\")\nAssertionError: ' --disabled' != ''\n-  --disabled\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -298,7 +298,7 @@", " ", "     def __init__(self, writePriority=10, *args, **kwargs):", "         F19_Bootloader.__init__(self, writePriority, *args, **kwargs)", "-        self.disabled = kwargs.get('disabled', False)", "+        self.disabled = kwargs.get('disabled', True)", "         self.nombr = kwargs.get('nombr', False)", " ", "     def _getArgsAsStr(self):"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "19", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 19}, "121": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 35, in runTest\n    self.assert_parse(\"bootloader\", \"bootloader %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"\" --linear --location=mbr\\n' != 'bootloader --linear --location=mbr\\n'\n- bootloader --append=\"\" --linear --location=mbr\n?            ------------\n+ bootloader --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -26,7 +26,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine >= ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.linear:", "             retval += ' --linear'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "65": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 3, "line_number": 44}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 70, in runTest\n    self.assertEqual(cmd._getArgsAsStr(), \"\")\nAssertionError: ' --useLilo' != ''\n-  --useLilo\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -21,7 +21,7 @@", "         self.md5pass = kwargs.get('md5pass', '')", "         self.password = kwargs.get('password', '')", "         self.upgrade = kwargs.get('upgrade', False)", "-        self.useLilo = kwargs.get('useLilo', False)", "+        self.useLilo = kwargs.get('useLilo', True)", "         self.deleteRemovedAttrs()", " ", "     def _getArgsAsStr(self):"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 3}, "110": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -70,7 +70,7 @@", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (self.currentCmd == 'lilo'):", "+        if (self.currentCmd in 'lilo'):", "             self.useLilo = True", "         return self", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Eq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "90": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 48, in runTest\n    self.assert_parse(\"bootloader --password=blahblah\", \"bootloader %s--location=mbr --password=\\\"blahblah\\\"\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --linear --location=mbr\\n' != 'bootloader --linear --location=mbr --password=\"blahblah\"\\n'\n- bootloader --linear --location=mbr\n+ bootloader --linear --location=mbr --password=\"blahblah\"\n?                                   ++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -34,7 +34,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password < ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "40": {"result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 9, "line_number": 356}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -248,7 +248,7 @@", "     removedKeywords = F12_Bootloader.removedKeywords", "     removedAttrs = F12_Bootloader.removedAttrs", " ", "-    def __init__(self, writePriority=10, *args, **kwargs):", "+    def __init__(self, writePriority=11, *args, **kwargs):", "         F12_Bootloader.__init__(self, writePriority, *args, **kwargs)", "         self.isCrypted = kwargs.get('isCrypted', False)", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "number_replacer", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 9}, "88": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.bootloader\", line 77, in __str__\n  File \"pykickstart.commands.bootloader\", line 193, in _getArgsAsStr\nTypeError: unorderable types: NoneType() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -122,7 +122,7 @@", " ", "     def _getArgsAsStr(self):", "         ret = FC4_Bootloader._getArgsAsStr(self)", "-        if (self.timeout is not None):", "+        if (self.timeout > None):", "             ret += (' --timeout=%d' % (self.timeout,))", "         if self.default:", "             ret += (' --default=%s' % (self.default,))"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_IsNot_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_IsNot_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "23": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --md5pass=\"\"\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --md5pass=\"\"\n?                                          -------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -91,7 +91,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass == ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Eq", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 6}, "132": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -36,7 +36,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass > ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 2}, "134": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine > ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.location:", "             retval += (' --location=%s' % self.location)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Gt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 4}, "112": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --linear --location=mbr\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --linear --location=mbr\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n?            ++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -26,7 +26,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine is ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.linear:", "             retval += ' --linear'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "5": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 132, in runTest\n    self.assert_parse_error(\"bootloader --location=mbr --boot-drive=sda,sdb\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -202,7 +202,7 @@", " ", "     def parse(self, args):", "         retval = F15_Bootloader.parse(self, args)", "-        if (',' in retval.bootDrive):", "+        if (',' == retval.bootDrive):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('--boot-drive accepts only one argument')))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_In_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_In_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "67": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 5, "line_number": 119}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --lba32\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --lba32\n?                                          --------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -59,7 +59,7 @@", "         op.add_argument('--linear', action='store_true', default=True, version=FC3, help='')", "         op.add_argument('--nolinear', dest='linear', action='store_false', version=FC3, help='')", "         op.add_argument('--location', default='mbr', version=FC3, choices=['mbr', 'partition', 'none', 'boot'], help='\\n                        Specifies where the boot record is written. Valid values\\n                        are the following: mbr (the default), partition\\n                        (installs the boot loader on the first sector of the\\n                        partition containing the kernel), or none\\n                        (do not install the boot loader).')", "-        op.add_argument('--lba32', dest='forceLBA', action='store_true', default=False, version=FC3, help='')", "+        op.add_argument('--lba32', dest='forceLBA', action='store_true', default=True, version=FC3, help='')", "         op.add_argument('--password', default='', version=FC3, help='\\n                        If using GRUB, sets the GRUB boot loader password. This\\n                        should be used to restrict access to the GRUB shell,\\n                        where arbitrary kernel options can be passed.')", "         op.add_argument('--md5pass', default='', version=FC3, help='\\n                        If using GRUB, similar to ``--password=`` except the\\n                        password should already be encrypted.')", "         op.add_argument('--upgrade', action='store_true', default=False, version=FC3, help='')"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 5}, "60": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --useLilo\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --useLilo\n?                                                   ----------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -70,7 +70,7 @@", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (self.currentCmd == 'lilo'):", "+        if (self.currentCmd <= 'lilo'):", "             self.useLilo = True", "         return self", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Eq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "16": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --useLilo\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --useLilo\n?                                                   ----------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -70,7 +70,7 @@", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (self.currentCmd == 'lilo'):", "+        if (self.currentCmd < 'lilo'):", "             self.useLilo = True", "         return self", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Eq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "38": {"result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 7, "line_number": 308}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -210,7 +210,7 @@", "     removedKeywords = F17_Bootloader.removedKeywords", "     removedAttrs = F17_Bootloader.removedAttrs", " ", "-    def __init__(self, writePriority=10, *args, **kwargs):", "+    def __init__(self, writePriority=11, *args, **kwargs):", "         F17_Bootloader.__init__(self, writePriority, *args, **kwargs)", "         self.leavebootorder = kwargs.get('leavebootorder', False)", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "number_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 7}, "98": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -42,7 +42,7 @@", "             retval += ' --upgrade'", "         if self.useLilo:", "             retval += ' --useLilo'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) != 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "69": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 7, "line_number": 129}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --useLilo\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --useLilo\n?                                                   ----------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -63,7 +63,7 @@", "         op.add_argument('--password', default='', version=FC3, help='\\n                        If using GRUB, sets the GRUB boot loader password. This\\n                        should be used to restrict access to the GRUB shell,\\n                        where arbitrary kernel options can be passed.')", "         op.add_argument('--md5pass', default='', version=FC3, help='\\n                        If using GRUB, similar to ``--password=`` except the\\n                        password should already be encrypted.')", "         op.add_argument('--upgrade', action='store_true', default=False, version=FC3, help='')", "-        op.add_argument('--useLilo', action='store_true', default=False, version=FC3, help='')", "+        op.add_argument('--useLilo', action='store_true', default=True, version=FC3, help='')", "         op.add_argument('--driveorder', type=commaSplit, version=FC3, help='')", "         return op", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 7}, "48": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 123, in runTest\n    F15_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.bootloader\", line 300, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\n--boot-drive accepts only one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -202,7 +202,7 @@", " ", "     def parse(self, args):", "         retval = F15_Bootloader.parse(self, args)", "-        if (',' in retval.bootDrive):", "+        if (',' is not retval.bootDrive):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('--boot-drive accepts only one argument')))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_In_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_In_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "85": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.bootloader\", line 77, in __str__\n  File \"pykickstart.commands.bootloader\", line 194, in _getArgsAsStr\nTypeError: %d format: a number is required, not NoneType\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -122,7 +122,7 @@", " ", "     def _getArgsAsStr(self):", "         ret = FC4_Bootloader._getArgsAsStr(self)", "-        if (self.timeout is not None):", "+        if (self.timeout == None):", "             ret += (' --timeout=%d' % (self.timeout,))", "         if self.default:", "             ret += (' --default=%s' % (self.default,))"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_IsNot_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_IsNot_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "66": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 4, "line_number": 104}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n?                            +++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -56,7 +56,7 @@", "     def _getParser(self):", "         op = KSOptionParser(prog='bootloader', description='\\n                            This required command specifies how the boot loader\\n                            should be installed.\\n\\n                            There must be a biosboot partition for the bootloader\\n                            to be installed successfully onto a disk that contains\\n                            a GPT/GUID partition table, which includes disks\\n                            initialized by anaconda. This partition may be created\\n                            with the kickstart command\\n                            ``part biosboot --fstype=biosboot --size=1``. However,\\n                            in the case that a disk has an existing biosboot\\n                            partition, adding a ``part biosboot`` option is\\n                            unnecessary.', version=FC3)", "         op.add_argument('--append', dest='appendLine', version=FC3, help='\\n                        Specifies kernel parameters. The default set of bootloader\\n                        arguments is \"rhgb quiet\". You will get this set of\\n                        arguments regardless of what parameters you pass to\\n                        --append, or if you leave out --append entirely.\\n                        For example::\\n\\n                        ``bootloader --location=mbr --append=\"hdd=ide-scsi ide=nodma\"``\\n                        ')", "-        op.add_argument('--linear', action='store_true', default=True, version=FC3, help='')", "+        op.add_argument('--linear', action='store_true', default=False, version=FC3, help='')", "         op.add_argument('--nolinear', dest='linear', action='store_false', version=FC3, help='')", "         op.add_argument('--location', default='mbr', version=FC3, choices=['mbr', 'partition', 'none', 'boot'], help='\\n                        Specifies where the boot record is written. Valid values\\n                        are the following: mbr (the default), partition\\n                        (installs the boot loader on the first sector of the\\n                        partition containing the kernel), or none\\n                        (do not install the boot loader).')", "         op.add_argument('--lba32', dest='forceLBA', action='store_true', default=False, version=FC3, help='')"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 4}, "22": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --password=\"\"\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --password=\"\"\n?                                          --------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -89,7 +89,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password == ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Eq", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 5}, "18": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --password=\"\"\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --password=\"\"\n?                                                   --------------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -34,7 +34,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password == ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "127": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --md5pass=\"\"\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --md5pass=\"\"\n?                                          -------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -91,7 +91,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass >= ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_GtE", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 6}, "49": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --linear --location=mbr\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --linear --location=mbr\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n?            ++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -26,7 +26,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine <= ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.linear:", "             retval += ' --linear'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "114": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --md5pass=\"\"\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --md5pass=\"\"\n?                                                   -------------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -36,7 +36,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass is ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 2}, "53": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --location=mbr\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --location=mbr\n+ bootloader --append=\"rhgb\" --location=mbr\n?           ++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine <= ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.location:", "             retval += (' --location=%s' % self.location)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_LtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 4}, "122": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --password=\"\"\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --password=\"\"\n?                                                   --------------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -34,7 +34,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password >= ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "55": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --md5pass=\"\"\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --md5pass=\"\"\n?                                          -------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -91,7 +91,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass <= ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_LtE", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 6}, "109": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -91,7 +91,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass not in ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_NotIn", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 6}, "59": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.bootloader\", line 77, in __str__\n  File \"pykickstart.commands.bootloader\", line 193, in _getArgsAsStr\nTypeError: unorderable types: NoneType() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -122,7 +122,7 @@", " ", "     def _getArgsAsStr(self):", "         ret = FC4_Bootloader._getArgsAsStr(self)", "-        if (self.timeout is not None):", "+        if (self.timeout <= None):", "             ret += (' --timeout=%d' % (self.timeout,))", "         if self.default:", "             ret += (' --default=%s' % (self.default,))"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_IsNot_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_IsNot_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "102": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.bootloader\", line 77, in __str__\n  File \"pykickstart.commands.bootloader\", line 194, in _getArgsAsStr\nTypeError: %d format: a number is required, not NoneType\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -122,7 +122,7 @@", " ", "     def _getArgsAsStr(self):", "         ret = FC4_Bootloader._getArgsAsStr(self)", "-        if (self.timeout is not None):", "+        if (self.timeout is None):", "             ret += (' --timeout=%d' % (self.timeout,))", "         if self.default:", "             ret += (' --default=%s' % (self.default,))"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_IsNot_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_IsNot_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "136": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -91,7 +91,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass > ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Gt", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 6}, "111": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -70,7 +70,7 @@", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (self.currentCmd == 'lilo'):", "+        if (self.currentCmd > 'lilo'):", "             self.useLilo = True", "         return self", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Eq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "21": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --location=mbr\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --location=mbr\n+ bootloader --append=\"rhgb\" --location=mbr\n?           ++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine == ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.location:", "             retval += (' --location=%s' % self.location)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Eq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 4}, "129": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -122,7 +122,7 @@", " ", "     def _getArgsAsStr(self):", "         ret = FC4_Bootloader._getArgsAsStr(self)", "-        if (self.timeout is not None):", "+        if (self.timeout != None):", "             ret += (' --timeout=%d' % (self.timeout,))", "         if self.default:", "             ret += (' --default=%s' % (self.default,))"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_IsNot_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_IsNot_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "73": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 11, "line_number": 265}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 118, in runTest\n    self.assert_parse(\"bootloader --md5pass=blahblah\", \"bootloader --location=mbr --password=\\\"blahblah\\\" --iscrypted\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --location=mbr --password=\"blahblah\"\\n' != 'bootloader --location=mbr --password=\"blahblah\" --iscrypted\\n'\n- bootloader --location=mbr --password=\"blahblah\"\n+ bootloader --location=mbr --password=\"blahblah\" --iscrypted\n?                                                ++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -176,7 +176,7 @@", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "         if getattr(ns, '_md5pass', None):", "             ns.password = ns._md5pass", "-            ns.isCrypted = True", "+            ns.isCrypted = False", "             del ns._md5pass", "         self.set_to_self(ns)", "         return self"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 11}, "123": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --md5pass=\"\"\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --md5pass=\"\"\n?                                                   -------------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -36,7 +36,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass >= ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 2}, "15": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -70,7 +70,7 @@", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (self.currentCmd == 'lilo'):", "+        if (self.currentCmd is 'lilo'):", "             self.useLilo = True", "         return self", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Eq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "34": {"result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 3, "line_number": 164}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -95,7 +95,7 @@", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) > 1):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 3}, "36": {"result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 5, "line_number": 233}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -156,7 +156,7 @@", "     removedKeywords = F14_Bootloader.removedKeywords", "     removedAttrs = F14_Bootloader.removedAttrs", " ", "-    def __init__(self, writePriority=10, *args, **kwargs):", "+    def __init__(self, writePriority=11, *args, **kwargs):", "         F14_Bootloader.__init__(self, writePriority, *args, **kwargs)", "         self.isCrypted = kwargs.get('isCrypted', False)", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "number_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 5}, "108": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -89,7 +89,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password not in ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_NotIn", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 5}, "52": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -48,7 +48,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.location != ''):", "+        if (self.location <= ''):", "             retval += '# System bootloader configuration\\nbootloader'", "             retval += (self._getArgsAsStr() + '\\n')", "         return retval"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 3}, "95": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 50, in runTest\n    self.assert_parse(\"bootloader --md5pass=blahblah\", \"bootloader %s--location=mbr --md5pass=\\\"blahblah\\\"\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --location=mbr\\n' != 'bootloader --location=mbr --md5pass=\"blahblah\"\\n'\n- bootloader --location=mbr\n+ bootloader --location=mbr --md5pass=\"blahblah\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -91,7 +91,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass < ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Lt", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 6}, "128": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 132, in runTest\n    self.assert_parse_error(\"bootloader --location=mbr --boot-drive=sda,sdb\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -202,7 +202,7 @@", " ", "     def parse(self, args):", "         retval = F15_Bootloader.parse(self, args)", "-        if (',' in retval.bootDrive):", "+        if (',' is retval.bootDrive):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('--boot-drive accepts only one argument')))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_In_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_In_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "135": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -89,7 +89,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password > ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Gt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 5}, "61": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 123, in runTest\n    F15_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.bootloader\", line 300, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\n--boot-drive accepts only one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -202,7 +202,7 @@", " ", "     def parse(self, args):", "         retval = F15_Bootloader.parse(self, args)", "-        if (',' in retval.bootDrive):", "+        if (',' >= retval.bootDrive):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('--boot-drive accepts only one argument')))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_In_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_In_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "116": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --location=mbr\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --location=mbr\n+ bootloader --append=\"rhgb\" --location=mbr\n?           ++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine is ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.location:", "             retval += (' --location=%s' % self.location)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Is", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 4}, "56": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --driveorder=\"\"\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --driveorder=\"\"\n?                                                   ----------------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -42,7 +42,7 @@", "             retval += ' --upgrade'", "         if self.useLilo:", "             retval += ' --useLilo'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) <= 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "44": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 126, in runTest\n    \"bootloader --location=mbr --boot-drive=/dev/sda\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.bootloader\", line 300, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\n--boot-drive accepts only one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -202,7 +202,7 @@", " ", "     def parse(self, args):", "         retval = F15_Bootloader.parse(self, args)", "-        if (',' in retval.bootDrive):", "+        if (',' <= retval.bootDrive):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('--boot-drive accepts only one argument')))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_In_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_In_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "33": {"result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 2, "line_number": 147}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -78,7 +78,7 @@", "     removedKeywords = (FC3_Bootloader.removedKeywords + ['linear', 'useLilo'])", "     removedAttrs = (FC3_Bootloader.removedAttrs + ['linear', 'useLilo'])", " ", "-    def __init__(self, writePriority=10, *args, **kwargs):", "+    def __init__(self, writePriority=11, *args, **kwargs):", "         FC3_Bootloader.__init__(self, writePriority, *args, **kwargs)", " ", "     def _getArgsAsStr(self):"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 2}, "84": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 22, "line_number": 446}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 174, in runTest\n    F19_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 165, in runTest\n    F18_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 137, in runTest\n    F17_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 123, in runTest\n    F15_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --nombr\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --nombr\n?                                          --------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -312,7 +312,7 @@", "     def _getParser(self):", "         op = F19_Bootloader._getParser(self)", "         op.add_argument('--disabled', action='store_true', default=False, version=F21, help='Do not install the boot loader.')", "-        op.add_argument('--nombr', action='store_true', default=False, version=F21, help='')", "+        op.add_argument('--nombr', action='store_true', default=True, version=F21, help='')", "         return op", " ", " class RHEL7_Bootloader(F21_Bootloader):"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "22", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 22}, "103": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -26,7 +26,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine not in ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.linear:", "             retval += ' --linear'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "63": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 1, "line_number": 39}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -16,7 +16,7 @@", "         self.driveorder = kwargs.get('driveorder', [])", "         self.appendLine = kwargs.get('appendLine', '')", "         self.forceLBA = kwargs.get('forceLBA', False)", "-        self.linear = kwargs.get('linear', True)", "+        self.linear = kwargs.get('linear', False)", "         self.location = kwargs.get('location', 'none')", "         self.md5pass = kwargs.get('md5pass', '')", "         self.password = kwargs.get('password', '')"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "106": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -48,7 +48,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.location != ''):", "+        if (self.location not in ''):", "             retval += '# System bootloader configuration\\nbootloader'", "             retval += (self._getArgsAsStr() + '\\n')", "         return retval"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 3}, "71": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 9, "line_number": 236}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 70, in runTest\n    self.assertEqual(cmd._getArgsAsStr(), \"\")\nAssertionError: ' --iscrypted' != ''\n-  --iscrypted\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -158,7 +158,7 @@", " ", "     def __init__(self, writePriority=10, *args, **kwargs):", "         F14_Bootloader.__init__(self, writePriority, *args, **kwargs)", "-        self.isCrypted = kwargs.get('isCrypted', False)", "+        self.isCrypted = kwargs.get('isCrypted', True)", " ", "     def _getArgsAsStr(self):", "         ret = F14_Bootloader._getArgsAsStr(self)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 9}, "25": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -70,7 +70,7 @@", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (self.currentCmd == 'lilo'):", "+        if (self.currentCmd >= 'lilo'):", "             self.useLilo = True", "         return self", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Eq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "120": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.bootloader\", line 77, in __str__\n  File \"pykickstart.commands.bootloader\", line 191, in _getArgsAsStr\n  File \"pykickstart.commands.bootloader\", line 164, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -95,7 +95,7 @@", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) not in 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "2": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.bootloader\", line 77, in __str__\n  File \"pykickstart.commands.bootloader\", line 67, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -42,7 +42,7 @@", "             retval += ' --upgrade'", "         if self.useLilo:", "             retval += ' --useLilo'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) in 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "100": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -42,7 +42,7 @@", "             retval += ' --upgrade'", "         if self.useLilo:", "             retval += ' --useLilo'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) is not 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "131": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -34,7 +34,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password > ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "11": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -48,7 +48,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.location != ''):", "+        if (self.location in ''):", "             retval += '# System bootloader configuration\\nbootloader'", "             retval += (self._getArgsAsStr() + '\\n')", "         return retval"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 3}, "125": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 35, in runTest\n    self.assert_parse(\"bootloader\", \"bootloader %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"\" --location=mbr\\n' != 'bootloader --location=mbr\\n'\n- bootloader --append=\"\" --location=mbr\n?           ------------\n+ bootloader --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine >= ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.location:", "             retval += (' --location=%s' % self.location)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_GtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 4}, "4": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.bootloader\", line 77, in __str__\n  File \"pykickstart.commands.bootloader\", line 193, in _getArgsAsStr\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -122,7 +122,7 @@", " ", "     def _getArgsAsStr(self):", "         ret = FC4_Bootloader._getArgsAsStr(self)", "-        if (self.timeout is not None):", "+        if (self.timeout in None):", "             ret += (' --timeout=%d' % (self.timeout,))", "         if self.default:", "             ret += (' --default=%s' % (self.default,))"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_IsNot_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_IsNot_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "77": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 15, "line_number": 376}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 156, in runTest\n    F12_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --iscrypted\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --iscrypted\n?                                          ------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -260,7 +260,7 @@", " ", "     def _getParser(self):", "         op = F12_Bootloader._getParser(self)", "-        op.add_argument('--iscrypted', dest='isCrypted', action='store_true', default=False, version=RHEL6, help='\\n                        If given, the password specified by ``--password=`` is\\n                        already encrypted and should be passed to the bootloader\\n                        configuration without additional modification.')", "+        op.add_argument('--iscrypted', dest='isCrypted', action='store_true', default=True, version=RHEL6, help='\\n                        If given, the password specified by ``--password=`` is\\n                        already encrypted and should be passed to the bootloader\\n                        configuration without additional modification.')", "         op.add_argument('--md5pass', dest='_md5pass', version=RHEL6, help='\\n                        If using GRUB, similar to ``--password=`` except the\\n                        password should already be encrypted.')", "         return op", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 15}, "26": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 123, in runTest\n    F15_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.bootloader\", line 300, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\n--boot-drive accepts only one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -202,7 +202,7 @@", " ", "     def parse(self, args):", "         retval = F15_Bootloader.parse(self, args)", "-        if (',' in retval.bootDrive):", "+        if (',' not in retval.bootDrive):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('--boot-drive accepts only one argument')))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_In_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_In_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "27": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --useLilo\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --useLilo\n?                                                   ----------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -70,7 +70,7 @@", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (self.currentCmd == 'lilo'):", "+        if (self.currentCmd != 'lilo'):", "             self.useLilo = True", "         return self", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Eq_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "1": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 126, in runTest\n    \"bootloader --location=mbr --boot-drive=/dev/sda\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.bootloader\", line 300, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\n--boot-drive accepts only one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -202,7 +202,7 @@", " ", "     def parse(self, args):", "         retval = F15_Bootloader.parse(self, args)", "-        if (',' in retval.bootDrive):", "+        if (',' < retval.bootDrive):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('--boot-drive accepts only one argument')))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_In_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_In_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "31": {"result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 0, "line_number": 32}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -10,7 +10,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=10, *args, **kwargs):", "+    def __init__(self, writePriority=11, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.driveorder = kwargs.get('driveorder', [])"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "94": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 48, in runTest\n    self.assert_parse(\"bootloader --password=blahblah\", \"bootloader %s--location=mbr --password=\\\"blahblah\\\"\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --location=mbr\\n' != 'bootloader --location=mbr --password=\"blahblah\"\\n'\n- bootloader --location=mbr\n+ bootloader --location=mbr --password=\"blahblah\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -89,7 +89,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password < ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Lt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 5}, "130": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -26,7 +26,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine > ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.linear:", "             retval += ' --linear'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "7": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 123, in runTest\n    F15_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.bootloader\", line 300, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\n--boot-drive accepts only one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -202,7 +202,7 @@", " ", "     def parse(self, args):", "         retval = F15_Bootloader.parse(self, args)", "-        if (',' in retval.bootDrive):", "+        if (',' != retval.bootDrive):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('--boot-drive accepts only one argument')))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_In_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_In_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "99": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -95,7 +95,7 @@", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) != 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "43": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --useLilo\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --useLilo\n?                                                   ----------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -70,7 +70,7 @@", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (self.currentCmd == 'lilo'):", "+        if (self.currentCmd not in 'lilo'):", "             self.useLilo = True", "         return self", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Eq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "70": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 8, "line_number": 139}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -71,7 +71,7 @@", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "         if (self.currentCmd == 'lilo'):", "-            self.useLilo = True", "+            self.useLilo = False", "         return self", " ", " class FC4_Bootloader(FC3_Bootloader):"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 8}, "86": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --driveorder=\"\"\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --driveorder=\"\"\n?                                                   ----------------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -42,7 +42,7 @@", "             retval += ' --upgrade'", "         if self.useLilo:", "             retval += ' --useLilo'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) >= 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "117": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --password=\"\"\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --password=\"\"\n?                                          --------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -89,7 +89,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password is ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Is", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 5}, "93": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --location=mbr\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --location=mbr\n+ bootloader --append=\"rhgb\" --location=mbr\n?           ++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine < ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.location:", "             retval += (' --location=%s' % self.location)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Lt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 4}, "39": {"result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 8, "line_number": 334}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -229,7 +229,7 @@", "     removedKeywords = FC4_Bootloader.removedKeywords", "     removedAttrs = FC4_Bootloader.removedAttrs", " ", "-    def __init__(self, writePriority=10, *args, **kwargs):", "+    def __init__(self, writePriority=11, *args, **kwargs):", "         FC4_Bootloader.__init__(self, writePriority, *args, **kwargs)", "         self.hvArgs = kwargs.get('hvArgs', '')", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "number_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 8}, "89": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --linear --location=mbr\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --linear --location=mbr\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n?            ++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -26,7 +26,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine < ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.linear:", "             retval += ' --linear'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "57": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --driveorder=\"\"\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --driveorder=\"\"\n?                                          ----------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -95,7 +95,7 @@", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) <= 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "10": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --md5pass=\"\"\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --md5pass=\"\"\n?                                                   -------------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -36,7 +36,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass in ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 2}, "83": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 21, "line_number": 444}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 174, in runTest\n    F19_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 165, in runTest\n    F18_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 137, in runTest\n    F17_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 123, in runTest\n    F15_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --disabled\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --disabled\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -311,7 +311,7 @@", " ", "     def _getParser(self):", "         op = F19_Bootloader._getParser(self)", "-        op.add_argument('--disabled', action='store_true', default=False, version=F21, help='Do not install the boot loader.')", "+        op.add_argument('--disabled', action='store_true', default=True, version=F21, help='Do not install the boot loader.')", "         op.add_argument('--nombr', action='store_true', default=False, version=F21, help='')", "         return op", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "21", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 21}, "91": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 50, in runTest\n    self.assert_parse(\"bootloader --md5pass=blahblah\", \"bootloader %s--location=mbr --md5pass=\\\"blahblah\\\"\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --linear --location=mbr\\n' != 'bootloader --linear --location=mbr --md5pass=\"blahblah\"\\n'\n- bootloader --linear --location=mbr\n+ bootloader --linear --location=mbr --md5pass=\"blahblah\"\n?                                   +++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -36,7 +36,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass < ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 2}, "82": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 20, "line_number": 431}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 174, in runTest\n    F19_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 165, in runTest\n    F18_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 137, in runTest\n    F17_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 123, in runTest\n    F15_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 70, in runTest\n    self.assertEqual(cmd._getArgsAsStr(), \"\")\nAssertionError: ' --nombr' != ''\n-  --nombr\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -299,7 +299,7 @@", "     def __init__(self, writePriority=10, *args, **kwargs):", "         F19_Bootloader.__init__(self, writePriority, *args, **kwargs)", "         self.disabled = kwargs.get('disabled', False)", "-        self.nombr = kwargs.get('nombr', False)", "+        self.nombr = kwargs.get('nombr', True)", " ", "     def _getArgsAsStr(self):", "         if self.disabled:"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "20", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 20}, "47": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --useLilo\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --useLilo\n?                                                   ----------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -70,7 +70,7 @@", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (self.currentCmd == 'lilo'):", "+        if (self.currentCmd is not 'lilo'):", "             self.useLilo = True", "         return self", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Eq_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "72": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 10, "line_number": 249}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --iscrypted\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --iscrypted\n?                                          ------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -168,7 +168,7 @@", " ", "     def _getParser(self):", "         op = F14_Bootloader._getParser(self)", "-        op.add_argument('--iscrypted', dest='isCrypted', action='store_true', default=False, version=F15, help='\\n                        If given, the password specified by ``--password=`` is\\n                        already encrypted and should be passed to the bootloader\\n                        configuration without additional modification.')", "+        op.add_argument('--iscrypted', dest='isCrypted', action='store_true', default=True, version=F15, help='\\n                        If given, the password specified by ``--password=`` is\\n                        already encrypted and should be passed to the bootloader\\n                        configuration without additional modification.')", "         op.add_argument('--md5pass', dest='_md5pass', version=F15, help='\\n                        If using GRUB, similar to ``--password=`` except the password\\n                        should already be encrypted.')", "         return op", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 10}, "79": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 17, "line_number": 405}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 165, in runTest\n    F18_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 137, in runTest\n    F17_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 123, in runTest\n    F15_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 70, in runTest\n    self.assertEqual(cmd._getArgsAsStr(), \"\")\nAssertionError: ' --extlinux' != ''\n-  --extlinux\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -279,7 +279,7 @@", " ", "     def __init__(self, writePriority=10, *args, **kwargs):", "         F18_Bootloader.__init__(self, writePriority, *args, **kwargs)", "-        self.extlinux = kwargs.get('extlinux', False)", "+        self.extlinux = kwargs.get('extlinux', True)", " ", "     def _getArgsAsStr(self):", "         ret = F18_Bootloader._getArgsAsStr(self)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 17}, "37": {"result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 6, "line_number": 275}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -185,7 +185,7 @@", "     removedKeywords = F15_Bootloader.removedKeywords", "     removedAttrs = F15_Bootloader.removedAttrs", " ", "-    def __init__(self, writePriority=10, *args, **kwargs):", "+    def __init__(self, writePriority=11, *args, **kwargs):", "         F15_Bootloader.__init__(self, writePriority, *args, **kwargs)", "         self.bootDrive = kwargs.get('bootDrive', '')", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "number_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 6}, "75": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 13, "line_number": 323}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 137, in runTest\n    F17_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 123, in runTest\n    F15_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --leavebootorder\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --leavebootorder\n?                                          -----------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -222,7 +222,7 @@", " ", "     def _getParser(self):", "         op = F17_Bootloader._getParser(self)", "-        op.add_argument('--leavebootorder', action='store_true', default=False, version=F18, help='\\n                        On EFI or ISeries/PSeries machines, this option prevents\\n                        the installer from making changes to the existing list\\n                        of bootable images.')", "+        op.add_argument('--leavebootorder', action='store_true', default=True, version=F18, help='\\n                        On EFI or ISeries/PSeries machines, this option prevents\\n                        the installer from making changes to the existing list\\n                        of bootable images.')", "         return op", " ", " class RHEL5_Bootloader(FC4_Bootloader):"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 13}, "46": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --driveorder=\"\"\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --driveorder=\"\"\n?                                          ----------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -95,7 +95,7 @@", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) == 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "24": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.bootloader\", line 77, in __str__\n  File \"pykickstart.commands.bootloader\", line 193, in _getArgsAsStr\nTypeError: unorderable types: NoneType() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -122,7 +122,7 @@", " ", "     def _getArgsAsStr(self):", "         ret = FC4_Bootloader._getArgsAsStr(self)", "-        if (self.timeout is not None):", "+        if (self.timeout >= None):", "             ret += (' --timeout=%d' % (self.timeout,))", "         if self.default:", "             ret += (' --default=%s' % (self.default,))"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_IsNot_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_IsNot_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "14": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --md5pass=\"\"\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --md5pass=\"\"\n?                                          -------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -91,7 +91,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass in ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_In", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 6}, "115": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -48,7 +48,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.location != ''):", "+        if (self.location is ''):", "             retval += '# System bootloader configuration\\nbootloader'", "             retval += (self._getArgsAsStr() + '\\n')", "         return retval"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 3}, "32": {"result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 1, "line_number": 67}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -42,7 +42,7 @@", "             retval += ' --upgrade'", "         if self.useLilo:", "             retval += ' --useLilo'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) > 1):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "42": {"result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 11, "line_number": 427}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -296,7 +296,7 @@", "     removedKeywords = F19_Bootloader.removedKeywords", "     removedAttrs = F19_Bootloader.removedAttrs", " ", "-    def __init__(self, writePriority=10, *args, **kwargs):", "+    def __init__(self, writePriority=11, *args, **kwargs):", "         F19_Bootloader.__init__(self, writePriority, *args, **kwargs)", "         self.disabled = kwargs.get('disabled', False)", "         self.nombr = kwargs.get('nombr', False)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "number_replacer", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 11}, "54": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 5, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --password=\"\"\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --password=\"\"\n?                                          --------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -89,7 +89,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password <= ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_LtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 5}, "97": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 52, in runTest\n    self.assert_parse(\"bootloader --driveorder=hda,sdb\", \"bootloader %s--location=mbr --driveorder=\\\"hda,sdb\\\"\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --location=mbr\\n' != 'bootloader --location=mbr --driveorder=\"hda,sdb\"\\n'\n- bootloader --location=mbr\n+ bootloader --location=mbr --driveorder=\"hda,sdb\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -95,7 +95,7 @@", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) < 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "76": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 14, "line_number": 359}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 156, in runTest\n    F12_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 70, in runTest\n    self.assertEqual(cmd._getArgsAsStr(), \"\")\nAssertionError: ' --iscrypted' != ''\n-  --iscrypted\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -250,7 +250,7 @@", " ", "     def __init__(self, writePriority=10, *args, **kwargs):", "         F12_Bootloader.__init__(self, writePriority, *args, **kwargs)", "-        self.isCrypted = kwargs.get('isCrypted', False)", "+        self.isCrypted = kwargs.get('isCrypted', True)", " ", "     def _getArgsAsStr(self):", "         ret = F12_Bootloader._getArgsAsStr(self)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 14}, "92": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -48,7 +48,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.location != ''):", "+        if (self.location < ''):", "             retval += '# System bootloader configuration\\nbootloader'", "             retval += (self._getArgsAsStr() + '\\n')", "         return retval"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 3}, "68": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 6, "line_number": 127}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --upgrade\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --upgrade\n?                                          ----------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -62,7 +62,7 @@", "         op.add_argument('--lba32', dest='forceLBA', action='store_true', default=False, version=FC3, help='')", "         op.add_argument('--password', default='', version=FC3, help='\\n                        If using GRUB, sets the GRUB boot loader password. This\\n                        should be used to restrict access to the GRUB shell,\\n                        where arbitrary kernel options can be passed.')", "         op.add_argument('--md5pass', default='', version=FC3, help='\\n                        If using GRUB, similar to ``--password=`` except the\\n                        password should already be encrypted.')", "-        op.add_argument('--upgrade', action='store_true', default=False, version=FC3, help='')", "+        op.add_argument('--upgrade', action='store_true', default=True, version=FC3, help='')", "         op.add_argument('--useLilo', action='store_true', default=False, version=FC3, help='')", "         op.add_argument('--driveorder', type=commaSplit, version=FC3, help='')", "         return op"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 6}, "50": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --password=\"\"\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --password=\"\"\n?                                                   --------------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -34,7 +34,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password <= ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "3": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.bootloader\", line 77, in __str__\n  File \"pykickstart.commands.bootloader\", line 191, in _getArgsAsStr\n  File \"pykickstart.commands.bootloader\", line 164, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -95,7 +95,7 @@", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) in 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "30": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 123, in runTest\n    F15_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.bootloader\", line 300, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\n--boot-drive accepts only one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -202,7 +202,7 @@", " ", "     def parse(self, args):", "         retval = F15_Bootloader.parse(self, args)", "-        if (',' in retval.bootDrive):", "+        if (',' > retval.bootDrive):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('--boot-drive accepts only one argument')))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_In_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_In_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "74": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 12, "line_number": 311}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 137, in runTest\n    F17_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 123, in runTest\n    F15_TestCase.runTest(self, iscrypted=iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 114, in runTest\n    F14_TestCase.runTest(self, iscrypted=True)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 106, in runTest\n    F12_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 70, in runTest\n    self.assertEqual(cmd._getArgsAsStr(), \"\")\nAssertionError: ' --leavebootorder' != ''\n-  --leavebootorder\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -212,7 +212,7 @@", " ", "     def __init__(self, writePriority=10, *args, **kwargs):", "         F17_Bootloader.__init__(self, writePriority, *args, **kwargs)", "-        self.leavebootorder = kwargs.get('leavebootorder', False)", "+        self.leavebootorder = kwargs.get('leavebootorder', True)", " ", "     def _getArgsAsStr(self):", "         ret = F17_Bootloader._getArgsAsStr(self)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 12}, "105": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -36,7 +36,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass not in ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 2}, "12": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --location=mbr\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --location=mbr\n+ bootloader --append=\"rhgb\" --location=mbr\n?           ++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -83,7 +83,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.appendLine != ''):", "+        if (self.appendLine in ''):", "             retval += (' --append=\"%s\"' % self.appendLine)", "         if self.location:", "             retval += (' --location=%s' % self.location)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_In", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 4}, "6": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.bootloader\", line 77, in __str__\n  File \"pykickstart.commands.bootloader\", line 193, in _getArgsAsStr\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -122,7 +122,7 @@", " ", "     def _getArgsAsStr(self):", "         ret = FC4_Bootloader._getArgsAsStr(self)", "-        if (self.timeout is not None):", "+        if (self.timeout not in None):", "             ret += (' --timeout=%d' % (self.timeout,))", "         if self.default:", "             ret += (' --default=%s' % (self.default,))"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_IsNot_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_IsNot_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "58": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.bootloader\", line 77, in __str__\n  File \"pykickstart.commands.bootloader\", line 193, in _getArgsAsStr\nTypeError: unorderable types: NoneType() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -122,7 +122,7 @@", " ", "     def _getArgsAsStr(self):", "         ret = FC4_Bootloader._getArgsAsStr(self)", "-        if (self.timeout is not None):", "+        if (self.timeout < None):", "             ret += (' --timeout=%d' % (self.timeout,))", "         if self.default:", "             ret += (' --default=%s' % (self.default,))"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_IsNot_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_IsNot_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "62": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 0, "line_number": 38}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 70, in runTest\n    self.assertEqual(cmd._getArgsAsStr(), \"\")\nAssertionError: ' --lba32' != ''\n-  --lba32\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -15,7 +15,7 @@", "         self.op = self._getParser()", "         self.driveorder = kwargs.get('driveorder', [])", "         self.appendLine = kwargs.get('appendLine', '')", "-        self.forceLBA = kwargs.get('forceLBA', False)", "+        self.forceLBA = kwargs.get('forceLBA', True)", "         self.linear = kwargs.get('linear', True)", "         self.location = kwargs.get('location', 'none')", "         self.md5pass = kwargs.get('md5pass', '')"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "113": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --password=\"\"\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --password=\"\"\n?                                                   --------------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -34,7 +34,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password is ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "87": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --driveorder=\"\"\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --driveorder=\"\"\n?                                          ----------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -95,7 +95,7 @@", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) >= 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "78": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 16, "line_number": 392}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 160, in runTest\n    self.assert_parse(\"bootloader --md5pass=blahblah\", \"bootloader --location=mbr --password=\\\"blahblah\\\" --iscrypted\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --location=mbr --password=\"blahblah\"\\n' != 'bootloader --location=mbr --password=\"blahblah\" --iscrypted\\n'\n- bootloader --location=mbr --password=\"blahblah\"\n+ bootloader --location=mbr --password=\"blahblah\" --iscrypted\n?                                                ++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -268,7 +268,7 @@", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "         if getattr(ns, '_md5pass', None):", "             ns.password = ns._md5pass", "-            ns.isCrypted = True", "+            ns.isCrypted = False", "             del ns._md5pass", "         self.set_to_self(ns)", "         return self"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 16}, "20": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -48,7 +48,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.location != ''):", "+        if (self.location == ''):", "             retval += '# System bootloader configuration\\nbootloader'", "             retval += (self._getArgsAsStr() + '\\n')", "         return retval"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Eq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 3}, "29": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --driveorder=\"\"\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --driveorder=\"\"\n?                                          ----------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -95,7 +95,7 @@", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) is 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "133": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -48,7 +48,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.location != ''):", "+        if (self.location > ''):", "             retval += '# System bootloader configuration\\nbootloader'", "             retval += (self._getArgsAsStr() + '\\n')", "         return retval"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 3}, "118": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 6, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --location=mbr --md5pass=\"\"\\n' != 'bootloader --append=\"rhgb\" --location=mbr\\n'\n- bootloader --append=\"rhgb\" --location=mbr --md5pass=\"\"\n?                                          -------------\n+ bootloader --append=\"rhgb\" --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -91,7 +91,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass is ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_Is", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 6}, "9": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --password=\"\"\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --password=\"\"\n?                                                   --------------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -34,7 +34,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password in ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}, "45": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --driveorder=\"\"\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --driveorder=\"\"\n?                                                   ----------------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -42,7 +42,7 @@", "             retval += ' --upgrade'", "         if self.useLilo:", "             retval += ' --useLilo'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) == 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "51": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --append=\"rhgb\" --linear --location=mbr --md5pass=\"\"\\n' != 'bootloader --append=\"rhgb\" --linear --location=mbr\\n'\n- bootloader --append=\"rhgb\" --linear --location=mbr --md5pass=\"\"\n?                                                   -------------\n+ bootloader --append=\"rhgb\" --linear --location=mbr\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -36,7 +36,7 @@", "             retval += ' --lba32'", "         if (self.password != ''):", "             retval += (' --password=\"%s\"' % self.password)", "-        if (self.md5pass != ''):", "+        if (self.md5pass <= ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)", "         if self.upgrade:", "             retval += ' --upgrade'"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 2}, "119": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 33, in runTest\n    self.assert_parse(\"bootloader --append=rhgb\", \"bootloader --append=\\\"rhgb\\\" %s--location=mbr\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.bootloader\", line 77, in __str__\n  File \"pykickstart.commands.bootloader\", line 67, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -42,7 +42,7 @@", "             retval += ' --upgrade'", "         if self.useLilo:", "             retval += ' --useLilo'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) not in 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "64": {"result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 2, "line_number": 43}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 98, in runTest\n    F8_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 85, in runTest\n    FC4_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 75, in runTest\n    FC3_TestCase.runTest(self, iscrypted)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 70, in runTest\n    self.assertEqual(cmd._getArgsAsStr(), \"\")\nAssertionError: ' --upgrade' != ''\n-  --upgrade\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -20,7 +20,7 @@", "         self.location = kwargs.get('location', 'none')", "         self.md5pass = kwargs.get('md5pass', '')", "         self.password = kwargs.get('password', '')", "-        self.upgrade = kwargs.get('upgrade', False)", "+        self.upgrade = kwargs.get('upgrade', True)", "         self.useLilo = kwargs.get('useLilo', False)", "         self.deleteRemovedAttrs()", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 2}, "96": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/bootloader.py\", line 52, in runTest\n    self.assert_parse(\"bootloader --driveorder=hda,sdb\", \"bootloader %s--location=mbr --driveorder=\\\"hda,sdb\\\"\\n\" % linear)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'bootloader --linear --location=mbr\\n' != 'bootloader --linear --location=mbr --driveorder=\"hda,sdb\"\\n'\n- bootloader --linear --location=mbr\n+ bootloader --linear --location=mbr --driveorder=\"hda,sdb\"\n?                                   +++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -42,7 +42,7 @@", "             retval += ' --upgrade'", "         if self.useLilo:", "             retval += ' --useLilo'", "-        if (len(self.driveorder) > 0):", "+        if (len(self.driveorder) < 0):", "             retval += (' --driveorder=\"%s\"' % ','.join(self.driveorder))", "         return retval", " "]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_Gt_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 0}, "104": {"result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/bootloader.py", "@@ -34,7 +34,7 @@", "             retval += (' --location=%s' % self.location)", "         if (hasattr(self, 'forceLBA') and self.forceLBA):", "             retval += ' --lba32'", "-        if (self.password != ''):", "+        if (self.password not in ''):", "             retval += (' --password=\"%s\"' % self.password)", "         if (self.md5pass != ''):", "             retval += (' --md5pass=\"%s\"' % self.md5pass)"]]], "module-name": "pykickstart.commands.bootloader", "op-name": "replace_NotEq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.bootloader", "replace_NotEq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "result-type": "normal", "occurrence": 1}}, "work-parameters": {"1": {"test-runner": "nose", "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/bootloader.py"], "timeout": 93.85607}}, "_default": {}}