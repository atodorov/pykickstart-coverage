{"work-parameters": {"1": {"test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "timeout": 6.163309999999999, "test-runner": "nose"}}, "work-items": {"2": {"op-name": "replace_Eq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -69,7 +69,7 @@", "                 if (path.device == dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "-            if (mpath.name == dd.mpdev):", "+            if (mpath.name in dd.mpdev):", "                 parent = x", "         if (parent is None):", "             mpath = self.dataClass(name=dd.name)"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "13": {"op-name": "replace_Eq_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -69,7 +69,7 @@", "                 if (path.device == dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "-            if (mpath.name == dd.mpdev):", "+            if (mpath.name != dd.mpdev):", "                 parent = x", "         if (parent is None):", "             mpath = self.dataClass(name=dd.name)"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "28": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 3, "result-data": [{"line_number": 81, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -53,7 +53,7 @@", "         op = KSOptionParser(prog='multipath', description='', version=FC6)", "         op.add_argument('--name', required=True, version=FC6, help='')", "         op.add_argument('--device', required=True, notest=True, version=FC6, help='')", "-        op.add_argument('--rule', required=True, notest=True, version=FC6, help='')", "+        op.add_argument('--rule', required=False, notest=True, version=FC6, help='')", "         return op", " ", "     def parse(self, args):"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "30": {"op-name": "replace_Is_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Is_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in _stateMachine\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 670, in _tryFunc\n    fn()\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in <lambda>\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 561, in handleCommand\n    retval = self.handler.dispatcher(args, lineno)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 456, in dispatcher\n    obj = self.commands[cmd].parse(args[1:])\n  File \"pykickstart.commands.multipath\", line 107, in parse\nTypeError: list indices must be integers or slices, not NoneType\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -71,7 +71,7 @@", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):", "                 parent = x", "-        if (parent is None):", "+        if (parent != None):", "             mpath = self.dataClass(name=dd.name)", "             mpath.paths.append(dd)", "             return mpath"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "35": {"op-name": "replace_Is_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Is_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in _stateMachine\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 670, in _tryFunc\n    fn()\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in <lambda>\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 561, in handleCommand\n    retval = self.handler.dispatcher(args, lineno)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 456, in dispatcher\n    obj = self.commands[cmd].parse(args[1:])\n  File \"pykickstart.commands.multipath\", line 102, in parse\nTypeError: unorderable types: NoneType() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -71,7 +71,7 @@", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):", "                 parent = x", "-        if (parent is None):", "+        if (parent < None):", "             mpath = self.dataClass(name=dd.name)", "             mpath.paths.append(dd)", "             return mpath"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "9": {"op-name": "replace_Eq_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 3 of the kickstart file:\n\nDevice '/dev/sda' is already used in multipath 'mpath0'\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 62, in runTest\n    multipath --name=mpath0 --device=/dev/sdb --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nmultipath --name=mpath0 --device=/dev/sda --rule=failover\nmultipath --name=mpath0 --device=/dev/sdb --rule=failover: The following problem occurred on line 3 of the kickstart file:\n\nDevice '/dev/sda' is already used in multipath 'mpath0'\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -66,7 +66,7 @@", "         for x in range(0, len(self.mpaths)):", "             mpath = self.mpaths[x]", "             for path in mpath.paths:", "-                if (path.device == dd.device):", "+                if (path.device is not dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "6": {"op-name": "replace_Eq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -69,7 +69,7 @@", "                 if (path.device == dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "-            if (mpath.name == dd.mpdev):", "+            if (mpath.name is dd.mpdev):", "                 parent = x", "         if (parent is None):", "             mpath = self.dataClass(name=dd.name)"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "5": {"op-name": "replace_Eq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -66,7 +66,7 @@", "         for x in range(0, len(self.mpaths)):", "             mpath = self.mpaths[x]", "             for path in mpath.paths:", "-                if (path.device == dd.device):", "+                if (path.device is dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "3": {"op-name": "replace_Eq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -66,7 +66,7 @@", "         for x in range(0, len(self.mpaths)):", "             mpath = self.mpaths[x]", "             for path in mpath.paths:", "-                if (path.device == dd.device):", "+                if (path.device not in dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "31": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": 63, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -38,7 +38,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=50, *args, **kwargs):", "+    def __init__(self, writePriority=51, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.mpaths = kwargs.get('mpaths', [])"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "23": {"op-name": "replace_Eq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -66,7 +66,7 @@", "         for x in range(0, len(self.mpaths)):", "             mpath = self.mpaths[x]", "             for path in mpath.paths:", "-                if (path.device == dd.device):", "+                if (path.device >= dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "19": {"op-name": "replace_Eq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\npykickstart.errors.KickstartParseError: The following problem occurred on line 3 of the kickstart file:\n\nDevice '/dev/sda' is already used in multipath 'mpath0'\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 62, in runTest\n    multipath --name=mpath0 --device=/dev/sdb --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nmultipath --name=mpath0 --device=/dev/sda --rule=failover\nmultipath --name=mpath0 --device=/dev/sdb --rule=failover: The following problem occurred on line 3 of the kickstart file:\n\nDevice '/dev/sda' is already used in multipath 'mpath0'\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -66,7 +66,7 @@", "         for x in range(0, len(self.mpaths)):", "             mpath = self.mpaths[x]", "             for path in mpath.paths:", "-                if (path.device == dd.device):", "+                if (path.device <= dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "4": {"op-name": "replace_Eq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -69,7 +69,7 @@", "                 if (path.device == dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "-            if (mpath.name == dd.mpdev):", "+            if (mpath.name not in dd.mpdev):", "                 parent = x", "         if (parent is None):", "             mpath = self.dataClass(name=dd.name)"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "36": {"op-name": "replace_Is_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Is_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in _stateMachine\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 670, in _tryFunc\n    fn()\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in <lambda>\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 561, in handleCommand\n    retval = self.handler.dispatcher(args, lineno)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 456, in dispatcher\n    obj = self.commands[cmd].parse(args[1:])\n  File \"pykickstart.commands.multipath\", line 102, in parse\nTypeError: unorderable types: NoneType() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -71,7 +71,7 @@", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):", "                 parent = x", "-        if (parent is None):", "+        if (parent > None):", "             mpath = self.dataClass(name=dd.name)", "             mpath.paths.append(dd)", "             return mpath"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "34": {"op-name": "replace_Is_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Is_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIsNot", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in _stateMachine\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 670, in _tryFunc\n    fn()\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in <lambda>\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 561, in handleCommand\n    retval = self.handler.dispatcher(args, lineno)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 456, in dispatcher\n    obj = self.commands[cmd].parse(args[1:])\n  File \"pykickstart.commands.multipath\", line 107, in parse\nTypeError: list indices must be integers or slices, not NoneType\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -71,7 +71,7 @@", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):", "                 parent = x", "-        if (parent is None):", "+        if (parent is not None):", "             mpath = self.dataClass(name=dd.name)", "             mpath.paths.append(dd)", "             return mpath"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "17": {"op-name": "replace_Is_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Is_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithGtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in _stateMachine\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 670, in _tryFunc\n    fn()\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in <lambda>\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 561, in handleCommand\n    retval = self.handler.dispatcher(args, lineno)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 456, in dispatcher\n    obj = self.commands[cmd].parse(args[1:])\n  File \"pykickstart.commands.multipath\", line 102, in parse\nTypeError: unorderable types: NoneType() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -71,7 +71,7 @@", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):", "                 parent = x", "-        if (parent is None):", "+        if (parent >= None):", "             mpath = self.dataClass(name=dd.name)", "             mpath.paths.append(dd)", "             return mpath"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "33": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 2, "result-data": [{"line_number": 93, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -63,7 +63,7 @@", "         dd.lineno = self.lineno", "         dd.mpdev = dd.name.split('/')[(- 1)]", "         parent = None", "-        for x in range(0, len(self.mpaths)):", "+        for x in range(1, len(self.mpaths)):", "             mpath = self.mpaths[x]", "             for path in mpath.paths:", "                 if (path.device == dd.device):"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "1": {"op-name": "replace_Eq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -66,7 +66,7 @@", "         for x in range(0, len(self.mpaths)):", "             mpath = self.mpaths[x]", "             for path in mpath.paths:", "-                if (path.device == dd.device):", "+                if (path.device in dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "27": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 2, "result-data": [{"line_number": 79, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -52,7 +52,7 @@", "     def _getParser(self):", "         op = KSOptionParser(prog='multipath', description='', version=FC6)", "         op.add_argument('--name', required=True, version=FC6, help='')", "-        op.add_argument('--device', required=True, notest=True, version=FC6, help='')", "+        op.add_argument('--device', required=True, notest=False, version=FC6, help='')", "         op.add_argument('--rule', required=True, notest=True, version=FC6, help='')", "         return op", " "]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "26": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 1, "result-data": [{"line_number": 79, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -52,7 +52,7 @@", "     def _getParser(self):", "         op = KSOptionParser(prog='multipath', description='', version=FC6)", "         op.add_argument('--name', required=True, version=FC6, help='')", "-        op.add_argument('--device', required=True, notest=True, version=FC6, help='')", "+        op.add_argument('--device', required=False, notest=True, version=FC6, help='')", "         op.add_argument('--rule', required=True, notest=True, version=FC6, help='')", "         return op", " "]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "16": {"op-name": "replace_Is_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Is_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -71,7 +71,7 @@", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):", "                 parent = x", "-        if (parent is None):", "+        if (parent == None):", "             mpath = self.dataClass(name=dd.name)", "             mpath.paths.append(dd)", "             return mpath"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "14": {"op-name": "arithmetic_operator_deletion", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "arithmetic_operator_deletion", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": 90, "operator": "cosmic_ray.operators.arithmetic_operator_deletion.ReverseUnarySub", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in _stateMachine\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 670, in _tryFunc\n    fn()\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in <lambda>\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 561, in handleCommand\n    retval = self.handler.dispatcher(args, lineno)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 456, in dispatcher\n    obj = self.commands[cmd].parse(args[1:])\n  File \"pykickstart.commands.multipath\", line 90, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -61,7 +61,7 @@", "         dd = FC6_MpPathData()", "         self.set_to_obj(ns, dd)", "         dd.lineno = self.lineno", "-        dd.mpdev = dd.name.split('/')[(- 1)]", "+        dd.mpdev = dd.name.split('/')[(+ 1)]", "         parent = None", "         for x in range(0, len(self.mpaths)):", "             mpath = self.mpaths[x]"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "10": {"op-name": "replace_Eq_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -69,7 +69,7 @@", "                 if (path.device == dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "-            if (mpath.name == dd.mpdev):", "+            if (mpath.name is not dd.mpdev):", "                 parent = x", "         if (parent is None):", "             mpath = self.dataClass(name=dd.name)"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "29": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "boolean_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 4, "result-data": [{"line_number": 81, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -53,7 +53,7 @@", "         op = KSOptionParser(prog='multipath', description='', version=FC6)", "         op.add_argument('--name', required=True, version=FC6, help='')", "         op.add_argument('--device', required=True, notest=True, version=FC6, help='')", "-        op.add_argument('--rule', required=True, notest=True, version=FC6, help='')", "+        op.add_argument('--rule', required=True, notest=False, version=FC6, help='')", "         return op", " ", "     def parse(self, args):"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "22": {"op-name": "replace_Eq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -69,7 +69,7 @@", "                 if (path.device == dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "-            if (mpath.name == dd.mpdev):", "+            if (mpath.name > dd.mpdev):", "                 parent = x", "         if (parent is None):", "             mpath = self.dataClass(name=dd.name)"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "20": {"op-name": "replace_Eq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -69,7 +69,7 @@", "                 if (path.device == dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "-            if (mpath.name == dd.mpdev):", "+            if (mpath.name <= dd.mpdev):", "                 parent = x", "         if (parent is None):", "             mpath = self.dataClass(name=dd.name)"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "25": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": 78, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -51,7 +51,7 @@", " ", "     def _getParser(self):", "         op = KSOptionParser(prog='multipath', description='', version=FC6)", "-        op.add_argument('--name', required=True, version=FC6, help='')", "+        op.add_argument('--name', required=False, version=FC6, help='')", "         op.add_argument('--device', required=True, notest=True, version=FC6, help='')", "         op.add_argument('--rule', required=True, notest=True, version=FC6, help='')", "         return op"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "7": {"op-name": "replace_Eq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -66,7 +66,7 @@", "         for x in range(0, len(self.mpaths)):", "             mpath = self.mpaths[x]", "             for path in mpath.paths:", "-                if (path.device == dd.device):", "+                if (path.device < dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "8": {"op-name": "replace_Eq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -69,7 +69,7 @@", "                 if (path.device == dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "-            if (mpath.name == dd.mpdev):", "+            if (mpath.name < dd.mpdev):", "                 parent = x", "         if (parent is None):", "             mpath = self.dataClass(name=dd.name)"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "11": {"op-name": "replace_Is_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Is_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in _stateMachine\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 670, in _tryFunc\n    fn()\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in <lambda>\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 561, in handleCommand\n    retval = self.handler.dispatcher(args, lineno)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 456, in dispatcher\n    obj = self.commands[cmd].parse(args[1:])\n  File \"pykickstart.commands.multipath\", line 102, in parse\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -71,7 +71,7 @@", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):", "                 parent = x", "-        if (parent is None):", "+        if (parent not in None):", "             mpath = self.dataClass(name=dd.name)", "             mpath.paths.append(dd)", "             return mpath"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "12": {"op-name": "replace_Eq_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -66,7 +66,7 @@", "         for x in range(0, len(self.mpaths)):", "             mpath = self.mpaths[x]", "             for path in mpath.paths:", "-                if (path.device == dd.device):", "+                if (path.device != dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "18": {"op-name": "replace_Is_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Is_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in _stateMachine\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 670, in _tryFunc\n    fn()\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in <lambda>\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 561, in handleCommand\n    retval = self.handler.dispatcher(args, lineno)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 456, in dispatcher\n    obj = self.commands[cmd].parse(args[1:])\n  File \"pykickstart.commands.multipath\", line 102, in parse\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -71,7 +71,7 @@", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):", "                 parent = x", "-        if (parent is None):", "+        if (parent in None):", "             mpath = self.dataClass(name=dd.name)", "             mpath.paths.append(dd)", "             return mpath"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "21": {"op-name": "replace_Eq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -66,7 +66,7 @@", "         for x in range(0, len(self.mpaths)):", "             mpath = self.mpaths[x]", "             for path in mpath.paths:", "-                if (path.device == dd.device):", "+                if (path.device > dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "24": {"op-name": "replace_Eq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -69,7 +69,7 @@", "                 if (path.device == dd.device):", "                     mapping = {'device': path.device, 'multipathdev': path.mpdev}", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "-            if (mpath.name == dd.mpdev):", "+            if (mpath.name >= dd.mpdev):", "                 parent = x", "         if (parent is None):", "             mpath = self.dataClass(name=dd.name)"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "15": {"op-name": "replace_Is_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "replace_Is_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in _stateMachine\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 670, in _tryFunc\n    fn()\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in <lambda>\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 561, in handleCommand\n    retval = self.handler.dispatcher(args, lineno)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 456, in dispatcher\n    obj = self.commands[cmd].parse(args[1:])\n  File \"pykickstart.commands.multipath\", line 102, in parse\nTypeError: unorderable types: NoneType() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -71,7 +71,7 @@", "                     raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Device '%(device)s' is already used in multipath '%(multipathdev)s'\") % mapping)))", "             if (mpath.name == dd.mpdev):", "                 parent = x", "-        if (parent is None):", "+        if (parent <= None):", "             mpath = self.dataClass(name=dd.name)", "             mpath.paths.append(dd)", "             return mpath"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}, "32": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.multipath", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/multipath.py"], "occurrence": 1, "result-data": [{"line_number": 90, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/multipath.py\", line 58, in runTest\n    multipath --name=mpath1 --device=/dev/sda --rule=failover\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in _stateMachine\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 670, in _tryFunc\n    fn()\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in <lambda>\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 561, in handleCommand\n    retval = self.handler.dispatcher(args, lineno)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 456, in dispatcher\n    obj = self.commands[cmd].parse(args[1:])\n  File \"pykickstart.commands.multipath\", line 90, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/multipath.py", "@@ -61,7 +61,7 @@", "         dd = FC6_MpPathData()", "         self.set_to_obj(ns, dd)", "         dd.lineno = self.lineno", "-        dd.mpdev = dd.name.split('/')[(- 1)]", "+        dd.mpdev = dd.name.split('/')[(- 2)]", "         parent = None", "         for x in range(0, len(self.mpaths)):", "             mpath = self.mpaths[x]"]]], "result-type": "normal", "module-name": "pykickstart.commands.multipath"}}, "_default": {}}