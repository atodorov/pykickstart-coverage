{"work-items": {"2": {"op-name": "replace_Eq_with_NotEq", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --type=plain\\n' != 'autopart\\n'\n- autopart --type=plain\n+ autopart\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -165,7 +165,7 @@", "     def _typeAsStr(self):", "         retval = None", "         for (key, value) in list(self.typeMap.items()):", "-            if (value == self.type):", "+            if (value != self.type):", "                 retval = key", "                 break", "         if (retval == 'partition'):"]]], "module-name": "pykickstart.commands.autopart"}, "88": {"op-name": "replace_In_with_LtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 161, in assert_parse\n    parser = self.getParser(inputStr)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.autopart\", line 339, in __init__\n  File \"pykickstart.commands.autopart\", line 313, in __init__\n  File \"pykickstart.commands.autopart\", line 254, in __init__\n  File \"pykickstart.commands.autopart\", line 224, in __init__\n  File \"pykickstart.commands.autopart\", line 115, in __init__\n  File \"pykickstart.commands.autopart\", line 72, in __init__\n  File \"pykickstart.commands.autopart\", line 378, in _getParser\nTypeError: unorderable types: str() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -250,7 +250,7 @@", "         'Only necessary for the type change documentation'", "         op = F18_AutoPart._getParser(self)", "         for action in op._actions:", "-            if ('--type' in action.option_strings):", "+            if ('--type' <= action.option_strings):", "                 action.help += (\"\\n\\n                    .. versionchanged:: %s\\n\\n                    Partitioning scheme 'thinp' was added.\" % versionToLongString(F20))", "         return op", " "]]], "module-name": "pykickstart.commands.autopart"}, "60": {"op-name": "number_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": 114, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -68,7 +68,7 @@", "     removedKeywords = F9_AutoPart.removedKeywords", "     removedAttrs = F9_AutoPart.removedAttrs", " ", "-    def __init__(self, writePriority=100, *args, **kwargs):", "+    def __init__(self, writePriority=101, *args, **kwargs):", "         F9_AutoPart.__init__(self, *args, writePriority=writePriority, **kwargs)", "         self.escrowcert = kwargs.get('escrowcert', '')", "         self.backuppassphrase = kwargs.get('backuppassphrase', False)"]]], "module-name": "pykickstart.commands.autopart"}, "65": {"op-name": "number_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "number_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 8, "result-data": [{"occurrence": 8, "line_number": 338, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -224,7 +224,7 @@", " ", " class F20_AutoPart(F18_AutoPart):", " ", "-    def __init__(self, writePriority=100, *args, **kwargs):", "+    def __init__(self, writePriority=101, *args, **kwargs):", "         F18_AutoPart.__init__(self, *args, writePriority=writePriority, **kwargs)", "         self.typeMap['thinp'] = AUTOPART_TYPE_LVM_THINP", " "]]], "module-name": "pykickstart.commands.autopart"}, "42": {"op-name": "replace_Gt_with_LtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 47, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command autopart does not take any arguments\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -22,7 +22,7 @@", "         return retval", " ", "     def parse(self, args):", "-        if (len(args) > 0):", "+        if (len(args) <= 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'autopart')))", "         self.autopart = True", "         return self"]]], "module-name": "pykickstart.commands.autopart"}, "94": {"op-name": "replace_Eq_with_In", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.autopart\", line 275, in __str__\n  File \"pykickstart.commands.autopart\", line 265, in _typeAsStr\nTypeError: 'in <string>' requires string as left operand, not NoneType\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -168,7 +168,7 @@", "             if (value == self.type):", "                 retval = key", "                 break", "-        if (retval == 'partition'):", "+        if (retval in 'partition'):", "             retval = 'plain'", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "27": {"op-name": "replace_NotEq_with_GtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 43, in runTest\n    self.assert_parse(\"autopart --encrypted\", \"autopart --encrypted\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --encrypted --escrowcert=\"\"\\n' != 'autopart --encrypted\\n'\n- autopart --encrypted --escrowcert=\"\"\n+ autopart --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -77,7 +77,7 @@", "         retval = F9_AutoPart.__str__(self)", "         if (not self.autopart):", "             return retval", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert >= '')):", "             retval = retval.strip()", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:"]]], "module-name": "pykickstart.commands.autopart"}, "82": {"op-name": "replace_NotEq_with_Eq", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 43, in runTest\n    self.assert_parse(\"autopart --encrypted\", \"autopart --encrypted\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --encrypted --escrowcert=\"\"\\n' != 'autopart --encrypted\\n'\n- autopart --encrypted --escrowcert=\"\"\n+ autopart --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -77,7 +77,7 @@", "         retval = F9_AutoPart.__str__(self)", "         if (not self.autopart):", "             return retval", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert == '')):", "             retval = retval.strip()", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:"]]], "module-name": "pykickstart.commands.autopart"}, "59": {"op-name": "number_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": 67, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -34,7 +34,7 @@", "     removedKeywords = FC3_AutoPart.removedKeywords", "     removedAttrs = FC3_AutoPart.removedAttrs", " ", "-    def __init__(self, writePriority=100, *args, **kwargs):", "+    def __init__(self, writePriority=101, *args, **kwargs):", "         FC3_AutoPart.__init__(self, *args, writePriority=writePriority, **kwargs)", "         self.encrypted = kwargs.get('encrypted', False)", "         self.passphrase = kwargs.get('passphrase', '')"]]], "module-name": "pykickstart.commands.autopart"}, "43": {"op-name": "replace_NotEq_with_Lt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 45, in runTest\n    \"autopart --encrypted --passphrase=\\\"whatever\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --encrypted\\n' != 'autopart --encrypted --passphrase=\"whatever\"\\n'\n- autopart --encrypted\n+ autopart --encrypted --passphrase=\"whatever\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -47,7 +47,7 @@", "         retval += 'autopart'", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase < ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         retval += '\\n'", "         return retval"]]], "module-name": "pykickstart.commands.autopart"}, "40": {"op-name": "replace_Gt_with_NotEq", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -22,7 +22,7 @@", "         return retval", " ", "     def parse(self, args):", "-        if (len(args) > 0):", "+        if (len(args) != 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'autopart')))", "         self.autopart = True", "         return self"]]], "module-name": "pykickstart.commands.autopart"}, "13": {"op-name": "replace_In_with_NotEq", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -250,7 +250,7 @@", "         'Only necessary for the type change documentation'", "         op = F18_AutoPart._getParser(self)", "         for action in op._actions:", "-            if ('--type' in action.option_strings):", "+            if ('--type' != action.option_strings):", "                 action.help += (\"\\n\\n                    .. versionchanged:: %s\\n\\n                    Partitioning scheme 'thinp' was added.\" % versionToLongString(F20))", "         return op", " "]]], "module-name": "pykickstart.commands.autopart"}, "14": {"op-name": "replace_Gt_with_IsNot", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -22,7 +22,7 @@", "         return retval", " ", "     def parse(self, args):", "-        if (len(args) > 0):", "+        if (len(args) is not 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'autopart')))", "         self.autopart = True", "         return self"]]], "module-name": "pykickstart.commands.autopart"}, "70": {"op-name": "replace_Eq_with_GtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.autopart\", line 275, in __str__\n  File \"pykickstart.commands.autopart\", line 265, in _typeAsStr\nTypeError: unorderable types: NoneType() >= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -168,7 +168,7 @@", "             if (value == self.type):", "                 retval = key", "                 break", "-        if (retval == 'partition'):", "+        if (retval >= 'partition'):", "             retval = 'plain'", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "80": {"op-name": "replace_Gt_with_Eq", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 47, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command autopart does not take any arguments\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -22,7 +22,7 @@", "         return retval", " ", "     def parse(self, args):", "-        if (len(args) > 0):", "+        if (len(args) == 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'autopart')))", "         self.autopart = True", "         return self"]]], "module-name": "pykickstart.commands.autopart"}, "24": {"op-name": "boolean_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "boolean_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 8, "result-data": [{"occurrence": 8, "line_number": 244, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --nolvm\\n' != 'autopart\\n'\n- autopart --nolvm\n+ autopart\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -152,7 +152,7 @@", " ", "     def _getParser(self):", "         op = F12_AutoPart._getParser(self)", "-        op.add_argument('--nolvm', action='store_false', dest='lvm', default=True, version=F16, help=\"Don't use LVM when partitioning.\")", "+        op.add_argument('--nolvm', action='store_false', dest='lvm', default=False, version=F16, help=\"Don't use LVM when partitioning.\")", "         return op", " ", " class F17_AutoPart(F16_AutoPart):"]]], "module-name": "pykickstart.commands.autopart"}, "79": {"op-name": "replace_Eq_with_IsNot", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_IsNot", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 184, in runTest\n    'autopart --fstype=ext4\\n')\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 427, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nautopart --fstype cannot be used with --type=btrfs\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -281,7 +281,7 @@", "         retval = F20_AutoPart.parse(self, args)", "         if (self.fstype == 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "-        if ((self._typeAsStr() == 'btrfs') and self.fstype):", "+        if ((self._typeAsStr() is not 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "30": {"op-name": "replace_Eq_with_NotIn", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.autopart\", line 275, in __str__\n  File \"pykickstart.commands.autopart\", line 261, in _typeAsStr\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -165,7 +165,7 @@", "     def _typeAsStr(self):", "         retval = None", "         for (key, value) in list(self.typeMap.items()):", "-            if (value == self.type):", "+            if (value not in self.type):", "                 retval = key", "                 break", "         if (retval == 'partition'):"]]], "module-name": "pykickstart.commands.autopart"}, "52": {"op-name": "replace_In_with_Eq", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -250,7 +250,7 @@", "         'Only necessary for the type change documentation'", "         op = F18_AutoPart._getParser(self)", "         for action in op._actions:", "-            if ('--type' in action.option_strings):", "+            if ('--type' == action.option_strings):", "                 action.help += (\"\\n\\n                    .. versionchanged:: %s\\n\\n                    Partitioning scheme 'thinp' was added.\" % versionToLongString(F20))", "         return op", " "]]], "module-name": "pykickstart.commands.autopart"}, "31": {"op-name": "replace_Eq_with_NotIn", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.autopart\", line 275, in __str__\n  File \"pykickstart.commands.autopart\", line 265, in _typeAsStr\nTypeError: 'in <string>' requires string as left operand, not NoneType\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -168,7 +168,7 @@", "             if (value == self.type):", "                 retval = key", "                 break", "-        if (retval == 'partition'):", "+        if (retval not in 'partition'):", "             retval = 'plain'", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "48": {"op-name": "replace_Eq_with_LtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.autopart\", line 275, in __str__\n  File \"pykickstart.commands.autopart\", line 265, in _typeAsStr\nTypeError: unorderable types: NoneType() <= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -168,7 +168,7 @@", "             if (value == self.type):", "                 retval = key", "                 break", "-        if (retval == 'partition'):", "+        if (retval <= 'partition'):", "             retval = 'plain'", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "47": {"op-name": "replace_Eq_with_LtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.autopart\", line 275, in __str__\n  File \"pykickstart.commands.autopart\", line 261, in _typeAsStr\nTypeError: unorderable types: int() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -165,7 +165,7 @@", "     def _typeAsStr(self):", "         retval = None", "         for (key, value) in list(self.typeMap.items()):", "-            if (value == self.type):", "+            if (value <= self.type):", "                 retval = key", "                 break", "         if (retval == 'partition'):"]]], "module-name": "pykickstart.commands.autopart"}, "15": {"op-name": "break_continue_replacement", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "break_continue_replacement", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": 263, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -167,7 +167,7 @@", "         for (key, value) in list(self.typeMap.items()):", "             if (value == self.type):", "                 retval = key", "-                break", "+                continue", "         if (retval == 'partition'):", "             retval = 'plain'", "         return retval"]]], "module-name": "pykickstart.commands.autopart"}, "32": {"op-name": "replace_Eq_with_NotIn", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 184, in runTest\n    'autopart --fstype=ext4\\n')\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 423, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nautopart --fstype=btrfs is not valid fstype, use --type=btrfs instead\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -279,7 +279,7 @@", " ", "     def parse(self, args):", "         retval = F20_AutoPart.parse(self, args)", "-        if (self.fstype == 'btrfs'):", "+        if (self.fstype not in 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "         if ((self._typeAsStr() == 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))"]]], "module-name": "pykickstart.commands.autopart"}, "16": {"op-name": "boolean_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": 35, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -13,7 +13,7 @@", " ", "     def __init__(self, writePriority=100, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "-        self.autopart = kwargs.get('autopart', False)", "+        self.autopart = kwargs.get('autopart', True)", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)"]]], "module-name": "pykickstart.commands.autopart"}, "34": {"op-name": "replace_NotEq_with_In", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 43, in runTest\n    self.assert_parse(\"autopart --encrypted\", \"autopart --encrypted\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --encrypted --passphrase=\"\"\\n' != 'autopart --encrypted\\n'\n- autopart --encrypted --passphrase=\"\"\n+ autopart --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -47,7 +47,7 @@", "         retval += 'autopart'", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase in ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         retval += '\\n'", "         return retval"]]], "module-name": "pykickstart.commands.autopart"}, "3": {"op-name": "replace_Eq_with_NotEq", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --type=plain\\n' != 'autopart\\n'\n- autopart --type=plain\n+ autopart\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -168,7 +168,7 @@", "             if (value == self.type):", "                 retval = key", "                 break", "-        if (retval == 'partition'):", "+        if (retval != 'partition'):", "             retval = 'plain'", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "49": {"op-name": "replace_Eq_with_LtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 180, in runTest\n    F20_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 423, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nautopart --fstype=btrfs is not valid fstype, use --type=btrfs instead\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -279,7 +279,7 @@", " ", "     def parse(self, args):", "         retval = F20_AutoPart.parse(self, args)", "-        if (self.fstype == 'btrfs'):", "+        if (self.fstype <= 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "         if ((self._typeAsStr() == 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))"]]], "module-name": "pykickstart.commands.autopart"}, "99": {"op-name": "replace_Eq_with_Gt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 184, in runTest\n    'autopart --fstype=ext4\\n')\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 423, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nautopart --fstype=btrfs is not valid fstype, use --type=btrfs instead\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -279,7 +279,7 @@", " ", "     def parse(self, args):", "         retval = F20_AutoPart.parse(self, args)", "-        if (self.fstype == 'btrfs'):", "+        if (self.fstype > 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "         if ((self._typeAsStr() == 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))"]]], "module-name": "pykickstart.commands.autopart"}, "36": {"op-name": "replace_In_with_NotIn", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 139, in runTest\n    \"autopart --type=plain\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 301, in parse\n  File \"pykickstart.commands.autopart\", line 105, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 262, in parse_args\n    return ArgumentParser.parse_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1727, in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.autopart\", line 287, in _type_cb\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nInvalid autopart type: plain\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -183,7 +183,7 @@", "         return retval", " ", "     def _type_cb(self, value):", "-        if (value.lower() in self.typeMap):", "+        if (value.lower() not in self.typeMap):", "             return self.typeMap[value.lower()]", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid autopart type: %s') % value)))"]]], "module-name": "pykickstart.commands.autopart"}, "74": {"op-name": "replace_In_with_IsNot", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 156, in runTest\n    self.assert_parse_error(\"autopart --type=blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 301, in parse\n  File \"pykickstart.commands.autopart\", line 105, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 262, in parse_args\n    return ArgumentParser.parse_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1727, in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.autopart\", line 285, in _type_cb\nKeyError: 'blah'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -183,7 +183,7 @@", "         return retval", " ", "     def _type_cb(self, value):", "-        if (value.lower() in self.typeMap):", "+        if (value.lower() is not self.typeMap):", "             return self.typeMap[value.lower()]", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid autopart type: %s') % value)))"]]], "module-name": "pykickstart.commands.autopart"}, "4": {"op-name": "replace_Eq_with_NotEq", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 180, in runTest\n    F20_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 423, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nautopart --fstype=btrfs is not valid fstype, use --type=btrfs instead\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -279,7 +279,7 @@", " ", "     def parse(self, args):", "         retval = F20_AutoPart.parse(self, args)", "-        if (self.fstype == 'btrfs'):", "+        if (self.fstype != 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "         if ((self._typeAsStr() == 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))"]]], "module-name": "pykickstart.commands.autopart"}, "35": {"op-name": "replace_NotEq_with_In", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 43, in runTest\n    self.assert_parse(\"autopart --encrypted\", \"autopart --encrypted\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --encrypted --escrowcert=\"\"\\n' != 'autopart --encrypted\\n'\n- autopart --encrypted --escrowcert=\"\"\n+ autopart --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -77,7 +77,7 @@", "         retval = F9_AutoPart.__str__(self)", "         if (not self.autopart):", "             return retval", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert in '')):", "             retval = retval.strip()", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:"]]], "module-name": "pykickstart.commands.autopart"}, "67": {"op-name": "replace_NotEq_with_Is", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 43, in runTest\n    self.assert_parse(\"autopart --encrypted\", \"autopart --encrypted\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --encrypted --passphrase=\"\"\\n' != 'autopart --encrypted\\n'\n- autopart --encrypted --passphrase=\"\"\n+ autopart --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -47,7 +47,7 @@", "         retval += 'autopart'", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase is ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         retval += '\\n'", "         return retval"]]], "module-name": "pykickstart.commands.autopart"}, "22": {"op-name": "boolean_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "boolean_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 6, "result-data": [{"occurrence": 6, "line_number": 147, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 65, in runTest\n    \"autopart --encrypted --escrowcert=\\\"http://x/y\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --encrypted --escrowcert=\"http://x/y\" --backuppassphrase\\n' != 'autopart --encrypted --escrowcert=\"http://x/y\"\\n'\n- autopart --encrypted --escrowcert=\"http://x/y\" --backuppassphrase\n?                                               -------------------\n+ autopart --encrypted --escrowcert=\"http://x/y\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -88,7 +88,7 @@", "     def _getParser(self):", "         op = F9_AutoPart._getParser(self)", "         op.add_argument('--escrowcert', metavar='<url>', version=F12, help='\\n                        Only relevant if ``--encrypted`` is specified. Load an\\n                        X.509 certificate from ``<url>``. Store the data\\n                        encryption keys of all encrypted volumes created during\\n                        installation, encrypted using the certificate, as files\\n                        in ``/root``.')", "-        op.add_argument('--backuppassphrase', action='store_true', default=False, version=F12, help='\\n                        Only relevant if ``--escrowcert`` is specified. In\\n                        addition to storing the data encryption keys, generate\\n                        a random passphrase and add it to all encrypted volumes\\n                        created during installation. Then store the passphrase,\\n                        encrypted using the certificate specified by\\n                        ``--escrowcert``, as files in ``/root`` (one file for\\n                        each encrypted volume).')", "+        op.add_argument('--backuppassphrase', action='store_true', default=True, version=F12, help='\\n                        Only relevant if ``--escrowcert`` is specified. In\\n                        addition to storing the data encryption keys, generate\\n                        a random passphrase and add it to all encrypted volumes\\n                        created during installation. Then store the passphrase,\\n                        encrypted using the certificate specified by\\n                        ``--escrowcert``, as files in ``/root`` (one file for\\n                        each encrypted volume).')", "         return op", " ", " class RHEL6_AutoPart(F12_AutoPart):"]]], "module-name": "pykickstart.commands.autopart"}, "75": {"op-name": "replace_In_with_IsNot", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -250,7 +250,7 @@", "         'Only necessary for the type change documentation'", "         op = F18_AutoPart._getParser(self)", "         for action in op._actions:", "-            if ('--type' in action.option_strings):", "+            if ('--type' is not action.option_strings):", "                 action.help += (\"\\n\\n                    .. versionchanged:: %s\\n\\n                    Partitioning scheme 'thinp' was added.\" % versionToLongString(F20))", "         return op", " "]]], "module-name": "pykickstart.commands.autopart"}, "11": {"op-name": "replace_NotEq_with_LtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 43, in runTest\n    self.assert_parse(\"autopart --encrypted\", \"autopart --encrypted\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --encrypted --escrowcert=\"\"\\n' != 'autopart --encrypted\\n'\n- autopart --encrypted --escrowcert=\"\"\n+ autopart --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -77,7 +77,7 @@", "         retval = F9_AutoPart.__str__(self)", "         if (not self.autopart):", "             return retval", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert <= '')):", "             retval = retval.strip()", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:"]]], "module-name": "pykickstart.commands.autopart"}, "100": {"op-name": "replace_Eq_with_Gt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 180, in runTest\n    F20_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 425, in parse\nTypeError: unorderable types: NoneType() > str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -281,7 +281,7 @@", "         retval = F20_AutoPart.parse(self, args)", "         if (self.fstype == 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "-        if ((self._typeAsStr() == 'btrfs') and self.fstype):", "+        if ((self._typeAsStr() > 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "86": {"op-name": "replace_Eq_with_Lt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 180, in runTest\n    F20_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 425, in parse\nTypeError: unorderable types: NoneType() < str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -281,7 +281,7 @@", "         retval = F20_AutoPart.parse(self, args)", "         if (self.fstype == 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "-        if ((self._typeAsStr() == 'btrfs') and self.fstype):", "+        if ((self._typeAsStr() < 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "98": {"op-name": "replace_Eq_with_Gt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.autopart\", line 275, in __str__\n  File \"pykickstart.commands.autopart\", line 265, in _typeAsStr\nTypeError: unorderable types: NoneType() > str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -168,7 +168,7 @@", "             if (value == self.type):", "                 retval = key", "                 break", "-        if (retval == 'partition'):", "+        if (retval > 'partition'):", "             retval = 'plain'", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "61": {"op-name": "number_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": 161, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -95,7 +95,7 @@", "     removedKeywords = F12_AutoPart.removedKeywords", "     removedAttrs = F12_AutoPart.removedAttrs", " ", "-    def __init__(self, writePriority=100, *args, **kwargs):", "+    def __init__(self, writePriority=101, *args, **kwargs):", "         F12_AutoPart.__init__(self, *args, writePriority=writePriority, **kwargs)", "         self.cipher = kwargs.get('cipher', '')", " "]]], "module-name": "pykickstart.commands.autopart"}, "71": {"op-name": "replace_Eq_with_GtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 184, in runTest\n    'autopart --fstype=ext4\\n')\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 423, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nautopart --fstype=btrfs is not valid fstype, use --type=btrfs instead\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -279,7 +279,7 @@", " ", "     def parse(self, args):", "         retval = F20_AutoPart.parse(self, args)", "-        if (self.fstype == 'btrfs'):", "+        if (self.fstype >= 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "         if ((self._typeAsStr() == 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))"]]], "module-name": "pykickstart.commands.autopart"}, "64": {"op-name": "number_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "number_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 7, "result-data": [{"occurrence": 7, "line_number": 312, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -203,7 +203,7 @@", "     removedKeywords = F17_AutoPart.removedKeywords", "     removedAttrs = F17_AutoPart.removedAttrs", " ", "-    def __init__(self, writePriority=100, *args, **kwargs):", "+    def __init__(self, writePriority=101, *args, **kwargs):", "         F17_AutoPart.__init__(self, *args, writePriority=writePriority, **kwargs)", "         self.cipher = kwargs.get('cipher', '')", " "]]], "module-name": "pykickstart.commands.autopart"}, "57": {"op-name": "number_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": 33, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -11,7 +11,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=100, *args, **kwargs):", "+    def __init__(self, writePriority=101, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.autopart = kwargs.get('autopart', False)", " "]]], "module-name": "pykickstart.commands.autopart"}, "23": {"op-name": "boolean_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "boolean_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 7, "result-data": [{"occurrence": 7, "line_number": 225, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -138,7 +138,7 @@", " ", "     def __init__(self, writePriority=100, *args, **kwargs):", "         F12_AutoPart.__init__(self, *args, writePriority=writePriority, **kwargs)", "-        self.lvm = kwargs.get('lvm', True)", "+        self.lvm = kwargs.get('lvm', False)", " ", "     def __str__(self):", "         retval = F12_AutoPart.__str__(self)"]]], "module-name": "pykickstart.commands.autopart"}, "89": {"op-name": "replace_Gt_with_Lt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 35, in runTest\n    self.assert_parse_error(\"autopart --blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -22,7 +22,7 @@", "         return retval", " ", "     def parse(self, args):", "-        if (len(args) > 0):", "+        if (len(args) < 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'autopart')))", "         self.autopart = True", "         return self"]]], "module-name": "pykickstart.commands.autopart"}, "73": {"op-name": "replace_Gt_with_GtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 47, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command autopart does not take any arguments\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -22,7 +22,7 @@", "         return retval", " ", "     def parse(self, args):", "-        if (len(args) > 0):", "+        if (len(args) >= 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'autopart')))", "         self.autopart = True", "         return self"]]], "module-name": "pykickstart.commands.autopart"}, "69": {"op-name": "replace_Eq_with_GtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.autopart\", line 275, in __str__\n  File \"pykickstart.commands.autopart\", line 261, in _typeAsStr\nTypeError: unorderable types: int() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -165,7 +165,7 @@", "     def _typeAsStr(self):", "         retval = None", "         for (key, value) in list(self.typeMap.items()):", "-            if (value == self.type):", "+            if (value >= self.type):", "                 retval = key", "                 break", "         if (retval == 'partition'):"]]], "module-name": "pykickstart.commands.autopart"}, "90": {"op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -47,7 +47,7 @@", "         retval += 'autopart'", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase not in ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         retval += '\\n'", "         return retval"]]], "module-name": "pykickstart.commands.autopart"}, "10": {"op-name": "replace_NotEq_with_LtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 43, in runTest\n    self.assert_parse(\"autopart --encrypted\", \"autopart --encrypted\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --encrypted --passphrase=\"\"\\n' != 'autopart --encrypted\\n'\n- autopart --encrypted --passphrase=\"\"\n+ autopart --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -47,7 +47,7 @@", "         retval += 'autopart'", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase <= ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         retval += '\\n'", "         return retval"]]], "module-name": "pykickstart.commands.autopart"}, "84": {"op-name": "replace_Eq_with_Lt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.autopart\", line 275, in __str__\n  File \"pykickstart.commands.autopart\", line 265, in _typeAsStr\nTypeError: unorderable types: NoneType() < str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -168,7 +168,7 @@", "             if (value == self.type):", "                 retval = key", "                 break", "-        if (retval == 'partition'):", "+        if (retval < 'partition'):", "             retval = 'plain'", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "62": {"op-name": "number_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "number_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": 223, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -136,7 +136,7 @@", "     removedKeywords = F12_AutoPart.removedKeywords", "     removedAttrs = F12_AutoPart.removedAttrs", " ", "-    def __init__(self, writePriority=100, *args, **kwargs):", "+    def __init__(self, writePriority=101, *args, **kwargs):", "         F12_AutoPart.__init__(self, *args, writePriority=writePriority, **kwargs)", "         self.lvm = kwargs.get('lvm', True)", " "]]], "module-name": "pykickstart.commands.autopart"}, "6": {"op-name": "replace_Eq_with_Is", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -165,7 +165,7 @@", "     def _typeAsStr(self):", "         retval = None", "         for (key, value) in list(self.typeMap.items()):", "-            if (value == self.type):", "+            if (value is self.type):", "                 retval = key", "                 break", "         if (retval == 'partition'):"]]], "module-name": "pykickstart.commands.autopart"}, "96": {"op-name": "replace_Eq_with_In", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 180, in runTest\n    F20_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 425, in parse\nTypeError: 'in <string>' requires string as left operand, not NoneType\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -281,7 +281,7 @@", "         retval = F20_AutoPart.parse(self, args)", "         if (self.fstype == 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "-        if ((self._typeAsStr() == 'btrfs') and self.fstype):", "+        if ((self._typeAsStr() in 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "5": {"op-name": "replace_Eq_with_NotEq", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_NotEq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 184, in runTest\n    'autopart --fstype=ext4\\n')\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 427, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nautopart --fstype cannot be used with --type=btrfs\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -281,7 +281,7 @@", "         retval = F20_AutoPart.parse(self, args)", "         if (self.fstype == 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "-        if ((self._typeAsStr() == 'btrfs') and self.fstype):", "+        if ((self._typeAsStr() != 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "18": {"op-name": "boolean_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": 69, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -36,7 +36,7 @@", " ", "     def __init__(self, writePriority=100, *args, **kwargs):", "         FC3_AutoPart.__init__(self, *args, writePriority=writePriority, **kwargs)", "-        self.encrypted = kwargs.get('encrypted', False)", "+        self.encrypted = kwargs.get('encrypted', True)", "         self.passphrase = kwargs.get('passphrase', '')", "         self.op = self._getParser()", " "]]], "module-name": "pykickstart.commands.autopart"}, "44": {"op-name": "replace_NotEq_with_Lt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 65, in runTest\n    \"autopart --encrypted --escrowcert=\\\"http://x/y\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --encrypted\\n' != 'autopart --encrypted --escrowcert=\"http://x/y\"\\n'\n- autopart --encrypted\n+ autopart --encrypted --escrowcert=\"http://x/y\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -77,7 +77,7 @@", "         retval = F9_AutoPart.__str__(self)", "         if (not self.autopart):", "             return retval", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert < '')):", "             retval = retval.strip()", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:"]]], "module-name": "pykickstart.commands.autopart"}, "83": {"op-name": "replace_Eq_with_Lt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.autopart\", line 275, in __str__\n  File \"pykickstart.commands.autopart\", line 261, in _typeAsStr\nTypeError: unorderable types: int() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -165,7 +165,7 @@", "     def _typeAsStr(self):", "         retval = None", "         for (key, value) in list(self.typeMap.items()):", "-            if (value == self.type):", "+            if (value < self.type):", "                 retval = key", "                 break", "         if (retval == 'partition'):"]]], "module-name": "pykickstart.commands.autopart"}, "26": {"op-name": "replace_NotEq_with_GtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 43, in runTest\n    self.assert_parse(\"autopart --encrypted\", \"autopart --encrypted\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --encrypted --passphrase=\"\"\\n' != 'autopart --encrypted\\n'\n- autopart --encrypted --passphrase=\"\"\n+ autopart --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -47,7 +47,7 @@", "         retval += 'autopart'", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase >= ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         retval += '\\n'", "         return retval"]]], "module-name": "pykickstart.commands.autopart"}, "56": {"op-name": "replace_In_with_Is", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -250,7 +250,7 @@", "         'Only necessary for the type change documentation'", "         op = F18_AutoPart._getParser(self)", "         for action in op._actions:", "-            if ('--type' in action.option_strings):", "+            if ('--type' is action.option_strings):", "                 action.help += (\"\\n\\n                    .. versionchanged:: %s\\n\\n                    Partitioning scheme 'thinp' was added.\" % versionToLongString(F20))", "         return op", " "]]], "module-name": "pykickstart.commands.autopart"}, "72": {"op-name": "replace_Eq_with_GtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 180, in runTest\n    F20_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 425, in parse\nTypeError: unorderable types: NoneType() >= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -281,7 +281,7 @@", "         retval = F20_AutoPart.parse(self, args)", "         if (self.fstype == 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "-        if ((self._typeAsStr() == 'btrfs') and self.fstype):", "+        if ((self._typeAsStr() >= 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "87": {"op-name": "replace_In_with_LtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.autopart\", line 284, in _type_cb\nTypeError: unorderable types: str() <= dict()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2300, in _get_value\n    raise ArgumentError(action, msg % args)\nargparse.ArgumentError: argument --type: invalid _type_cb value: 'plain'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 139, in runTest\n    \"autopart --type=plain\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 301, in parse\n  File \"pykickstart.commands.autopart\", line 105, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 262, in parse_args\n    return ArgumentParser.parse_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1727, in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1766, in parse_known_args\n    self.error(str(err))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 249, in error\n    raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nargument --type: invalid _type_cb value: 'plain'\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -183,7 +183,7 @@", "         return retval", " ", "     def _type_cb(self, value):", "-        if (value.lower() in self.typeMap):", "+        if (value.lower() <= self.typeMap):", "             return self.typeMap[value.lower()]", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid autopart type: %s') % value)))"]]], "module-name": "pykickstart.commands.autopart"}, "58": {"op-name": "number_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": 46, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 35, in runTest\n    self.assert_parse_error(\"autopart --blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -22,7 +22,7 @@", "         return retval", " ", "     def parse(self, args):", "-        if (len(args) > 0):", "+        if (len(args) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'autopart')))", "         self.autopart = True", "         return self"]]], "module-name": "pykickstart.commands.autopart"}, "41": {"op-name": "replace_Gt_with_Is", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 47, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command autopart does not take any arguments\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -22,7 +22,7 @@", "         return retval", " ", "     def parse(self, args):", "-        if (len(args) > 0):", "+        if (len(args) is 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'autopart')))", "         self.autopart = True", "         return self"]]], "module-name": "pykickstart.commands.autopart"}, "38": {"op-name": "replace_In_with_GtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.autopart\", line 284, in _type_cb\nTypeError: unorderable types: str() >= dict()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2300, in _get_value\n    raise ArgumentError(action, msg % args)\nargparse.ArgumentError: argument --type: invalid _type_cb value: 'plain'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 139, in runTest\n    \"autopart --type=plain\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 301, in parse\n  File \"pykickstart.commands.autopart\", line 105, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 262, in parse_args\n    return ArgumentParser.parse_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1727, in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1766, in parse_known_args\n    self.error(str(err))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 249, in error\n    raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nargument --type: invalid _type_cb value: 'plain'\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -183,7 +183,7 @@", "         return retval", " ", "     def _type_cb(self, value):", "-        if (value.lower() in self.typeMap):", "+        if (value.lower() >= self.typeMap):", "             return self.typeMap[value.lower()]", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid autopart type: %s') % value)))"]]], "module-name": "pykickstart.commands.autopart"}, "78": {"op-name": "replace_Eq_with_IsNot", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 180, in runTest\n    F20_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 423, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nautopart --fstype=btrfs is not valid fstype, use --type=btrfs instead\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -279,7 +279,7 @@", " ", "     def parse(self, args):", "         retval = F20_AutoPart.parse(self, args)", "-        if (self.fstype == 'btrfs'):", "+        if (self.fstype is not 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "         if ((self._typeAsStr() == 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))"]]], "module-name": "pykickstart.commands.autopart"}, "33": {"op-name": "replace_Eq_with_NotIn", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 180, in runTest\n    F20_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 425, in parse\nTypeError: 'in <string>' requires string as left operand, not NoneType\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -281,7 +281,7 @@", "         retval = F20_AutoPart.parse(self, args)", "         if (self.fstype == 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "-        if ((self._typeAsStr() == 'btrfs') and self.fstype):", "+        if ((self._typeAsStr() not in 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "54": {"op-name": "replace_NotEq_with_Gt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -77,7 +77,7 @@", "         retval = F9_AutoPart.__str__(self)", "         if (not self.autopart):", "             return retval", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert > '')):", "             retval = retval.strip()", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:"]]], "module-name": "pykickstart.commands.autopart"}, "81": {"op-name": "replace_NotEq_with_Eq", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 43, in runTest\n    self.assert_parse(\"autopart --encrypted\", \"autopart --encrypted\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --encrypted --passphrase=\"\"\\n' != 'autopart --encrypted\\n'\n- autopart --encrypted --passphrase=\"\"\n+ autopart --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -47,7 +47,7 @@", "         retval += 'autopart'", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase == ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         retval += '\\n'", "         return retval"]]], "module-name": "pykickstart.commands.autopart"}, "68": {"op-name": "replace_NotEq_with_Is", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 43, in runTest\n    self.assert_parse(\"autopart --encrypted\", \"autopart --encrypted\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --encrypted --escrowcert=\"\"\\n' != 'autopart --encrypted\\n'\n- autopart --encrypted --escrowcert=\"\"\n+ autopart --encrypted\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -77,7 +77,7 @@", "         retval = F9_AutoPart.__str__(self)", "         if (not self.autopart):", "             return retval", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert is '')):", "             retval = retval.strip()", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:"]]], "module-name": "pykickstart.commands.autopart"}, "25": {"op-name": "boolean_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "boolean_replacer", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 9, "result-data": [{"occurrence": 9, "line_number": 304, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --nolvm\\n' != 'autopart\\n'\n- autopart --nolvm\n+ autopart\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -196,7 +196,7 @@", " ", "     def parse(self, args):", "         retval = F16_AutoPart.parse(self, args)", "-        self.lvm = True", "+        self.lvm = False", "         return retval", " ", " class F18_AutoPart(F17_AutoPart):"]]], "module-name": "pykickstart.commands.autopart"}, "93": {"op-name": "replace_Eq_with_In", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.autopart\", line 275, in __str__\n  File \"pykickstart.commands.autopart\", line 261, in _typeAsStr\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -165,7 +165,7 @@", "     def _typeAsStr(self):", "         retval = None", "         for (key, value) in list(self.typeMap.items()):", "-            if (value == self.type):", "+            if (value in self.type):", "                 retval = key", "                 break", "         if (retval == 'partition'):"]]], "module-name": "pykickstart.commands.autopart"}, "77": {"op-name": "replace_Eq_with_IsNot", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --type=plain\\n' != 'autopart\\n'\n- autopart --type=plain\n+ autopart\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -168,7 +168,7 @@", "             if (value == self.type):", "                 retval = key", "                 break", "-        if (retval == 'partition'):", "+        if (retval is not 'partition'):", "             retval = 'plain'", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "51": {"op-name": "replace_In_with_Eq", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 139, in runTest\n    \"autopart --type=plain\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 301, in parse\n  File \"pykickstart.commands.autopart\", line 105, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 262, in parse_args\n    return ArgumentParser.parse_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1727, in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.autopart\", line 287, in _type_cb\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nInvalid autopart type: plain\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -183,7 +183,7 @@", "         return retval", " ", "     def _type_cb(self, value):", "-        if (value.lower() in self.typeMap):", "+        if (value.lower() == self.typeMap):", "             return self.typeMap[value.lower()]", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid autopart type: %s') % value)))"]]], "module-name": "pykickstart.commands.autopart"}, "28": {"op-name": "replace_In_with_Lt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.autopart\", line 284, in _type_cb\nTypeError: unorderable types: str() < dict()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2300, in _get_value\n    raise ArgumentError(action, msg % args)\nargparse.ArgumentError: argument --type: invalid _type_cb value: 'plain'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 139, in runTest\n    \"autopart --type=plain\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 301, in parse\n  File \"pykickstart.commands.autopart\", line 105, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 262, in parse_args\n    return ArgumentParser.parse_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1727, in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1766, in parse_known_args\n    self.error(str(err))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 249, in error\n    raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nargument --type: invalid _type_cb value: 'plain'\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -183,7 +183,7 @@", "         return retval", " ", "     def _type_cb(self, value):", "-        if (value.lower() in self.typeMap):", "+        if (value.lower() < self.typeMap):", "             return self.typeMap[value.lower()]", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid autopart type: %s') % value)))"]]], "module-name": "pykickstart.commands.autopart"}, "9": {"op-name": "replace_Eq_with_Is", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -281,7 +281,7 @@", "         retval = F20_AutoPart.parse(self, args)", "         if (self.fstype == 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "-        if ((self._typeAsStr() == 'btrfs') and self.fstype):", "+        if ((self._typeAsStr() is 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "97": {"op-name": "replace_Eq_with_Gt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.autopart\", line 275, in __str__\n  File \"pykickstart.commands.autopart\", line 261, in _typeAsStr\nTypeError: unorderable types: int() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -165,7 +165,7 @@", "     def _typeAsStr(self):", "         retval = None", "         for (key, value) in list(self.typeMap.items()):", "-            if (value == self.type):", "+            if (value > self.type):", "                 retval = key", "                 break", "         if (retval == 'partition'):"]]], "module-name": "pykickstart.commands.autopart"}, "7": {"op-name": "replace_Eq_with_Is", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -168,7 +168,7 @@", "             if (value == self.type):", "                 retval = key", "                 break", "-        if (retval == 'partition'):", "+        if (retval is 'partition'):", "             retval = 'plain'", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "1": {"op-name": "replace_Gt_with_In", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 46, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -22,7 +22,7 @@", "         return retval", " ", "     def parse(self, args):", "-        if (len(args) > 0):", "+        if (len(args) in 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'autopart')))", "         self.autopart = True", "         return self"]]], "module-name": "pykickstart.commands.autopart"}, "91": {"op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -77,7 +77,7 @@", "         retval = F9_AutoPart.__str__(self)", "         if (not self.autopart):", "             return retval", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert not in '')):", "             retval = retval.strip()", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:"]]], "module-name": "pykickstart.commands.autopart"}, "50": {"op-name": "replace_Eq_with_LtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 180, in runTest\n    F20_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 425, in parse\nTypeError: unorderable types: NoneType() <= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -281,7 +281,7 @@", "         retval = F20_AutoPart.parse(self, args)", "         if (self.fstype == 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "-        if ((self._typeAsStr() == 'btrfs') and self.fstype):", "+        if ((self._typeAsStr() <= 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))", "         return retval", " "]]], "module-name": "pykickstart.commands.autopart"}, "39": {"op-name": "replace_In_with_GtE", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 161, in assert_parse\n    parser = self.getParser(inputStr)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.autopart\", line 339, in __init__\n  File \"pykickstart.commands.autopart\", line 313, in __init__\n  File \"pykickstart.commands.autopart\", line 254, in __init__\n  File \"pykickstart.commands.autopart\", line 224, in __init__\n  File \"pykickstart.commands.autopart\", line 115, in __init__\n  File \"pykickstart.commands.autopart\", line 72, in __init__\n  File \"pykickstart.commands.autopart\", line 378, in _getParser\nTypeError: unorderable types: str() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -250,7 +250,7 @@", "         'Only necessary for the type change documentation'", "         op = F18_AutoPart._getParser(self)", "         for action in op._actions:", "-            if ('--type' in action.option_strings):", "+            if ('--type' >= action.option_strings):", "                 action.help += (\"\\n\\n                    .. versionchanged:: %s\\n\\n                    Partitioning scheme 'thinp' was added.\" % versionToLongString(F20))", "         return op", " "]]], "module-name": "pykickstart.commands.autopart"}, "92": {"op-name": "replace_Gt_with_NotIn", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 46, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -22,7 +22,7 @@", "         return retval", " ", "     def parse(self, args):", "-        if (len(args) > 0):", "+        if (len(args) not in 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'autopart')))", "         self.autopart = True", "         return self"]]], "module-name": "pykickstart.commands.autopart"}, "12": {"op-name": "replace_In_with_NotEq", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 156, in runTest\n    self.assert_parse_error(\"autopart --type=blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 301, in parse\n  File \"pykickstart.commands.autopart\", line 105, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 262, in parse_args\n    return ArgumentParser.parse_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1727, in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.autopart\", line 285, in _type_cb\nKeyError: 'blah'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -183,7 +183,7 @@", "         return retval", " ", "     def _type_cb(self, value):", "-        if (value.lower() in self.typeMap):", "+        if (value.lower() != self.typeMap):", "             return self.typeMap[value.lower()]", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid autopart type: %s') % value)))"]]], "module-name": "pykickstart.commands.autopart"}, "46": {"op-name": "replace_In_with_Gt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 161, in assert_parse\n    parser = self.getParser(inputStr)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.autopart\", line 339, in __init__\n  File \"pykickstart.commands.autopart\", line 313, in __init__\n  File \"pykickstart.commands.autopart\", line 254, in __init__\n  File \"pykickstart.commands.autopart\", line 224, in __init__\n  File \"pykickstart.commands.autopart\", line 115, in __init__\n  File \"pykickstart.commands.autopart\", line 72, in __init__\n  File \"pykickstart.commands.autopart\", line 378, in _getParser\nTypeError: unorderable types: str() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -250,7 +250,7 @@", "         'Only necessary for the type change documentation'", "         op = F18_AutoPart._getParser(self)", "         for action in op._actions:", "-            if ('--type' in action.option_strings):", "+            if ('--type' > action.option_strings):", "                 action.help += (\"\\n\\n                    .. versionchanged:: %s\\n\\n                    Partitioning scheme 'thinp' was added.\" % versionToLongString(F20))", "         return op", " "]]], "module-name": "pykickstart.commands.autopart"}, "66": {"op-name": "number_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "number_replacer", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 9, "result-data": [{"occurrence": 9, "line_number": 390, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -258,7 +258,7 @@", "     removedKeywords = F20_AutoPart.removedKeywords", "     removedAttrs = F20_AutoPart.removedAttrs", " ", "-    def __init__(self, writePriority=100, *args, **kwargs):", "+    def __init__(self, writePriority=101, *args, **kwargs):", "         F20_AutoPart.__init__(self, *args, writePriority=writePriority, **kwargs)", "         self.fstype = kwargs.get('fstype', '')", " "]]], "module-name": "pykickstart.commands.autopart"}, "55": {"op-name": "replace_In_with_Is", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 139, in runTest\n    \"autopart --type=plain\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 301, in parse\n  File \"pykickstart.commands.autopart\", line 105, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 262, in parse_args\n    return ArgumentParser.parse_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1727, in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.autopart\", line 287, in _type_cb\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nInvalid autopart type: plain\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -183,7 +183,7 @@", "         return retval", " ", "     def _type_cb(self, value):", "-        if (value.lower() in self.typeMap):", "+        if (value.lower() is self.typeMap):", "             return self.typeMap[value.lower()]", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid autopart type: %s') % value)))"]]], "module-name": "pykickstart.commands.autopart"}, "37": {"op-name": "replace_In_with_NotIn", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -250,7 +250,7 @@", "         'Only necessary for the type change documentation'", "         op = F18_AutoPart._getParser(self)", "         for action in op._actions:", "-            if ('--type' in action.option_strings):", "+            if ('--type' not in action.option_strings):", "                 action.help += (\"\\n\\n                    .. versionchanged:: %s\\n\\n                    Partitioning scheme 'thinp' was added.\" % versionToLongString(F20))", "         return op", " "]]], "module-name": "pykickstart.commands.autopart"}, "17": {"op-name": "boolean_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": 49, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'autopart\\n'\n+ autopart\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -24,7 +24,7 @@", "     def parse(self, args):", "         if (len(args) > 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'autopart')))", "-        self.autopart = True", "+        self.autopart = False", "         return self", " ", "     def _getParser(self):"]]], "module-name": "pykickstart.commands.autopart"}, "76": {"op-name": "replace_Eq_with_IsNot", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --type=lvm\\n' != 'autopart\\n'\n- autopart --type=lvm\n+ autopart\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -165,7 +165,7 @@", "     def _typeAsStr(self):", "         retval = None", "         for (key, value) in list(self.typeMap.items()):", "-            if (value == self.type):", "+            if (value is not self.type):", "                 retval = key", "                 break", "         if (retval == 'partition'):"]]], "module-name": "pykickstart.commands.autopart"}, "45": {"op-name": "replace_In_with_Gt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.autopart\", line 284, in _type_cb\nTypeError: unorderable types: str() > dict()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2300, in _get_value\n    raise ArgumentError(action, msg % args)\nargparse.ArgumentError: argument --type: invalid _type_cb value: 'plain'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 139, in runTest\n    \"autopart --type=plain\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 301, in parse\n  File \"pykickstart.commands.autopart\", line 105, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 262, in parse_args\n    return ArgumentParser.parse_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1727, in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1766, in parse_known_args\n    self.error(str(err))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 249, in error\n    raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nargument --type: invalid _type_cb value: 'plain'\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -183,7 +183,7 @@", "         return retval", " ", "     def _type_cb(self, value):", "-        if (value.lower() in self.typeMap):", "+        if (value.lower() > self.typeMap):", "             return self.typeMap[value.lower()]", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid autopart type: %s') % value)))"]]], "module-name": "pykickstart.commands.autopart"}, "95": {"op-name": "replace_Eq_with_In", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 180, in runTest\n    F20_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 423, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nautopart --fstype=btrfs is not valid fstype, use --type=btrfs instead\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -279,7 +279,7 @@", " ", "     def parse(self, args):", "         retval = F20_AutoPart.parse(self, args)", "-        if (self.fstype == 'btrfs'):", "+        if (self.fstype in 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "         if ((self._typeAsStr() == 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))"]]], "module-name": "pykickstart.commands.autopart"}, "20": {"op-name": "boolean_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "boolean_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 4, "result-data": [{"occurrence": 4, "line_number": 107, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'autopart\\n'\n+ autopart\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -61,7 +61,7 @@", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        self.autopart = True", "+        self.autopart = False", "         return self", " ", " class F12_AutoPart(F9_AutoPart):"]]], "module-name": "pykickstart.commands.autopart"}, "29": {"op-name": "replace_In_with_Lt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_In_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 1, "result-data": [{"occurrence": 1, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 161, in assert_parse\n    parser = self.getParser(inputStr)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.autopart\", line 339, in __init__\n  File \"pykickstart.commands.autopart\", line 313, in __init__\n  File \"pykickstart.commands.autopart\", line 254, in __init__\n  File \"pykickstart.commands.autopart\", line 224, in __init__\n  File \"pykickstart.commands.autopart\", line 115, in __init__\n  File \"pykickstart.commands.autopart\", line 72, in __init__\n  File \"pykickstart.commands.autopart\", line 378, in _getParser\nTypeError: unorderable types: str() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -250,7 +250,7 @@", "         'Only necessary for the type change documentation'", "         op = F18_AutoPart._getParser(self)", "         for action in op._actions:", "-            if ('--type' in action.option_strings):", "+            if ('--type' < action.option_strings):", "                 action.help += (\"\\n\\n                    .. versionchanged:: %s\\n\\n                    Partitioning scheme 'thinp' was added.\" % versionToLongString(F20))", "         return op", " "]]], "module-name": "pykickstart.commands.autopart"}, "63": {"op-name": "number_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "number_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 6, "result-data": [{"occurrence": 6, "line_number": 249, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -157,7 +157,7 @@", " ", " class F17_AutoPart(F16_AutoPart):", " ", "-    def __init__(self, writePriority=100, *args, **kwargs):", "+    def __init__(self, writePriority=101, *args, **kwargs):", "         self.typeMap = {'lvm': AUTOPART_TYPE_LVM, 'btrfs': AUTOPART_TYPE_BTRFS, 'plain': AUTOPART_TYPE_PLAIN, 'partition': AUTOPART_TYPE_PLAIN}", "         F16_AutoPart.__init__(self, *args, writePriority=writePriority, **kwargs)", "         self.type = kwargs.get('type', None)"]]], "module-name": "pykickstart.commands.autopart"}, "8": {"op-name": "replace_Eq_with_Is", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 192, in runTest\n    self.assert_parse_error(\"autopart --fstype=btrfs\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -279,7 +279,7 @@", " ", "     def parse(self, args):", "         retval = F20_AutoPart.parse(self, args)", "-        if (self.fstype == 'btrfs'):", "+        if (self.fstype is 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "         if ((self._typeAsStr() == 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))"]]], "module-name": "pykickstart.commands.autopart"}, "21": {"op-name": "boolean_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "boolean_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 5, "result-data": [{"occurrence": 5, "line_number": 118, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -71,7 +71,7 @@", "     def __init__(self, writePriority=100, *args, **kwargs):", "         F9_AutoPart.__init__(self, *args, writePriority=writePriority, **kwargs)", "         self.escrowcert = kwargs.get('escrowcert', '')", "-        self.backuppassphrase = kwargs.get('backuppassphrase', False)", "+        self.backuppassphrase = kwargs.get('backuppassphrase', True)", " ", "     def __str__(self):", "         retval = F9_AutoPart.__str__(self)"]]], "module-name": "pykickstart.commands.autopart"}, "19": {"op-name": "boolean_replacer", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 3, "result-data": [{"occurrence": 3, "line_number": 93, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autopart --encrypted\\n' != 'autopart\\n'\n- autopart --encrypted\n+ autopart\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -54,7 +54,7 @@", " ", "     def _getParser(self):", "         op = FC3_AutoPart._getParser(self)", "-        op.add_argument('--encrypted', action='store_true', default=False, version=F9, help='\\n                        Should all devices with support be encrypted by default?\\n                        This is equivalent to checking the \"Encrypt\" checkbox on\\n                        the initial partitioning screen.')", "+        op.add_argument('--encrypted', action='store_true', default=True, version=F9, help='\\n                        Should all devices with support be encrypted by default?\\n                        This is equivalent to checking the \"Encrypt\" checkbox on\\n                        the initial partitioning screen.')", "         op.add_argument('--passphrase', version=F9, help='\\n                        Only relevant if ``--encrypted`` is specified. Provide\\n                        a default system-wide passphrase for all encrypted\\n                        devices.')", "         return op", " "]]], "module-name": "pykickstart.commands.autopart"}, "53": {"op-name": "replace_NotEq_with_Gt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 0, "result-data": [{"occurrence": 0, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -47,7 +47,7 @@", "         retval += 'autopart'", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase > ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         retval += '\\n'", "         return retval"]]], "module-name": "pykickstart.commands.autopart"}, "85": {"op-name": "replace_Eq_with_Lt", "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.autopart", "replace_Eq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "occurrence": 2, "result-data": [{"occurrence": 2, "line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 180, in runTest\n    F20_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 173, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 160, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 135, in runTest\n    F16_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 119, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 58, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autopart.py\", line 30, in runTest\n    self.assert_parse(\"autopart\", \"autopart\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.autopart\", line 423, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nautopart --fstype=btrfs is not valid fstype, use --type=btrfs instead\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autopart.py", "@@ -279,7 +279,7 @@", " ", "     def parse(self, args):", "         retval = F20_AutoPart.parse(self, args)", "-        if (self.fstype == 'btrfs'):", "+        if (self.fstype < 'btrfs'):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype=btrfs is not valid fstype, use --type=btrfs instead')))", "         if ((self._typeAsStr() == 'btrfs') and self.fstype):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('autopart --fstype cannot be used with --type=btrfs')))"]]], "module-name": "pykickstart.commands.autopart"}}, "_default": {}, "work-parameters": {"1": {"timeout": 72.09767000000001, "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autopart.py"], "test-runner": "nose"}}}