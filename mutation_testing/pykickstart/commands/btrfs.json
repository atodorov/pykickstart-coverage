{"_default": {}, "work-parameters": {"1": {"test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "timeout": 72.85866, "test-runner": "nose"}}, "work-items": {"1": {"op-name": "replace_Eq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint >= y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "7": {"op-name": "replace_In_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.btrfs\", line 126, in level_cb\nTypeError: unorderable types: str() > dict()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\nargparse.ArgumentError: argument --data: invalid level_cb value: 'raid0'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 203, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nargument --data: invalid level_cb value: 'raid0'\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nargument --data: invalid level_cb value: 'raid0'\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -89,7 +89,7 @@", "     def _getParser(self):", " ", "         def level_cb(value):", "-            if (value.lower() in self.levelMap):", "+            if (value.lower() > self.levelMap):", "                 return self.levelMap[value.lower()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid btrfs level: %s') % value)))"]]]}, "74": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 2, "line_number": 44}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -19,7 +19,7 @@", "         self.devices = kwargs.get('devices', [])", "         self.dataLevel = (kwargs.get('data', None) or kwargs.get('dataLevel', None))", "         self.metaDataLevel = (kwargs.get('metadata', None) or kwargs.get('metaDataLevel', None))", "-        self.subvol = kwargs.get('subvol', False)", "+        self.subvol = kwargs.get('subvol', True)", "         self.parent = kwargs.get('parent', '')", "         self.name = kwargs.get('name', None)", " "]]]}, "78": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "boolean_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 6, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 6, "line_number": 193}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 226, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs subvolume requires a name\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs subvolume requires a name\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -99,7 +99,7 @@", "         op.add_argument('--label', default='', version=F17, help='\\n                        Specify the label to give to the filesystem to be made.\\n                        If the given label is already in use by another\\n                        filesystem, a new label will be created. This option\\n                        has no meaning for subvolumes.')", "         op.add_argument('--data', dest='dataLevel', type=level_cb, help='\\n                        RAID level to use (0, 1, 10) for filesystem data. Optional.\\n                        This option has no meaning for subvolumes.', version=F17)", "         op.add_argument('--metadata', dest='metaDataLevel', type=level_cb, version=F17, help='\\n                        RAID level to use (0, 1, 10) for filesystem/volume\\n                        metadata. Optional. This option has no meaning for\\n                        subvolumes.')", "-        op.add_argument('--subvol', action='store_true', default=False, version=F17, help='Create BTRFS subvolume.')", "+        op.add_argument('--subvol', action='store_true', default=True, version=F17, help='Create BTRFS subvolume.')", "         op.add_argument('--parent', default='', version=F17, help='')", "         op.add_argument('--name', default='', version=F17, help='\\n                        Subvolume name.')", "         return op"]]]}, "5": {"op-name": "replace_Eq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_GtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 223, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs subvol requires specification of parent volume\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs subvol requires specification of parent volume\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -120,7 +120,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if ((len(extra) == 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "-        elif (len(extra) == 1):", "+        elif (len(extra) >= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))", "         if (data.subvol and (not data.name)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))"]]]}, "55": {"op-name": "replace_Eq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -118,7 +118,7 @@", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if ((len(extra) == 1) and (not data.subvol)):", "+        if ((len(extra) is 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "         elif (len(extra) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))"]]]}, "44": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 4, "line_number": 228}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 46, in runTest\n    \"btrfs none part.01 part.01\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'btrfs part.01 part.01 part.01\\n' != 'btrfs none part.01 part.01\\n'\n- btrfs part.01 part.01 part.01\n?              --------\n+ btrfs none part.01 part.01\n?      +++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -124,7 +124,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))", "         if (data.subvol and (not data.name)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))", "-        data.mountpoint = extra[0]", "+        data.mountpoint = extra[1]", "         data.devices = extra[1:]", "         if (data in self.dataList()):", "             warnings.warn((_('A btrfs volume with the mountpoint %s has already been defined.') % data.label))"]]]}, "54": {"op-name": "replace_Eq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -113,7 +113,7 @@", "             data.preexist = True", "         elif data.preexist:", "             data.format = False", "-        if (len(extra) == 0):", "+        if (len(extra) is 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a mountpoint')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}"]]]}, "69": {"op-name": "replace_In_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 119, in runTest\n    btrfs.parse(\"btrfs /home --subvol --name=home\".split(\" \"))\n  File \"pykickstart.commands.btrfs\", line 232, in parse\n  File \"pykickstart.commands.btrfs\", line 52, in __eq__\nAttributeError: 'list' object has no attribute 'mountpoint'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -126,7 +126,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))", "         data.mountpoint = extra[0]", "         data.devices = extra[1:]", "-        if (data in self.dataList()):", "+        if (data == self.dataList()):", "             warnings.warn((_('A btrfs volume with the mountpoint %s has already been defined.') % data.label))", "         return data", " "]]]}, "29": {"op-name": "replace_Eq_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_NotEq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 223, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs subvol requires specification of parent volume\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs subvol requires specification of parent volume\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -120,7 +120,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if ((len(extra) == 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "-        elif (len(extra) == 1):", "+        elif (len(extra) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))", "         if (data.subvol and (not data.name)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))"]]]}, "11": {"op-name": "replace_Eq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 119, in runTest\n    btrfs.parse(\"btrfs /home --subvol --name=home\".split(\" \"))\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint > y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "61": {"op-name": "replace_Eq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Lt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 81, in runTest\n    self.assert_parse_error(\"btrfs / --subvol --name=root\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -120,7 +120,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if ((len(extra) == 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "-        elif (len(extra) == 1):", "+        elif (len(extra) < 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))", "         if (data.subvol and (not data.name)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))"]]]}, "84": {"op-name": "replace_In_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 233, in parse\nUserWarning: A btrfs volume with the mountpoint  has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: A btrfs volume with the mountpoint  has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -126,7 +126,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))", "         data.mountpoint = extra[0]", "         data.devices = extra[1:]", "-        if (data in self.dataList()):", "+        if (data not in self.dataList()):", "             warnings.warn((_('A btrfs volume with the mountpoint %s has already been defined.') % data.label))", "         return data", " "]]]}, "82": {"op-name": "replace_In_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 232, in parse\nTypeError: unorderable types: F17_BTRFSData() < list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: F17_BTRFSData() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -126,7 +126,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))", "         data.mountpoint = extra[0]", "         data.devices = extra[1:]", "-        if (data in self.dataList()):", "+        if (data < self.dataList()):", "             warnings.warn((_('A btrfs volume with the mountpoint %s has already been defined.') % data.label))", "         return data", " "]]]}, "76": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "boolean_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 4, "line_number": 167}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 46, in runTest\n    \"btrfs none part.01 part.01\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'btrfs none --noformat --useexisting part.01 part.01\\n' != 'btrfs none part.01 part.01\\n'\n- btrfs none --noformat --useexisting part.01 part.01\n+ btrfs none part.01 part.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -94,7 +94,7 @@", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid btrfs level: %s') % value)))", "         op = KSOptionParser(prog='btrfs', description=\"\\n                            Defines a BTRFS volume or subvolume. This command\\n                            is of the form:\\n\\n                            ``btrfs <mntpoint> --data=<level> --metadata=<level> --label=<label> <partitions*>``\\n\\n                            for volumes and of the form:\\n\\n                            ``btrfs <mntpoint> --subvol --name=<path> <parent>``\\n\\n                            for subvolumes.\\n\\n                            The ``<partitions*>`` (which denotes that multiple\\n                            partitions can be listed) lists the BTRFS identifiers\\n                            to add to the BTRFS volume. For subvolumes, should be\\n                            the identifier of the subvolume's parent volume.\\n\\n                            ``<mntpoint>``\\n\\n                            Location where the file system is mounted.\", epilog='\\n                            The following example shows how to create a BTRFS\\n                            volume from member partitions on three disks with\\n                            subvolumes for root and home. The main volume is not\\n                            mounted or used directly in this example -- only\\n                            the root and home subvolumes::\\n\\n                                part btrfs.01 --size=6000 --ondisk=sda\\n                                part btrfs.02 --size=6000 --ondisk=sdb\\n                                part btrfs.03 --size=6000 --ondisk=sdc\\n\\n                                btrfs none --data=0 --metadata=1 --label=f17 btrfs.01 btrfs.02 btrfs.03\\n                                btrfs / --subvol --name=root LABEL=f17\\n                                btrfs /home --subvol --name=home f17', version=F17)", "-        op.add_argument('--noformat', dest='format', action='store_false', default=True, version=F17, help='\\n                        Use an existing BTRFS volume (or subvolume) and do not\\n                        reformat the filesystem.')", "+        op.add_argument('--noformat', dest='format', action='store_false', default=False, version=F17, help='\\n                        Use an existing BTRFS volume (or subvolume) and do not\\n                        reformat the filesystem.')", "         op.add_argument('--useexisting', dest='preexist', action='store_true', default=False, help='Same as ``--noformat``.', version=F17)", "         op.add_argument('--label', default='', version=F17, help='\\n                        Specify the label to give to the filesystem to be made.\\n                        If the given label is already in use by another\\n                        filesystem, a new label will be created. This option\\n                        has no meaning for subvolumes.')", "         op.add_argument('--data', dest='dataLevel', type=level_cb, help='\\n                        RAID level to use (0, 1, 10) for filesystem data. Optional.\\n                        This option has no meaning for subvolumes.', version=F17)"]]]}, "46": {"op-name": "replace_Eq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 125, in runTest\n    self.assertNotEqual(self.assert_parse(\"btrfs / part.01\"), self.assert_parse(\"btrfs /home part.01\"))\nAssertionError: <pykickstart.commands.btrfs.F17_BTRFSData object at 0x7f58fa169be0> == <pykickstart.commands.btrfs.F17_BTRFSData object at 0x7f58fa2e6128>\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint in y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "66": {"op-name": "replace_Eq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 220, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -118,7 +118,7 @@", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if ((len(extra) == 1) and (not data.subvol)):", "+        if ((len(extra) not in 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "         elif (len(extra) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))"]]]}, "45": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "number_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 5, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 5, "line_number": 229}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 46, in runTest\n    \"btrfs none part.01 part.01\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'btrfs none part.01\\n' != 'btrfs none part.01 part.01\\n'\n- btrfs none part.01\n+ btrfs none part.01 part.01\n?           ++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -125,7 +125,7 @@", "         if (data.subvol and (not data.name)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))", "         data.mountpoint = extra[0]", "-        data.devices = extra[1:]", "+        data.devices = extra[2:]", "         if (data in self.dataList()):", "             warnings.warn((_('A btrfs volume with the mountpoint %s has already been defined.') % data.label))", "         return data"]]]}, "48": {"op-name": "replace_Eq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 214, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -113,7 +113,7 @@", "             data.preexist = True", "         elif data.preexist:", "             data.format = False", "-        if (len(extra) == 0):", "+        if (len(extra) in 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a mountpoint')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}"]]]}, "18": {"op-name": "replace_Eq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -113,7 +113,7 @@", "             data.preexist = True", "         elif data.preexist:", "             data.format = False", "-        if (len(extra) == 0):", "+        if (len(extra) <= 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a mountpoint')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}"]]]}, "19": {"op-name": "replace_Eq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -118,7 +118,7 @@", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if ((len(extra) == 1) and (not data.subvol)):", "+        if ((len(extra) <= 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "         elif (len(extra) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))"]]]}, "3": {"op-name": "replace_Eq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 215, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a mountpoint\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a mountpoint\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -113,7 +113,7 @@", "             data.preexist = True", "         elif data.preexist:", "             data.format = False", "-        if (len(extra) == 0):", "+        if (len(extra) >= 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a mountpoint')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}"]]]}, "8": {"op-name": "replace_In_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 232, in parse\nTypeError: unorderable types: F17_BTRFSData() > list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: F17_BTRFSData() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -126,7 +126,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))", "         data.mountpoint = extra[0]", "         data.devices = extra[1:]", "-        if (data in self.dataList()):", "+        if (data > self.dataList()):", "             warnings.warn((_('A btrfs volume with the mountpoint %s has already been defined.') % data.label))", "         return data", " "]]]}, "33": {"op-name": "replace_In_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 119, in runTest\n    btrfs.parse(\"btrfs /home --subvol --name=home\".split(\" \"))\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -126,7 +126,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))", "         data.mountpoint = extra[0]", "         data.devices = extra[1:]", "-        if (data in self.dataList()):", "+        if (data is self.dataList()):", "             warnings.warn((_('A btrfs volume with the mountpoint %s has already been defined.') % data.label))", "         return data", " "]]]}, "4": {"op-name": "replace_Eq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 221, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a list of partitions\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a list of partitions\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -118,7 +118,7 @@", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if ((len(extra) == 1) and (not data.subvol)):", "+        if ((len(extra) >= 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "         elif (len(extra) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))"]]]}, "26": {"op-name": "replace_Eq_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 122, in runTest\n    self.assertNotEqual(self.assert_parse(\"btrfs / part.01\"), None)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 864, in assertNotEqual\n    if not first != second:\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\nRecursionError: maximum recursion depth exceeded while calling a Python object\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -29,7 +29,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self != y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "64": {"op-name": "replace_Eq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 122, in runTest\n    self.assertNotEqual(self.assert_parse(\"btrfs / part.01\"), None)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 864, in assertNotEqual\n    if not first != second:\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -29,7 +29,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self not in y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "20": {"op-name": "replace_Eq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_LtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -120,7 +120,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if ((len(extra) == 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "-        elif (len(extra) == 1):", "+        elif (len(extra) <= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))", "         if (data.subvol and (not data.name)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))"]]]}, "27": {"op-name": "replace_Eq_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 215, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a mountpoint\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a mountpoint\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -113,7 +113,7 @@", "             data.preexist = True", "         elif data.preexist:", "             data.format = False", "-        if (len(extra) == 0):", "+        if (len(extra) != 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a mountpoint')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}"]]]}, "75": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 3, "line_number": 50}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 122, in runTest\n    self.assertNotEqual(self.assert_parse(\"btrfs / part.01\"), None)\nAssertionError: <pykickstart.commands.btrfs.F17_BTRFSData object at 0x7f4d5ccdbe80> == None\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -25,7 +25,7 @@", " ", "     def __eq__(self, y):", "         if (not y):", "-            return False", "+            return True", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):"]]]}, "51": {"op-name": "replace_NotEq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 129, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 46, in runTest\n    \"btrfs none part.01 part.01\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'btrfs none --mkfsoptions=\"\" part.01 part.01\\n' != 'btrfs none part.01 part.01\\n'\n- btrfs none --mkfsoptions=\"\" part.01 part.01\n?           -----------------\n+ btrfs none part.01 part.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -63,7 +63,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F17_BTRFSData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts >= ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]]}, "50": {"op-name": "replace_Eq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_In", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 222, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -120,7 +120,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if ((len(extra) == 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "-        elif (len(extra) == 1):", "+        elif (len(extra) in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))", "         if (data.subvol and (not data.name)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))"]]]}, "58": {"op-name": "replace_Eq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 122, in runTest\n    self.assertNotEqual(self.assert_parse(\"btrfs / part.01\"), None)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 864, in assertNotEqual\n    if not first != second:\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\nTypeError: unorderable types: F17_BTRFSData() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -29,7 +29,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self < y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "14": {"op-name": "replace_Eq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 221, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a list of partitions\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a list of partitions\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -118,7 +118,7 @@", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if ((len(extra) == 1) and (not data.subvol)):", "+        if ((len(extra) > 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "         elif (len(extra) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))"]]]}, "32": {"op-name": "replace_In_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 203, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nInvalid btrfs level: raid0\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nInvalid btrfs level: raid0\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -89,7 +89,7 @@", "     def _getParser(self):", " ", "         def level_cb(value):", "-            if (value.lower() in self.levelMap):", "+            if (value.lower() is self.levelMap):", "                 return self.levelMap[value.lower()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid btrfs level: %s') % value)))"]]]}, "63": {"op-name": "replace_Eq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 119, in runTest\n    btrfs.parse(\"btrfs /home --subvol --name=home\".split(\" \"))\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint not in y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "73": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 1, "line_number": 36}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -13,7 +13,7 @@", "     def __init__(self, *args, **kwargs):", "         BaseData.__init__(self, *args, **kwargs)", "         self.format = kwargs.get('format', True)", "-        self.preexist = kwargs.get('preexist', False)", "+        self.preexist = kwargs.get('preexist', True)", "         self.label = kwargs.get('label', '')", "         self.mountpoint = kwargs.get('mountpoint', '')", "         self.devices = kwargs.get('devices', [])"]]]}, "65": {"op-name": "replace_Eq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 214, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -113,7 +113,7 @@", "             data.preexist = True", "         elif data.preexist:", "             data.format = False", "-        if (len(extra) == 0):", "+        if (len(extra) not in 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a mountpoint')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}"]]]}, "28": {"op-name": "replace_Eq_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_NotEq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 221, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a list of partitions\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a list of partitions\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -118,7 +118,7 @@", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if ((len(extra) == 1) and (not data.subvol)):", "+        if ((len(extra) != 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "         elif (len(extra) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))"]]]}, "79": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "boolean_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 7, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 7, "line_number": 210}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 60, in runTest\n    \"btrfs /foo --noformat --useexisting --data=raid1 LABEL=foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'btrfs /foo --noformat --data=raid1 LABEL=foo\\n' != 'btrfs /foo --noformat --useexisting --data=raid1 LABEL=foo\\n'\n- btrfs /foo --noformat --data=raid1 LABEL=foo\n+ btrfs /foo --noformat --useexisting --data=raid1 LABEL=foo\n?                      ++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -110,7 +110,7 @@", "         self.set_to_obj(ns, data)", "         data.lineno = self.lineno", "         if (not data.format):", "-            data.preexist = True", "+            data.preexist = False", "         elif data.preexist:", "             data.format = False", "         if (len(extra) == 0):"]]]}, "34": {"op-name": "replace_Eq_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 123, in runTest\n    self.assertEqual(self.assert_parse(\"btrfs / part.01\"), self.assert_parse(\"btrfs / part.01\"))\nAssertionError: <pykickstart.commands.btrfs.F17_BTRFSData object at 0x7f881f590cc0> != <pykickstart.commands.btrfs.F17_BTRFSData object at 0x7f881f666978>\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint is not y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "6": {"op-name": "replace_NotEq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 133, in runTest\n    \"btrfs / --mkfsoptions=\\\"some,thing\\\" part.01\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'btrfs / part.01\\n' != 'btrfs / --mkfsoptions=\"some,thing\" part.01\\n'\n- btrfs / part.01\n+ btrfs / --mkfsoptions=\"some,thing\" part.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -63,7 +63,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F17_BTRFSData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts < ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]]}, "38": {"op-name": "replace_Eq_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_IsNot", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 223, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs subvol requires specification of parent volume\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs subvol requires specification of parent volume\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -120,7 +120,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if ((len(extra) == 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "-        elif (len(extra) == 1):", "+        elif (len(extra) is not 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))", "         if (data.subvol and (not data.name)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))"]]]}, "67": {"op-name": "replace_Eq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_NotIn", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 222, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -120,7 +120,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if ((len(extra) == 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "-        elif (len(extra) == 1):", "+        elif (len(extra) not in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))", "         if (data.subvol and (not data.name)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))"]]]}, "47": {"op-name": "replace_Eq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 122, in runTest\n    self.assertNotEqual(self.assert_parse(\"btrfs / part.01\"), None)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 864, in assertNotEqual\n    if not first != second:\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -29,7 +29,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self in y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "21": {"op-name": "replace_NotEq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -63,7 +63,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F17_BTRFSData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts not in ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]]}, "56": {"op-name": "replace_Eq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Is", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -120,7 +120,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if ((len(extra) == 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "-        elif (len(extra) == 1):", "+        elif (len(extra) is 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))", "         if (data.subvol and (not data.name)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))"]]]}, "41": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 1, "line_number": 214}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 66, in runTest\n    self.assert_parse_error(\"btrfs\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 228, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -113,7 +113,7 @@", "             data.preexist = True", "         elif data.preexist:", "             data.format = False", "-        if (len(extra) == 0):", "+        if (len(extra) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a mountpoint')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}"]]]}, "36": {"op-name": "replace_Eq_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 215, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a mountpoint\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a mountpoint\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -113,7 +113,7 @@", "             data.preexist = True", "         elif data.preexist:", "             data.format = False", "-        if (len(extra) == 0):", "+        if (len(extra) is not 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a mountpoint')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}"]]]}, "70": {"op-name": "replace_In_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 84, in runTest\n    self.assert_parse_error(\"btrfs / --data=47 btrfs.01\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 203, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.btrfs\", line 127, in level_cb\nKeyError: '47'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -89,7 +89,7 @@", "     def _getParser(self):", " ", "         def level_cb(value):", "-            if (value.lower() in self.levelMap):", "+            if (value.lower() is not self.levelMap):", "                 return self.levelMap[value.lower()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid btrfs level: %s') % value)))"]]]}, "17": {"op-name": "replace_Eq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 122, in runTest\n    self.assertNotEqual(self.assert_parse(\"btrfs / part.01\"), None)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 864, in assertNotEqual\n    if not first != second:\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\nTypeError: unorderable types: F17_BTRFSData() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -29,7 +29,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self <= y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "40": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 0, "line_number": 103}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -74,7 +74,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=132, *args, **kwargs):", "+    def __init__(self, writePriority=133, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.levelMap = {'raid0': 'raid0', '0': 'raid0', 'raid1': 'raid1', '1': 'raid1', 'raid10': 'raid10', '10': 'raid10', 'single': 'single'}"]]]}, "9": {"op-name": "replace_In_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 84, in runTest\n    self.assert_parse_error(\"btrfs / --data=47 btrfs.01\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 203, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.btrfs\", line 127, in level_cb\nKeyError: '47'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -89,7 +89,7 @@", "     def _getParser(self):", " ", "         def level_cb(value):", "-            if (value.lower() in self.levelMap):", "+            if (value.lower() != self.levelMap):", "                 return self.levelMap[value.lower()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid btrfs level: %s') % value)))"]]]}, "43": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 3, "line_number": 222}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 223, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs subvol requires specification of parent volume\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs subvol requires specification of parent volume\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -120,7 +120,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if ((len(extra) == 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "-        elif (len(extra) == 1):", "+        elif (len(extra) == 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))", "         if (data.subvol and (not data.name)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))"]]]}, "77": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "boolean_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 5, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 5, "line_number": 171}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 46, in runTest\n    \"btrfs none part.01 part.01\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'btrfs none --noformat --useexisting part.01 part.01\\n' != 'btrfs none part.01 part.01\\n'\n- btrfs none --noformat --useexisting part.01 part.01\n+ btrfs none part.01 part.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -95,7 +95,7 @@", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid btrfs level: %s') % value)))", "         op = KSOptionParser(prog='btrfs', description=\"\\n                            Defines a BTRFS volume or subvolume. This command\\n                            is of the form:\\n\\n                            ``btrfs <mntpoint> --data=<level> --metadata=<level> --label=<label> <partitions*>``\\n\\n                            for volumes and of the form:\\n\\n                            ``btrfs <mntpoint> --subvol --name=<path> <parent>``\\n\\n                            for subvolumes.\\n\\n                            The ``<partitions*>`` (which denotes that multiple\\n                            partitions can be listed) lists the BTRFS identifiers\\n                            to add to the BTRFS volume. For subvolumes, should be\\n                            the identifier of the subvolume's parent volume.\\n\\n                            ``<mntpoint>``\\n\\n                            Location where the file system is mounted.\", epilog='\\n                            The following example shows how to create a BTRFS\\n                            volume from member partitions on three disks with\\n                            subvolumes for root and home. The main volume is not\\n                            mounted or used directly in this example -- only\\n                            the root and home subvolumes::\\n\\n                                part btrfs.01 --size=6000 --ondisk=sda\\n                                part btrfs.02 --size=6000 --ondisk=sdb\\n                                part btrfs.03 --size=6000 --ondisk=sdc\\n\\n                                btrfs none --data=0 --metadata=1 --label=f17 btrfs.01 btrfs.02 btrfs.03\\n                                btrfs / --subvol --name=root LABEL=f17\\n                                btrfs /home --subvol --name=home f17', version=F17)", "         op.add_argument('--noformat', dest='format', action='store_false', default=True, version=F17, help='\\n                        Use an existing BTRFS volume (or subvolume) and do not\\n                        reformat the filesystem.')", "-        op.add_argument('--useexisting', dest='preexist', action='store_true', default=False, help='Same as ``--noformat``.', version=F17)", "+        op.add_argument('--useexisting', dest='preexist', action='store_true', default=True, help='Same as ``--noformat``.', version=F17)", "         op.add_argument('--label', default='', version=F17, help='\\n                        Specify the label to give to the filesystem to be made.\\n                        If the given label is already in use by another\\n                        filesystem, a new label will be created. This option\\n                        has no meaning for subvolumes.')", "         op.add_argument('--data', dest='dataLevel', type=level_cb, help='\\n                        RAID level to use (0, 1, 10) for filesystem data. Optional.\\n                        This option has no meaning for subvolumes.', version=F17)", "         op.add_argument('--metadata', dest='metaDataLevel', type=level_cb, version=F17, help='\\n                        RAID level to use (0, 1, 10) for filesystem/volume\\n                        metadata. Optional. This option has no meaning for\\n                        subvolumes.')"]]]}, "35": {"op-name": "replace_Eq_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 122, in runTest\n    self.assertNotEqual(self.assert_parse(\"btrfs / part.01\"), None)\nAssertionError: <pykickstart.commands.btrfs.F17_BTRFSData object at 0x7fd2d612f1d0> == None\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -29,7 +29,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is not y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "53": {"op-name": "replace_Eq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -29,7 +29,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "68": {"op-name": "replace_In_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 203, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nInvalid btrfs level: raid0\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nInvalid btrfs level: raid0\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -89,7 +89,7 @@", "     def _getParser(self):", " ", "         def level_cb(value):", "-            if (value.lower() in self.levelMap):", "+            if (value.lower() == self.levelMap):", "                 return self.levelMap[value.lower()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid btrfs level: %s') % value)))"]]]}, "81": {"op-name": "replace_In_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.btrfs\", line 126, in level_cb\nTypeError: unorderable types: str() < dict()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\nargparse.ArgumentError: argument --data: invalid level_cb value: 'raid0'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 203, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nargument --data: invalid level_cb value: 'raid0'\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nargument --data: invalid level_cb value: 'raid0'\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -89,7 +89,7 @@", "     def _getParser(self):", " ", "         def level_cb(value):", "-            if (value.lower() in self.levelMap):", "+            if (value.lower() < self.levelMap):", "                 return self.levelMap[value.lower()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid btrfs level: %s') % value)))"]]]}, "10": {"op-name": "replace_In_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 233, in parse\nUserWarning: A btrfs volume with the mountpoint  has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: A btrfs volume with the mountpoint  has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -126,7 +126,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))", "         data.mountpoint = extra[0]", "         data.devices = extra[1:]", "-        if (data in self.dataList()):", "+        if (data != self.dataList()):", "             warnings.warn((_('A btrfs volume with the mountpoint %s has already been defined.') % data.label))", "         return data", " "]]]}, "59": {"op-name": "replace_Eq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 66, in runTest\n    self.assert_parse_error(\"btrfs\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 228, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -113,7 +113,7 @@", "             data.preexist = True", "         elif data.preexist:", "             data.format = False", "-        if (len(extra) == 0):", "+        if (len(extra) < 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a mountpoint')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}"]]]}, "83": {"op-name": "replace_In_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 203, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nInvalid btrfs level: raid0\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nInvalid btrfs level: raid0\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -89,7 +89,7 @@", "     def _getParser(self):", " ", "         def level_cb(value):", "-            if (value.lower() in self.levelMap):", "+            if (value.lower() not in self.levelMap):", "                 return self.levelMap[value.lower()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid btrfs level: %s') % value)))"]]]}, "37": {"op-name": "replace_Eq_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_IsNot", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 221, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a list of partitions\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a list of partitions\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -118,7 +118,7 @@", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if ((len(extra) == 1) and (not data.subvol)):", "+        if ((len(extra) is not 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "         elif (len(extra) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))"]]]}, "2": {"op-name": "replace_Eq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 122, in runTest\n    self.assertNotEqual(self.assert_parse(\"btrfs / part.01\"), None)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 864, in assertNotEqual\n    if not first != second:\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\nTypeError: unorderable types: F17_BTRFSData() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -29,7 +29,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self >= y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "62": {"op-name": "replace_NotEq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 129, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 46, in runTest\n    \"btrfs none part.01 part.01\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'btrfs none --mkfsoptions=\"\" part.01 part.01\\n' != 'btrfs none part.01 part.01\\n'\n- btrfs none --mkfsoptions=\"\" part.01 part.01\n?           -----------------\n+ btrfs none part.01 part.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -63,7 +63,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F17_BTRFSData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts <= ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]]}, "60": {"op-name": "replace_Eq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -118,7 +118,7 @@", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if ((len(extra) == 1) and (not data.subvol)):", "+        if ((len(extra) < 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "         elif (len(extra) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))"]]]}, "22": {"op-name": "replace_NotEq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -63,7 +63,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F17_BTRFSData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts > ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]]}, "39": {"op-name": "replace_NotEq_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 129, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 46, in runTest\n    \"btrfs none part.01 part.01\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'btrfs none --mkfsoptions=\"\" part.01 part.01\\n' != 'btrfs none part.01 part.01\\n'\n- btrfs none --mkfsoptions=\"\" part.01 part.01\n?           -----------------\n+ btrfs none part.01 part.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -63,7 +63,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F17_BTRFSData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts == ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]]}, "80": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "boolean_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 8, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 8, "line_number": 212}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 50, in runTest\n    \"btrfs /foo --noformat --useexisting --data=raid1 LABEL=foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'btrfs /foo --useexisting --data=raid1 LABEL=foo\\n' != 'btrfs /foo --noformat --useexisting --data=raid1 LABEL=foo\\n'\n- btrfs /foo --useexisting --data=raid1 LABEL=foo\n+ btrfs /foo --noformat --useexisting --data=raid1 LABEL=foo\n?           +++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -112,7 +112,7 @@", "         if (not data.format):", "             data.preexist = True", "         elif data.preexist:", "-            data.format = False", "+            data.format = True", "         if (len(extra) == 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a mountpoint')))", "         elif any((arg for arg in extra if arg.startswith('-'))):"]]]}, "71": {"op-name": "replace_In_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 233, in parse\nUserWarning: A btrfs volume with the mountpoint  has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: A btrfs volume with the mountpoint  has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -126,7 +126,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))", "         data.mountpoint = extra[0]", "         data.devices = extra[1:]", "-        if (data in self.dataList()):", "+        if (data is not self.dataList()):", "             warnings.warn((_('A btrfs volume with the mountpoint %s has already been defined.') % data.label))", "         return data", " "]]]}, "57": {"op-name": "replace_Eq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 119, in runTest\n    btrfs.parse(\"btrfs /home --subvol --name=home\".split(\" \"))\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint < y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "25": {"op-name": "replace_Eq_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 119, in runTest\n    btrfs.parse(\"btrfs /home --subvol --name=home\".split(\" \"))\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint != y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "16": {"op-name": "replace_Eq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 125, in runTest\n    self.assertNotEqual(self.assert_parse(\"btrfs / part.01\"), self.assert_parse(\"btrfs /home part.01\"))\nAssertionError: <pykickstart.commands.btrfs.F17_BTRFSData object at 0x7f327191f198> == <pykickstart.commands.btrfs.F17_BTRFSData object at 0x7f32718457b8>\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint <= y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "52": {"op-name": "replace_Eq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 119, in runTest\n    btrfs.parse(\"btrfs /home --subvol --name=home\".split(\" \"))\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.mountpoint == y.mountpoint)", "+        return (self.mountpoint is y.mountpoint)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "72": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 0, "line_number": 35}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -12,7 +12,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         BaseData.__init__(self, *args, **kwargs)", "-        self.format = kwargs.get('format', True)", "+        self.format = kwargs.get('format', False)", "         self.preexist = kwargs.get('preexist', False)", "         self.label = kwargs.get('label', '')", "         self.mountpoint = kwargs.get('mountpoint', '')"]]]}, "85": {"op-name": "replace_NotEq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 129, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 46, in runTest\n    \"btrfs none part.01 part.01\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'btrfs none --mkfsoptions=\"\" part.01 part.01\\n' != 'btrfs none part.01 part.01\\n'\n- btrfs none --mkfsoptions=\"\" part.01 part.01\n?           -----------------\n+ btrfs none part.01 part.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -63,7 +63,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F17_BTRFSData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts is ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]]}, "31": {"op-name": "replace_In_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 232, in parse\nTypeError: unorderable types: F17_BTRFSData() <= list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: F17_BTRFSData() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -126,7 +126,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))", "         data.mountpoint = extra[0]", "         data.devices = extra[1:]", "-        if (data in self.dataList()):", "+        if (data <= self.dataList()):", "             warnings.warn((_('A btrfs volume with the mountpoint %s has already been defined.') % data.label))", "         return data", " "]]]}, "12": {"op-name": "replace_Eq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 122, in runTest\n    self.assertNotEqual(self.assert_parse(\"btrfs / part.01\"), None)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 864, in assertNotEqual\n    if not first != second:\n  File \"pykickstart.commands.btrfs\", line 55, in __ne__\nTypeError: unorderable types: F17_BTRFSData() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -29,7 +29,7 @@", "         return (self.mountpoint == y.mountpoint)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self > y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "86": {"op-name": "replace_NotEq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 129, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 46, in runTest\n    \"btrfs none part.01 part.01\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'btrfs none --mkfsoptions=\"\" part.01 part.01\\n' != 'btrfs none part.01 part.01\\n'\n- btrfs none --mkfsoptions=\"\" part.01 part.01\n?           -----------------\n+ btrfs none part.01 part.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -63,7 +63,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F17_BTRFSData._getArgsAsStr(self)", "-        if (self.mkfsopts != ''):", "+        if (self.mkfsopts in ''):", "             retval += (' --mkfsoptions=\"%s\"' % self.mkfsopts)", "         return retval", " "]]]}, "13": {"op-name": "replace_Eq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 215, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a mountpoint\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a mountpoint\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -113,7 +113,7 @@", "             data.preexist = True", "         elif data.preexist:", "             data.format = False", "-        if (len(extra) == 0):", "+        if (len(extra) > 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a mountpoint')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}"]]]}, "49": {"op-name": "replace_Eq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 3, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 220, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -118,7 +118,7 @@", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if ((len(extra) == 1) and (not data.subvol)):", "+        if ((len(extra) in 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "         elif (len(extra) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))"]]]}, "42": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 2, "line_number": 220}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 221, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a list of partitions\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs must be given a list of partitions\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -118,7 +118,7 @@", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'btrfs', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if ((len(extra) == 1) and (not data.subvol)):", "+        if ((len(extra) == 2) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "         elif (len(extra) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))"]]]}, "30": {"op-name": "replace_In_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.btrfs\", line 126, in level_cb\nTypeError: unorderable types: str() <= dict()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\nargparse.ArgumentError: argument --data: invalid level_cb value: 'raid0'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 203, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nargument --data: invalid level_cb value: 'raid0'\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nargument --data: invalid level_cb value: 'raid0'\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -89,7 +89,7 @@", "     def _getParser(self):", " ", "         def level_cb(value):", "-            if (value.lower() in self.levelMap):", "+            if (value.lower() <= self.levelMap):", "                 return self.levelMap[value.lower()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid btrfs level: %s') % value)))"]]]}, "23": {"op-name": "replace_In_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.btrfs\", line 126, in level_cb\nTypeError: unorderable types: str() >= dict()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\nargparse.ArgumentError: argument --data: invalid level_cb value: 'raid0'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 203, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nargument --data: invalid level_cb value: 'raid0'\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nargument --data: invalid level_cb value: 'raid0'\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -89,7 +89,7 @@", "     def _getParser(self):", " ", "         def level_cb(value):", "-            if (value.lower() in self.levelMap):", "+            if (value.lower() >= self.levelMap):", "                 return self.levelMap[value.lower()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid btrfs level: %s') % value)))"]]]}, "24": {"op-name": "replace_In_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_In_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 232, in parse\nTypeError: unorderable types: F17_BTRFSData() >= list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: F17_BTRFSData() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -126,7 +126,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))", "         data.mountpoint = extra[0]", "         data.devices = extra[1:]", "-        if (data in self.dataList()):", "+        if (data >= self.dataList()):", "             warnings.warn((_('A btrfs volume with the mountpoint %s has already been defined.') % data.label))", "         return data", " "]]]}, "15": {"op-name": "replace_Eq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.btrfs", "replace_Eq_with_Gt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/btrfs.py"], "module-name": "pykickstart.commands.btrfs", "result-type": "normal", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 4, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.btrfs\", line 223, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs subvol requires specification of parent volume\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/btrfs.py\", line 38, in runTest\n    self.assert_parse(\"%s --data=%s %s\" % (pre, data, post))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nbtrfs subvol requires specification of parent volume\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/btrfs.py", "@@ -120,7 +120,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if ((len(extra) == 1) and (not data.subvol)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs must be given a list of partitions')))", "-        elif (len(extra) == 1):", "+        elif (len(extra) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvol requires specification of parent volume')))", "         if (data.subvol and (not data.name)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('btrfs subvolume requires a name')))"]]]}}}