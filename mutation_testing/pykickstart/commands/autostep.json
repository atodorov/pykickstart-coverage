{"_default": {}, "work-items": {"1": {"command": ["cosmic-ray", "worker", "pykickstart.commands.autostep", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autostep.py"], "op-name": "boolean_replacer", "result-data": [{"occurrence": 0, "line_number": 32, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autostep.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autostep.py", "@@ -10,7 +10,7 @@", "     def __init__(self, writePriority=0, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "-        self.autostep = kwargs.get('autostep', False)", "+        self.autostep = kwargs.get('autostep', True)", "         self.autoscreenshot = kwargs.get('autoscreenshot', False)", " ", "     def __str__(self):"]]], "result-type": "normal", "occurrence": 0, "module-name": "pykickstart.commands.autostep"}, "4": {"command": ["cosmic-ray", "worker", "pykickstart.commands.autostep", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autostep.py"], "op-name": "boolean_replacer", "result-data": [{"occurrence": 3, "line_number": 65, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autostep.py\", line 28, in runTest\n    self.assert_parse(\"autostep\", \"autostep\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'autostep\\n'\n+ autostep\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autostep.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autostep.py", "@@ -30,6 +30,6 @@", "     def parse(self, args):", "         ns = self.op.parse_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        self.autostep = True", "+        self.autostep = False", "         return self", " "]]], "result-type": "normal", "occurrence": 3, "module-name": "pykickstart.commands.autostep"}, "5": {"command": ["cosmic-ray", "worker", "pykickstart.commands.autostep", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autostep.py"], "op-name": "number_replacer", "result-data": [{"occurrence": 0, "line_number": 28, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autostep.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autostep.py", "@@ -7,7 +7,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.autostep = kwargs.get('autostep', False)"]]], "result-type": "normal", "occurrence": 0, "module-name": "pykickstart.commands.autostep"}, "2": {"command": ["cosmic-ray", "worker", "pykickstart.commands.autostep", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autostep.py"], "op-name": "boolean_replacer", "result-data": [{"occurrence": 1, "line_number": 33, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autostep.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autostep.py", "@@ -11,7 +11,7 @@", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.autostep = kwargs.get('autostep', False)", "-        self.autoscreenshot = kwargs.get('autoscreenshot', False)", "+        self.autoscreenshot = kwargs.get('autoscreenshot', True)", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)"]]], "result-type": "normal", "occurrence": 1, "module-name": "pykickstart.commands.autostep"}, "3": {"command": ["cosmic-ray", "worker", "pykickstart.commands.autostep", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autostep.py"], "op-name": "boolean_replacer", "result-data": [{"occurrence": 2, "line_number": 54, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/autostep.py\", line 28, in runTest\n    self.assert_parse(\"autostep\", \"autostep\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'autostep --autoscreenshot\\n' != 'autostep\\n'\n- autostep --autoscreenshot\n+ autostep\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/autostep.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/autostep.py", "@@ -24,7 +24,7 @@", " ", "     def _getParser(self):", "         op = KSOptionParser(prog='autostep', description='\\n                            Kickstart installs normally skip unnecessary screens.\\n                            This makes the installer step through every screen,\\n                            displaying each briefly.\\n\\n                            This is mostly used for debugging.', version=FC3)", "-        op.add_argument('--autoscreenshot', action='store_true', default=False, version=FC3, help='\\n                        Take a screenshot at every step during installation and\\n                        copy the images over to /root/anaconda-screenshots after\\n                        installation is complete. This is most useful for\\n                        documentation.')", "+        op.add_argument('--autoscreenshot', action='store_true', default=True, version=FC3, help='\\n                        Take a screenshot at every step during installation and\\n                        copy the images over to /root/anaconda-screenshots after\\n                        installation is complete. This is most useful for\\n                        documentation.')", "         return op", " ", "     def parse(self, args):"]]], "result-type": "normal", "occurrence": 2, "module-name": "pykickstart.commands.autostep"}}, "work-parameters": {"1": {"timeout": 3.77392, "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/autostep.py"], "test-runner": "nose"}}}