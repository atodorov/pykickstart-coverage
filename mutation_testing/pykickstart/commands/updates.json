{"work-parameters": {"1": {"test-runner": "nose", "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "timeout": 4.45164}}, "_default": {}, "work-items": {"13": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -34,7 +34,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        elif (len(_ns.updates) == 0):", "+        elif (len(_ns.updates) is 0):", "             self.url = 'floppy'", "         else:", "             self.url = _ns.updates[0]"]]], "result-type": "normal"}, "34": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "number_replacer", "module-name": "pykickstart.commands.updates", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 2, "line_number": 65}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 14, in runTest\n    self.assert_parse_error(\"updates --bogus-option\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -31,7 +31,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.updates) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) > 1):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         elif (len(_ns.updates) == 0):"]]], "result-type": "normal"}, "33": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "number_replacer", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"line_number": 63, "occurrence": 1, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 13, in runTest\n    self.assert_parse_error(\"updates cheese crackers\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -29,7 +29,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.updates) > 1):", "+        if (len(_ns.updates) > 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}"]]], "result-type": "normal"}, "19": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 71, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -34,7 +34,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        elif (len(_ns.updates) == 0):", "+        elif (len(_ns.updates) != 0):", "             self.url = 'floppy'", "         else:", "             self.url = _ns.updates[0]"]]], "result-type": "normal"}, "18": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_NotEq", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'updates floppy\\n' != 'updates\\n'\n- updates floppy\n+ updates\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.url == 'floppy'):", "+        if (self.url != 'floppy'):", "             retval += 'updates\\n'", "         elif (self.url != ''):", "             retval += ('updates %s\\n' % self.url)"]]], "result-type": "normal"}, "22": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_LtE", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 67, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to updates command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -31,7 +31,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.updates) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) <= 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         elif (len(_ns.updates) == 0):"]]], "result-type": "normal"}, "17": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_GtE", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 67, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to updates command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -31,7 +31,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.updates) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) >= 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         elif (len(_ns.updates) == 0):"]]], "result-type": "normal"}, "1": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.url == 'floppy'):", "+        if (self.url >= 'floppy'):", "             retval += 'updates\\n'", "         elif (self.url != ''):", "             retval += ('updates %s\\n' % self.url)"]]], "result-type": "normal"}, "20": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_NotEq_with_LtE", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 10, in runTest\n    self.assert_parse(\"updates deliciouscheeses\", \"updates deliciouscheeses\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'updates deliciouscheeses\\n'\n+ updates deliciouscheeses\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -18,7 +18,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.url == 'floppy'):", "             retval += 'updates\\n'", "-        elif (self.url != ''):", "+        elif (self.url <= ''):", "             retval += ('updates %s\\n' % self.url)", "         return retval", " "]]], "result-type": "normal"}, "15": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 71, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -34,7 +34,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        elif (len(_ns.updates) == 0):", "+        elif (len(_ns.updates) is not 0):", "             self.url = 'floppy'", "         else:", "             self.url = _ns.updates[0]"]]], "result-type": "normal"}, "40": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_Eq", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 67, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to updates command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -31,7 +31,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.updates) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) == 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         elif (len(_ns.updates) == 0):"]]], "result-type": "normal"}, "10": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'updates floppy\\n' != 'updates\\n'\n- updates floppy\n+ updates\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.url == 'floppy'):", "+        if (self.url > 'floppy'):", "             retval += 'updates\\n'", "         elif (self.url != ''):", "             retval += ('updates %s\\n' % self.url)"]]], "result-type": "normal"}, "35": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "number_replacer", "module-name": "pykickstart.commands.updates", "occurrence": 3, "result-data": [{"line_number": 68, "occurrence": 3, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 71, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -34,7 +34,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        elif (len(_ns.updates) == 0):", "+        elif (len(_ns.updates) == 1):", "             self.url = 'floppy'", "         else:", "             self.url = _ns.updates[0]"]]], "result-type": "normal"}, "2": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_GtE", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 10, in runTest\n    self.assert_parse(\"updates deliciouscheeses\", \"updates deliciouscheeses\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'updates\\n' != 'updates deliciouscheeses\\n'\n- updates\n+ updates deliciouscheeses\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -34,7 +34,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        elif (len(_ns.updates) == 0):", "+        elif (len(_ns.updates) >= 0):", "             self.url = 'floppy'", "         else:", "             self.url = _ns.updates[0]"]]], "result-type": "normal"}, "3": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 10, in runTest\n    self.assert_parse(\"updates deliciouscheeses\", \"updates deliciouscheeses\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'updates\\n' != 'updates deliciouscheeses\\n'\n- updates\n+ updates deliciouscheeses\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.url == 'floppy'):", "+        if (self.url <= 'floppy'):", "             retval += 'updates\\n'", "         elif (self.url != ''):", "             retval += ('updates %s\\n' % self.url)"]]], "result-type": "normal"}, "44": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 71, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -34,7 +34,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        elif (len(_ns.updates) == 0):", "+        elif (len(_ns.updates) < 0):", "             self.url = 'floppy'", "         else:", "             self.url = _ns.updates[0]"]]], "result-type": "normal"}, "29": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.url == 'floppy'):", "+        if (self.url in 'floppy'):", "             retval += 'updates\\n'", "         elif (self.url != ''):", "             retval += ('updates %s\\n' % self.url)"]]], "result-type": "normal"}, "31": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_NotEq_with_Is", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 10, in runTest\n    self.assert_parse(\"updates deliciouscheeses\", \"updates deliciouscheeses\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'updates deliciouscheeses\\n'\n+ updates deliciouscheeses\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -18,7 +18,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.url == 'floppy'):", "             retval += 'updates\\n'", "-        elif (self.url != ''):", "+        elif (self.url is ''):", "             retval += ('updates %s\\n' % self.url)", "         return retval", " "]]], "result-type": "normal"}, "36": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "number_replacer", "module-name": "pykickstart.commands.updates", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 4, "line_number": 71}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 10, in runTest\n    self.assert_parse(\"updates deliciouscheeses\", \"updates deliciouscheeses\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 71, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -37,6 +37,6 @@", "         elif (len(_ns.updates) == 0):", "             self.url = 'floppy'", "         else:", "-            self.url = _ns.updates[0]", "+            self.url = _ns.updates[1]", "         return self", " "]]], "result-type": "normal"}, "23": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_NotEq", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 64, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command updates only takes one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -29,7 +29,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.updates) > 1):", "+        if (len(_ns.updates) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}"]]], "result-type": "normal"}, "9": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_NotEq_with_Eq", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 10, in runTest\n    self.assert_parse(\"updates deliciouscheeses\", \"updates deliciouscheeses\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'updates deliciouscheeses\\n'\n+ updates deliciouscheeses\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -18,7 +18,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.url == 'floppy'):", "             retval += 'updates\\n'", "-        elif (self.url != ''):", "+        elif (self.url == ''):", "             retval += ('updates %s\\n' % self.url)", "         return retval", " "]]], "result-type": "normal"}, "5": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_NotEq_with_NotIn", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -18,7 +18,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.url == 'floppy'):", "             retval += 'updates\\n'", "-        elif (self.url != ''):", "+        elif (self.url not in ''):", "             retval += ('updates %s\\n' % self.url)", "         return retval", " "]]], "result-type": "normal"}, "37": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_Lt", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 64, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command updates only takes one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -29,7 +29,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.updates) > 1):", "+        if (len(_ns.updates) < 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}"]]], "result-type": "normal"}, "41": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_NotIn", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 63, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -29,7 +29,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.updates) > 1):", "+        if (len(_ns.updates) not in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}"]]], "result-type": "normal"}, "39": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_Eq", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 10, in runTest\n    self.assert_parse(\"updates deliciouscheeses\", \"updates deliciouscheeses\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 64, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command updates only takes one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -29,7 +29,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.updates) > 1):", "+        if (len(_ns.updates) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}"]]], "result-type": "normal"}, "38": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_Lt", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 14, in runTest\n    self.assert_parse_error(\"updates --bogus-option\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -31,7 +31,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.updates) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) < 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         elif (len(_ns.updates) == 0):"]]], "result-type": "normal"}, "45": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_IsNot", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 64, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command updates only takes one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -29,7 +29,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.updates) > 1):", "+        if (len(_ns.updates) is not 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}"]]], "result-type": "normal"}, "48": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_In", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 63, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -29,7 +29,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.updates) > 1):", "+        if (len(_ns.updates) in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}"]]], "result-type": "normal"}, "30": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_In", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 68, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -34,7 +34,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        elif (len(_ns.updates) == 0):", "+        elif (len(_ns.updates) in 0):", "             self.url = 'floppy'", "         else:", "             self.url = _ns.updates[0]"]]], "result-type": "normal"}, "6": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_NotEq_with_GtE", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -18,7 +18,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.url == 'floppy'):", "             retval += 'updates\\n'", "-        elif (self.url != ''):", "+        elif (self.url >= ''):", "             retval += ('updates %s\\n' % self.url)", "         return retval", " "]]], "result-type": "normal"}, "49": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_In", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 65, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -31,7 +31,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.updates) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) in 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         elif (len(_ns.updates) == 0):"]]], "result-type": "normal"}, "27": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'updates floppy\\n' != 'updates\\n'\n- updates floppy\n+ updates\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.url == 'floppy'):", "+        if (self.url not in 'floppy'):", "             retval += 'updates\\n'", "         elif (self.url != ''):", "             retval += ('updates %s\\n' % self.url)"]]], "result-type": "normal"}, "28": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_NotIn", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 68, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -34,7 +34,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        elif (len(_ns.updates) == 0):", "+        elif (len(_ns.updates) not in 0):", "             self.url = 'floppy'", "         else:", "             self.url = _ns.updates[0]"]]], "result-type": "normal"}, "47": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_NotEq_with_Lt", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 10, in runTest\n    self.assert_parse(\"updates deliciouscheeses\", \"updates deliciouscheeses\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'updates deliciouscheeses\\n'\n+ updates deliciouscheeses\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -18,7 +18,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.url == 'floppy'):", "             retval += 'updates\\n'", "-        elif (self.url != ''):", "+        elif (self.url < ''):", "             retval += ('updates %s\\n' % self.url)", "         return retval", " "]]], "result-type": "normal"}, "32": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "number_replacer", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 0, "line_number": 31}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -9,7 +9,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.url = kwargs.get('url', '')"]]], "result-type": "normal"}, "24": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_NotEq", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -31,7 +31,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.updates) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) != 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         elif (len(_ns.updates) == 0):"]]], "result-type": "normal"}, "14": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_IsNot", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'updates floppy\\n' != 'updates\\n'\n- updates floppy\n+ updates\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.url == 'floppy'):", "+        if (self.url is not 'floppy'):", "             retval += 'updates\\n'", "         elif (self.url != ''):", "             retval += ('updates %s\\n' % self.url)"]]], "result-type": "normal"}, "4": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_LtE", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -34,7 +34,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        elif (len(_ns.updates) == 0):", "+        elif (len(_ns.updates) <= 0):", "             self.url = 'floppy'", "         else:", "             self.url = _ns.updates[0]"]]], "result-type": "normal"}, "42": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_NotIn", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 65, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -31,7 +31,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.updates) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) not in 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         elif (len(_ns.updates) == 0):"]]], "result-type": "normal"}, "25": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_NotEq_with_Gt", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -18,7 +18,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.url == 'floppy'):", "             retval += 'updates\\n'", "-        elif (self.url != ''):", "+        elif (self.url > ''):", "             retval += ('updates %s\\n' % self.url)", "         return retval", " "]]], "result-type": "normal"}, "8": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_Is", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 67, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to updates command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -31,7 +31,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.updates) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         elif (len(_ns.updates) == 0):"]]], "result-type": "normal"}, "16": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_GtE", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 10, in runTest\n    self.assert_parse(\"updates deliciouscheeses\", \"updates deliciouscheeses\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 64, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command updates only takes one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -29,7 +29,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.updates) > 1):", "+        if (len(_ns.updates) >= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}"]]], "result-type": "normal"}, "26": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_NotEq_with_In", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 10, in runTest\n    self.assert_parse(\"updates deliciouscheeses\", \"updates deliciouscheeses\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'updates deliciouscheeses\\n'\n+ updates deliciouscheeses\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -18,7 +18,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.url == 'floppy'):", "             retval += 'updates\\n'", "-        elif (self.url != ''):", "+        elif (self.url in ''):", "             retval += ('updates %s\\n' % self.url)", "         return retval", " "]]], "result-type": "normal"}, "11": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_Gt", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 71, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -34,7 +34,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        elif (len(_ns.updates) == 0):", "+        elif (len(_ns.updates) > 0):", "             self.url = 'floppy'", "         else:", "             self.url = _ns.updates[0]"]]], "result-type": "normal"}, "12": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_Is", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.url == 'floppy'):", "+        if (self.url is 'floppy'):", "             retval += 'updates\\n'", "         elif (self.url != ''):", "             retval += ('updates %s\\n' % self.url)"]]], "result-type": "normal"}, "43": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Eq_with_Lt", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'updates floppy\\n' != 'updates\\n'\n- updates floppy\n+ updates\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.url == 'floppy'):", "+        if (self.url < 'floppy'):", "             retval += 'updates\\n'", "         elif (self.url != ''):", "             retval += ('updates %s\\n' % self.url)"]]], "result-type": "normal"}, "21": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_LtE", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 9, in runTest\n    self.assert_parse(\"updates\", \"updates\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 64, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command updates only takes one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -29,7 +29,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.updates) > 1):", "+        if (len(_ns.updates) <= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}"]]], "result-type": "normal"}, "46": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_IsNot", "module-name": "pykickstart.commands.updates", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -31,7 +31,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.updates) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is not 0):", "             mapping = {'command': 'updates', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         elif (len(_ns.updates) == 0):"]]], "result-type": "normal"}, "7": {"command": ["cosmic-ray", "worker", "pykickstart.commands.updates", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/updates.py"], "op-name": "replace_Gt_with_Is", "module-name": "pykickstart.commands.updates", "occurrence": 0, "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/updates.py\", line 10, in runTest\n    self.assert_parse(\"updates deliciouscheeses\", \"updates deliciouscheeses\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.updates\", line 64, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command updates only takes one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/updates.py", "@@ -29,7 +29,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.updates) > 1):", "+        if (len(_ns.updates) is 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s only takes one argument') % 'updates')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'updates', 'options': extra}"]]], "result-type": "normal"}}}