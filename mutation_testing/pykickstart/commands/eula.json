{"_default": {}, "work-parameters": {"1": {"timeout": 5.16594, "test-runner": "nose", "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/eula.py"]}}, "work-items": {"3": {"command": ["cosmic-ray", "worker", "pykickstart.commands.eula", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/eula.py"], "op-name": "boolean_replacer", "result-data": [{"line_number": 33, "occurrence": 0, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "@@ -11,7 +11,7 @@", "     def __init__(self, *args, **kwargs):", "         KickstartCommand.__init__(self, *args, **kwargs)", "         self.op = self._getParser()", "-        self.agreed = kwargs.get('agreed', False)", "+        self.agreed = kwargs.get('agreed', True)", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)"]]], "module-name": "pykickstart.commands.eula", "result-type": "normal", "occurrence": 0}, "1": {"command": ["cosmic-ray", "worker", "pykickstart.commands.eula", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/eula.py"], "op-name": "replace_NotEq_with_Eq", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/eula.py\", line 29, in runTest\n    self.assert_parse(\"eula --agreed\", \"eula --agreed\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.eula\", line 65, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command eula does not take any arguments\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(extra) != 0):", "+        if (len(extra) == 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'eula')))", "         if (not self.agreed):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Kickstart command eula expects the --agreed option')))"]]], "module-name": "pykickstart.commands.eula", "result-type": "normal", "occurrence": 0}, "8": {"command": ["cosmic-ray", "worker", "pykickstart.commands.eula", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/eula.py"], "op-name": "replace_NotEq_with_Is", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/eula.py\", line 29, in runTest\n    self.assert_parse(\"eula --agreed\", \"eula --agreed\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.eula\", line 65, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command eula does not take any arguments\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(extra) != 0):", "+        if (len(extra) is 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'eula')))", "         if (not self.agreed):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Kickstart command eula expects the --agreed option')))"]]], "module-name": "pykickstart.commands.eula", "result-type": "normal", "occurrence": 0}, "2": {"command": ["cosmic-ray", "worker", "pykickstart.commands.eula", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/eula.py"], "op-name": "replace_NotEq_with_In", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/eula.py\", line 29, in runTest\n    self.assert_parse(\"eula --agreed\", \"eula --agreed\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.eula\", line 64, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(extra) != 0):", "+        if (len(extra) in 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'eula')))", "         if (not self.agreed):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Kickstart command eula expects the --agreed option')))"]]], "module-name": "pykickstart.commands.eula", "result-type": "normal", "occurrence": 0}, "11": {"command": ["cosmic-ray", "worker", "pykickstart.commands.eula", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/eula.py"], "op-name": "number_replacer", "result-data": [{"line_number": 64, "occurrence": 0, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/eula.py\", line 29, in runTest\n    self.assert_parse(\"eula --agreed\", \"eula --agreed\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.eula\", line 65, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command eula does not take any arguments\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(extra) != 0):", "+        if (len(extra) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'eula')))", "         if (not self.agreed):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Kickstart command eula expects the --agreed option')))"]]], "module-name": "pykickstart.commands.eula", "result-type": "normal", "occurrence": 0}, "5": {"command": ["cosmic-ray", "worker", "pykickstart.commands.eula", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/eula.py"], "op-name": "replace_NotEq_with_Lt", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(extra) != 0):", "+        if (len(extra) < 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'eula')))", "         if (not self.agreed):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Kickstart command eula expects the --agreed option')))"]]], "module-name": "pykickstart.commands.eula", "result-type": "normal", "occurrence": 0}, "10": {"command": ["cosmic-ray", "worker", "pykickstart.commands.eula", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/eula.py"], "op-name": "replace_NotEq_with_GtE", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/eula.py\", line 29, in runTest\n    self.assert_parse(\"eula --agreed\", \"eula --agreed\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.eula\", line 65, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command eula does not take any arguments\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(extra) != 0):", "+        if (len(extra) >= 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'eula')))", "         if (not self.agreed):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Kickstart command eula expects the --agreed option')))"]]], "module-name": "pykickstart.commands.eula", "result-type": "normal", "occurrence": 0}, "6": {"command": ["cosmic-ray", "worker", "pykickstart.commands.eula", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/eula.py"], "op-name": "replace_NotEq_with_NotIn", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/eula.py\", line 29, in runTest\n    self.assert_parse(\"eula --agreed\", \"eula --agreed\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.eula\", line 64, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(extra) != 0):", "+        if (len(extra) not in 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'eula')))", "         if (not self.agreed):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Kickstart command eula expects the --agreed option')))"]]], "module-name": "pykickstart.commands.eula", "result-type": "normal", "occurrence": 0}, "9": {"command": ["cosmic-ray", "worker", "pykickstart.commands.eula", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/eula.py"], "op-name": "replace_NotEq_with_LtE", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/eula.py\", line 29, in runTest\n    self.assert_parse(\"eula --agreed\", \"eula --agreed\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.eula\", line 65, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command eula does not take any arguments\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(extra) != 0):", "+        if (len(extra) <= 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'eula')))", "         if (not self.agreed):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Kickstart command eula expects the --agreed option')))"]]], "module-name": "pykickstart.commands.eula", "result-type": "normal", "occurrence": 0}, "4": {"command": ["cosmic-ray", "worker", "pykickstart.commands.eula", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/eula.py"], "op-name": "boolean_replacer", "result-data": [{"line_number": 55, "occurrence": 1, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/eula.py\", line 35, in runTest\n    self.assert_parse_error(\"eula\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "@@ -28,7 +28,7 @@", " ", "     def _getParser(self):", "         op = KSOptionParser(prog='eula', version=F20, description=\"\\n                            Automatically accept Red Hat's EULA\")", "-        op.add_argument('--agreed', '--agree', '--accepted', '--accept', dest='agreed', action='store_true', default=False, version=F20, help='Accept the EULA. This is mandatory option!')", "+        op.add_argument('--agreed', '--agree', '--accepted', '--accept', dest='agreed', action='store_true', default=True, version=F20, help='Accept the EULA. This is mandatory option!')", "         return op", " ", "     def parse(self, args):"]]], "module-name": "pykickstart.commands.eula", "result-type": "normal", "occurrence": 1}, "7": {"command": ["cosmic-ray", "worker", "pykickstart.commands.eula", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/eula.py"], "op-name": "replace_NotEq_with_Gt", "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/eula.py", "@@ -34,7 +34,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if (len(extra) != 0):", "+        if (len(extra) > 0):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s does not take any arguments') % 'eula')))", "         if (not self.agreed):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Kickstart command eula expects the --agreed option')))"]]], "module-name": "pykickstart.commands.eula", "result-type": "normal", "occurrence": 0}}}