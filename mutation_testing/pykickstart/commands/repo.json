{"work-items": {"32": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_GtE", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: A repo with the name repoB has already been defined.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 77, in runTest\n    repo --name=repoB --baseurl=http://www.domain.com\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nrepo --name=repoA --baseurl=http://www.domain.com\nrepo --name=repoB --baseurl=http://www.domain.com: A repo with the name repoB has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -21,7 +21,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.name == y.name)", "+        return (self.name >= y.name)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "24": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_Lt", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 38, in runTest\n    self.assertEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), self.assert_parse(\"repo --name=left --baseurl=http://wherever\"))\nAssertionError: <pykickstart.commands.repo.F11_RepoData object at 0x7f16bda994e0> != <pykickstart.commands.repo.F11_RepoData object at 0x7f16bdb5ffd0>\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -21,7 +21,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.name == y.name)", "+        return (self.name < y.name)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "16": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_Is", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -231,7 +231,7 @@", "         op = F14_Repo._getParser(self)", "         for action in op._actions:", "             for option in ['--baseurl', '--mirrorlist']:", "-                if (option in action.option_strings):", "+                if (option is action.option_strings):", "                     action.help += dedent(('\\n\\n                    .. versionchanged:: %s\\n\\n                    ``--mirrorlist`` and ``--baseurl`` are not required anymore!\\n                    ' % versionToLongString(F15)))", "         return op", " "]]]}, "13": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_IsNot", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 33, in runTest\n    \"repo --name=\\\"blah\\\" --baseurl=http://www.domain.com\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.repo\", line 245, in parse\nUserWarning: A repo with the name blah has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -156,7 +156,7 @@", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)", "         rd.lineno = self.lineno", "-        if (rd in self.dataList()):", "+        if (rd is not self.dataList()):", "             warnings.warn((_('A repo with the name %s has already been defined.') % rd.name))", "         return rd", " "]]]}, "4": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "boolean_replacer", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "line_number": 123}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 146, in runTest\n    F13_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 132, in runTest\n    F11_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 67, in runTest\n    self.assertEqual(data._getArgsAsStr(), \"\")\nAssertionError: ' --noverifyssl' != ''\n-  --noverifyssl\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -93,7 +93,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         F13_RepoData.__init__(self, *args, **kwargs)", "-        self.noverifyssl = kwargs.get('noverifyssl', False)", "+        self.noverifyssl = kwargs.get('noverifyssl', True)", " ", "     def _getArgsAsStr(self):", "         retval = F13_RepoData._getArgsAsStr(self)"]]]}, "1": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_GtE", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 33, in runTest\n    \"repo --name=\\\"blah\\\" --baseurl=http://www.domain.com\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.repo\", line 244, in parse\nTypeError: unorderable types: F11_RepoData() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -156,7 +156,7 @@", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)", "         rd.lineno = self.lineno", "-        if (rd in self.dataList()):", "+        if (rd >= self.dataList()):", "             warnings.warn((_('A repo with the name %s has already been defined.') % rd.name))", "         return rd", " "]]]}, "40": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_LtE", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 41, in runTest\n    self.assertNotEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), self.assert_parse(\"repo --name=right --baseurl=http://wherever\"))\nAssertionError: <pykickstart.commands.repo.F11_RepoData object at 0x7fe5feca2898> == <pykickstart.commands.repo.F11_RepoData object at 0x7fe5fec8d048>\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -21,7 +21,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.name == y.name)", "+        return (self.name <= y.name)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "26": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_NotIn", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 38, in runTest\n    self.assertEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), self.assert_parse(\"repo --name=left --baseurl=http://wherever\"))\nAssertionError: <pykickstart.commands.repo.F11_RepoData object at 0x7f4fd7de8c18> != <pykickstart.commands.repo.F11_RepoData object at 0x7f4fd7d8fd30>\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -21,7 +21,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.name == y.name)", "+        return (self.name not in y.name)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "23": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_Gt", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 40, in runTest\n    self.assertNotEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), None)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 864, in assertNotEqual\n    if not first != second:\n  File \"pykickstart.commands.repo\", line 47, in __ne__\nTypeError: unorderable types: F11_RepoData() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -24,7 +24,7 @@", "         return (self.name == y.name)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self > y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "43": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_Eq", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -231,7 +231,7 @@", "         op = F14_Repo._getParser(self)", "         for action in op._actions:", "             for option in ['--baseurl', '--mirrorlist']:", "-                if (option in action.option_strings):", "+                if (option == action.option_strings):", "                     action.help += dedent(('\\n\\n                    .. versionchanged:: %s\\n\\n                    ``--mirrorlist`` and ``--baseurl`` are not required anymore!\\n                    ' % versionToLongString(F15)))", "         return op", " "]]]}, "5": {"occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "boolean_replacer", "result-data": [{"occurrence": 2, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "line_number": 145}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 159, in runTest\n    F15_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 155, in runTest\n    F14_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 146, in runTest\n    F13_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 132, in runTest\n    F11_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 67, in runTest\n    self.assertEqual(data._getArgsAsStr(), \"\")\nAssertionError: ' --install' != ''\n-  --install\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -113,7 +113,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         F15_RepoData.__init__(self, *args, **kwargs)", "-        self.install = kwargs.get('install', False)", "+        self.install = kwargs.get('install', True)", " ", "     def _getArgsAsStr(self):", "         retval = F15_RepoData._getArgsAsStr(self)"]]]}, "37": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_NotEq", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -231,7 +231,7 @@", "         op = F14_Repo._getParser(self)", "         for action in op._actions:", "             for option in ['--baseurl', '--mirrorlist']:", "-                if (option in action.option_strings):", "+                if (option != action.option_strings):", "                     action.help += dedent(('\\n\\n                    .. versionchanged:: %s\\n\\n                    ``--mirrorlist`` and ``--baseurl`` are not required anymore!\\n                    ' % versionToLongString(F15)))", "         return op", " "]]]}, "3": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "boolean_replacer", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "line_number": 42}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 40, in runTest\n    self.assertNotEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), None)\nAssertionError: <pykickstart.commands.repo.F11_RepoData object at 0x7f84af27cdd8> == None\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -20,7 +20,7 @@", " ", "     def __eq__(self, y):", "         if (not y):", "-            return False", "+            return True", "         return (self.name == y.name)", " ", "     def __ne__(self, y):"]]]}, "27": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_NotIn", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 40, in runTest\n    self.assertNotEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), None)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 864, in assertNotEqual\n    if not first != second:\n  File \"pykickstart.commands.repo\", line 47, in __ne__\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -24,7 +24,7 @@", "         return (self.name == y.name)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self not in y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "14": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_IsNot", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -231,7 +231,7 @@", "         op = F14_Repo._getParser(self)", "         for action in op._actions:", "             for option in ['--baseurl', '--mirrorlist']:", "-                if (option in action.option_strings):", "+                if (option is not action.option_strings):", "                     action.help += dedent(('\\n\\n                    .. versionchanged:: %s\\n\\n                    ``--mirrorlist`` and ``--baseurl`` are not required anymore!\\n                    ' % versionToLongString(F15)))", "         return op", " "]]]}, "30": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_LtE", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 33, in runTest\n    \"repo --name=\\\"blah\\\" --baseurl=http://www.domain.com\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.repo\", line 244, in parse\nTypeError: unorderable types: F11_RepoData() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -156,7 +156,7 @@", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)", "         rd.lineno = self.lineno", "-        if (rd in self.dataList()):", "+        if (rd <= self.dataList()):", "             warnings.warn((_('A repo with the name %s has already been defined.') % rd.name))", "         return rd", " "]]]}, "44": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_In", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -21,7 +21,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.name == y.name)", "+        return (self.name in y.name)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "25": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_Lt", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 40, in runTest\n    self.assertNotEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), None)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 864, in assertNotEqual\n    if not first != second:\n  File \"pykickstart.commands.repo\", line 47, in __ne__\nTypeError: unorderable types: F11_RepoData() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -24,7 +24,7 @@", "         return (self.name == y.name)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self < y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "33": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_GtE", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 40, in runTest\n    self.assertNotEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), None)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 864, in assertNotEqual\n    if not first != second:\n  File \"pykickstart.commands.repo\", line 47, in __ne__\nTypeError: unorderable types: F11_RepoData() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -24,7 +24,7 @@", "         return (self.name == y.name)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self >= y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "31": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_LtE", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 155, in runTest\n    F14_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 146, in runTest\n    F13_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 132, in runTest\n    F11_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 33, in runTest\n    \"repo --name=\\\"blah\\\" --baseurl=http://www.domain.com\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 161, in assert_parse\n    parser = self.getParser(inputStr)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.repo\", line 166, in __init__\n  File \"pykickstart.commands.repo\", line 355, in _getParser\nTypeError: unorderable types: str() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -231,7 +231,7 @@", "         op = F14_Repo._getParser(self)", "         for action in op._actions:", "             for option in ['--baseurl', '--mirrorlist']:", "-                if (option in action.option_strings):", "+                if (option <= action.option_strings):", "                     action.help += dedent(('\\n\\n                    .. versionchanged:: %s\\n\\n                    ``--mirrorlist`` and ``--baseurl`` are not required anymore!\\n                    ' % versionToLongString(F15)))", "         return op", " "]]]}, "35": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_Is", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -24,7 +24,7 @@", "         return (self.name == y.name)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "2": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_GtE", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 155, in runTest\n    F14_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 146, in runTest\n    F13_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 132, in runTest\n    F11_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 33, in runTest\n    \"repo --name=\\\"blah\\\" --baseurl=http://www.domain.com\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 161, in assert_parse\n    parser = self.getParser(inputStr)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.repo\", line 166, in __init__\n  File \"pykickstart.commands.repo\", line 355, in _getParser\nTypeError: unorderable types: str() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -231,7 +231,7 @@", "         op = F14_Repo._getParser(self)", "         for action in op._actions:", "             for option in ['--baseurl', '--mirrorlist']:", "-                if (option in action.option_strings):", "+                if (option >= action.option_strings):", "                     action.help += dedent(('\\n\\n                    .. versionchanged:: %s\\n\\n                    ``--mirrorlist`` and ``--baseurl`` are not required anymore!\\n                    ' % versionToLongString(F15)))", "         return op", " "]]]}, "17": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_IsNot", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 41, in runTest\n    self.assertNotEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), self.assert_parse(\"repo --name=right --baseurl=http://wherever\"))\nAssertionError: <pykickstart.commands.repo.F11_RepoData object at 0x7fcff0348748> == <pykickstart.commands.repo.F11_RepoData object at 0x7fcff03afc18>\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -21,7 +21,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.name == y.name)", "+        return (self.name is not y.name)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "6": {"occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "boolean_replacer", "result-data": [{"occurrence": 3, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "line_number": 162}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 49, in runTest\n    self.assert_parse_error(\"repo --name=blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -127,7 +127,7 @@", " class FC6_Repo(KickstartCommand):", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", "-    urlRequired = True", "+    urlRequired = False", " ", "     def __init__(self, writePriority=0, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)"]]]}, "20": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_NotEq", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 40, in runTest\n    self.assertNotEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), None)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 864, in assertNotEqual\n    if not first != second:\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\n  File \"pykickstart.commands.repo\", line 47, in __ne__\nRecursionError: maximum recursion depth exceeded\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -24,7 +24,7 @@", "         return (self.name == y.name)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self != y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "12": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_Gt", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 155, in runTest\n    F14_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 146, in runTest\n    F13_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 132, in runTest\n    F11_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 33, in runTest\n    \"repo --name=\\\"blah\\\" --baseurl=http://www.domain.com\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 161, in assert_parse\n    parser = self.getParser(inputStr)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.repo\", line 166, in __init__\n  File \"pykickstart.commands.repo\", line 355, in _getParser\nTypeError: unorderable types: str() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -231,7 +231,7 @@", "         op = F14_Repo._getParser(self)", "         for action in op._actions:", "             for option in ['--baseurl', '--mirrorlist']:", "-                if (option in action.option_strings):", "+                if (option > action.option_strings):", "                     action.help += dedent(('\\n\\n                    .. versionchanged:: %s\\n\\n                    ``--mirrorlist`` and ``--baseurl`` are not required anymore!\\n                    ' % versionToLongString(F15)))", "         return op", " "]]]}, "10": {"occurrence": 7, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "boolean_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "boolean_replacer", "result-data": [{"occurrence": 7, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "line_number": 371}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 159, in runTest\n    F15_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 155, in runTest\n    F14_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 146, in runTest\n    F13_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 132, in runTest\n    F11_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 33, in runTest\n    \"repo --name=\\\"blah\\\" --baseurl=http://www.domain.com\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'repo --name=\"blah\" --baseurl=http://www.domain.com --install\\n' != 'repo --name=\"blah\" --baseurl=http://www.domain.com\\n'\n- repo --name=\"blah\" --baseurl=http://www.domain.com --install\n?                                                   ----------\n+ repo --name=\"blah\" --baseurl=http://www.domain.com\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -241,7 +241,7 @@", " ", "     def _getParser(self):", "         op = F15_Repo._getParser(self)", "-        op.add_argument('--install', action='store_true', version=F21, default=False, help='\\n                        Install this repository to the target system so that it\\n                        can be used after reboot.')", "+        op.add_argument('--install', action='store_true', version=F21, default=True, help='\\n                        Install this repository to the target system so that it\\n                        can be used after reboot.')", "         return op", " ", " class RHEL7_Repo(F21_Repo):"]]]}, "8": {"occurrence": 5, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "boolean_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "boolean_replacer", "result-data": [{"occurrence": 5, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "line_number": 335}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 146, in runTest\n    F13_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 132, in runTest\n    F11_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 33, in runTest\n    \"repo --name=\\\"blah\\\" --baseurl=http://www.domain.com\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'repo --name=\"blah\" --baseurl=http://www.domain.com --noverifyssl\\n' != 'repo --name=\"blah\" --baseurl=http://www.domain.com\\n'\n- repo --name=\"blah\" --baseurl=http://www.domain.com --noverifyssl\n?                                                   --------------\n+ repo --name=\"blah\" --baseurl=http://www.domain.com\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -216,7 +216,7 @@", " ", "     def _getParser(self):", "         op = F13_Repo._getParser(self)", "-        op.add_argument('--noverifyssl', action='store_true', version=F14, default=False, help=\"\\n                        For a https repo do not check the server's certificate\\n                        with what well-known CA validate and do not check the\\n                        server's hostname matches the certificate's domain name.\\n                        \")", "+        op.add_argument('--noverifyssl', action='store_true', version=F14, default=True, help=\"\\n                        For a https repo do not check the server's certificate\\n                        with what well-known CA validate and do not check the\\n                        server's hostname matches the certificate's domain name.\\n                        \")", "         return op", " ", " class RHEL6_Repo(F14_Repo):"]]]}, "11": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_Gt", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 33, in runTest\n    \"repo --name=\\\"blah\\\" --baseurl=http://www.domain.com\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.repo\", line 244, in parse\nTypeError: unorderable types: F11_RepoData() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -156,7 +156,7 @@", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)", "         rd.lineno = self.lineno", "-        if (rd in self.dataList()):", "+        if (rd > self.dataList()):", "             warnings.warn((_('A repo with the name %s has already been defined.') % rd.name))", "         return rd", " "]]]}, "45": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_In", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 40, in runTest\n    self.assertNotEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), None)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 864, in assertNotEqual\n    if not first != second:\n  File \"pykickstart.commands.repo\", line 47, in __ne__\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -24,7 +24,7 @@", "         return (self.name == y.name)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self in y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "41": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_LtE", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 40, in runTest\n    self.assertNotEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), None)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/unittest/case.py\", line 864, in assertNotEqual\n    if not first != second:\n  File \"pykickstart.commands.repo\", line 47, in __ne__\nTypeError: unorderable types: F11_RepoData() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -24,7 +24,7 @@", "         return (self.name == y.name)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self <= y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "29": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_NotIn", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -231,7 +231,7 @@", "         op = F14_Repo._getParser(self)", "         for action in op._actions:", "             for option in ['--baseurl', '--mirrorlist']:", "-                if (option in action.option_strings):", "+                if (option not in action.option_strings):", "                     action.help += dedent(('\\n\\n                    .. versionchanged:: %s\\n\\n                    ``--mirrorlist`` and ``--baseurl`` are not required anymore!\\n                    ' % versionToLongString(F15)))", "         return op", " "]]]}, "38": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_Lt", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 33, in runTest\n    \"repo --name=\\\"blah\\\" --baseurl=http://www.domain.com\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.repo\", line 244, in parse\nTypeError: unorderable types: F11_RepoData() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -156,7 +156,7 @@", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)", "         rd.lineno = self.lineno", "-        if (rd in self.dataList()):", "+        if (rd < self.dataList()):", "             warnings.warn((_('A repo with the name %s has already been defined.') % rd.name))", "         return rd", " "]]]}, "9": {"occurrence": 6, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "boolean_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "boolean_replacer", "result-data": [{"occurrence": 6, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "line_number": 349}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -225,7 +225,7 @@", " class F15_Repo(F14_Repo):", "     removedKeywords = F14_Repo.removedKeywords", "     removedAttrs = F14_Repo.removedAttrs", "-    urlRequired = False", "+    urlRequired = True", " ", "     def _getParser(self):", "         op = F14_Repo._getParser(self)"]]]}, "19": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_NotEq", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 38, in runTest\n    self.assertEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), self.assert_parse(\"repo --name=left --baseurl=http://wherever\"))\nAssertionError: <pykickstart.commands.repo.F11_RepoData object at 0x7f5c16896cf8> != <pykickstart.commands.repo.F11_RepoData object at 0x7f5c16915ac8>\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -21,7 +21,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.name == y.name)", "+        return (self.name != y.name)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "22": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_Gt", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 38, in runTest\n    self.assertEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), self.assert_parse(\"repo --name=left --baseurl=http://wherever\"))\nAssertionError: <pykickstart.commands.repo.F11_RepoData object at 0x7f166a5c69e8> != <pykickstart.commands.repo.F11_RepoData object at 0x7f166a5ba320>\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -21,7 +21,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.name == y.name)", "+        return (self.name > y.name)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "7": {"occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "boolean_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "boolean_replacer", "result-data": [{"occurrence": 4, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "line_number": 198}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 45, in runTest\n    self.assert_parse_error(\"repo --baseurl=www.domain.com\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -142,7 +142,7 @@", " ", "     def _getParser(self):", "         op = KSOptionParser(prog='repo', description='\\n                            Configures additional yum repositories that may be\\n                            used as sources for package installation. Multiple\\n                            repo lines may be specified. By default, anaconda\\n                            has a configured set of repos taken from\\n                            /etc/anaconda.repos.d plus a special Installation\\n                            Repo in the case of a media install. The exact set\\n                            of repos in this directory changes from release to\\n                            release and cannot be listed here. There will\\n                            likely always be a repo named \"updates\".\\n\\n                            Note: If you want to enable one of the repos in\\n                            /etc/anaconda.repos.d that is disabled by default\\n                            (like \"updates\"), you should use --name= but none\\n                            of the other options. anaconda will look for a repo\\n                            by this name automatically. Providing a baseurl or\\n                            mirrorlist URL will result in anaconda attempting\\n                            to add another repo by the same name, which will\\n                            cause a conflicting repo error.', version=FC6)", "-        op.add_argument('--name', required=True, version=FC6, help='\\n                        The repo id. This option is required. If a repo has a\\n                        name that conflicts with a previously added one, the\\n                        new repo will be ignored. Because anaconda has a\\n                        populated list of repos when it starts, this means that\\n                        users cannot create new repos that override these names.\\n                        Please check /etc/anaconda.repos.d from the operating\\n                        system you wish to install to see what names are not\\n                        available.')", "+        op.add_argument('--name', required=False, version=FC6, help='\\n                        The repo id. This option is required. If a repo has a\\n                        name that conflicts with a previously added one, the\\n                        new repo will be ignored. Because anaconda has a\\n                        populated list of repos when it starts, this means that\\n                        users cannot create new repos that override these names.\\n                        Please check /etc/anaconda.repos.d from the operating\\n                        system you wish to install to see what names are not\\n                        available.')", "         op.add_argument('--baseurl', version=FC6, help='\\n                        The URL for the repository. The variables that may be\\n                        used in yum repo config files are not supported here.\\n                        You may use one of either this option or\\n                        ``--mirrorlist``, not both. If an NFS repository is\\n                        specified, it should be of the form\\n                        ``nfs://host:/path/to/repo``. Note that there is a\\n                        colon after the host. Anaconda passes everything after\\n                        \"nfs:// \" directly to the mount command instead of\\n                        parsing URLs according to RFC 2224. Variable\\n                        substitution is done for $releasever and $basearch in\\n                        the url.')", "         op.add_argument('--mirrorlist', version=FC6, help='\\n                        The URL pointing at a list of mirrors for the\\n                        repository. The variables that may be used in yum repo\\n                        config files are not supported here. You may use one of\\n                        either this option or ``--baseurl``, not both. Variable\\n                        substitution is done for $releasever and $basearch in\\n                        the url.')", "         return op"]]]}, "18": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_IsNot", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 40, in runTest\n    self.assertNotEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), None)\nAssertionError: <pykickstart.commands.repo.F11_RepoData object at 0x7f8f1801fef0> == None\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -24,7 +24,7 @@", "         return (self.name == y.name)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is not y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]]}, "34": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_Eq_with_Is", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 38, in runTest\n    self.assertEqual(self.assert_parse(\"repo --name=left --baseurl=http://wherever\"), self.assert_parse(\"repo --name=left --baseurl=http://wherever\"))\nAssertionError: <pykickstart.commands.repo.F11_RepoData object at 0x7f45167c9128> != <pykickstart.commands.repo.F11_RepoData object at 0x7f45168597b8>\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -21,7 +21,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.name == y.name)", "+        return (self.name is y.name)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]]}, "39": {"occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_Lt", "result-data": [{"occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 155, in runTest\n    F14_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 146, in runTest\n    F13_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 132, in runTest\n    F11_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 33, in runTest\n    \"repo --name=\\\"blah\\\" --baseurl=http://www.domain.com\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 161, in assert_parse\n    parser = self.getParser(inputStr)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.repo\", line 166, in __init__\n  File \"pykickstart.commands.repo\", line 355, in _getParser\nTypeError: unorderable types: str() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -231,7 +231,7 @@", "         op = F14_Repo._getParser(self)", "         for action in op._actions:", "             for option in ['--baseurl', '--mirrorlist']:", "-                if (option in action.option_strings):", "+                if (option < action.option_strings):", "                     action.help += dedent(('\\n\\n                    .. versionchanged:: %s\\n\\n                    ``--mirrorlist`` and ``--baseurl`` are not required anymore!\\n                    ' % versionToLongString(F15)))", "         return op", " "]]]}, "36": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_NotEq", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 33, in runTest\n    \"repo --name=\\\"blah\\\" --baseurl=http://www.domain.com\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.repo\", line 245, in parse\nUserWarning: A repo with the name blah has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -156,7 +156,7 @@", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)", "         rd.lineno = self.lineno", "-        if (rd in self.dataList()):", "+        if (rd != self.dataList()):", "             warnings.warn((_('A repo with the name %s has already been defined.') % rd.name))", "         return rd", " "]]]}, "42": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_Eq", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nAttributeError: 'list' object has no attribute 'name'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 77, in runTest\n    repo --name=repoB --baseurl=http://www.domain.com\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nrepo --name=repoA --baseurl=http://www.domain.com\nrepo --name=repoB --baseurl=http://www.domain.com: 'list' object has no attribute 'name'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -156,7 +156,7 @@", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)", "         rd.lineno = self.lineno", "-        if (rd in self.dataList()):", "+        if (rd == self.dataList()):", "             warnings.warn((_('A repo with the name %s has already been defined.') % rd.name))", "         return rd", " "]]]}, "28": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_NotIn", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 115, in runTest\n    F8_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 86, in runTest\n    FC6_TestCase.runTest(self, urlRequired=urlRequired)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 33, in runTest\n    \"repo --name=\\\"blah\\\" --baseurl=http://www.domain.com\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.repo\", line 245, in parse\nUserWarning: A repo with the name blah has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -156,7 +156,7 @@", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)", "         rd.lineno = self.lineno", "-        if (rd in self.dataList()):", "+        if (rd not in self.dataList()):", "             warnings.warn((_('A repo with the name %s has already been defined.') % rd.name))", "         return rd", " "]]]}, "21": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "number_replacer", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "line_number": 164}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -129,7 +129,7 @@", "     removedAttrs = KickstartCommand.removedAttrs", "     urlRequired = True", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.repoList = kwargs.get('repoList', [])"]]]}, "15": {"occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.repo", "replace_In_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "result-type": "normal", "module-name": "pykickstart.commands.repo", "op-name": "replace_In_with_Is", "result-data": [{"occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/repo.py\", line 81, in runTest\n    repo --name=repoA --baseurl=http://www.domain.com\"\"\", UserWarning)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/repo.py", "@@ -156,7 +156,7 @@", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)", "         rd.lineno = self.lineno", "-        if (rd in self.dataList()):", "+        if (rd is self.dataList()):", "             warnings.warn((_('A repo with the name %s has already been defined.') % rd.name))", "         return rd", " "]]]}}, "work-parameters": {"1": {"test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/repo.py"], "test-runner": "nose", "timeout": 70.64119}}, "_default": {}}