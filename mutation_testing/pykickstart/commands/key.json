{"work-parameters": {"1": {"test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"], "test-runner": "nose", "timeout": 4.59427}}, "work-items": {"20": {"occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.key\", line 61, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command key requires one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -34,7 +34,7 @@", "         self.set_to_self(ns)", "         if self.skip:", "             self.key = KS_INSTKEY_SKIP", "-        elif (len(extra) != 1):", "+        elif (len(extra) >= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'key')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'key', 'options': extra}"]]], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "6": {"occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 2, "line_number": 66}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.key\", line 66, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -40,6 +40,6 @@", "             mapping = {'command': 'key', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         else:", "-            self.key = extra[0]", "+            self.key = extra[1]", "         return self", " "]]], "op-name": "number_replacer", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "4": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 0, "line_number": 32}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -10,7 +10,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.key = kwargs.get('key', '')"]]], "op-name": "number_replacer", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "21": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.key\", line 41, in __str__\nTypeError: unorderable types: str() >= int()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -18,7 +18,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.key == KS_INSTKEY_SKIP):", "+        if (self.key >= KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "         elif (self.key != ''):", "             retval += ('key %s\\n' % self.key)"]]], "op-name": "replace_Eq_with_GtE", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "13": {"occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.key\", line 60, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -34,7 +34,7 @@", "         self.set_to_self(ns)", "         if self.skip:", "             self.key = KS_INSTKEY_SKIP", "-        elif (len(extra) != 1):", "+        elif (len(extra) in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'key')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'key', 'options': extra}"]]], "op-name": "replace_NotEq_with_In", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "23": {"occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -34,7 +34,7 @@", "         self.set_to_self(ns)", "         if self.skip:", "             self.key = KS_INSTKEY_SKIP", "-        elif (len(extra) != 1):", "+        elif (len(extra) < 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'key')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'key', 'options': extra}"]]], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "26": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -18,7 +18,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.key == KS_INSTKEY_SKIP):", "+        if (self.key is KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "         elif (self.key != ''):", "             retval += ('key %s\\n' % self.key)"]]], "op-name": "replace_Eq_with_Is", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "14": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.key\", line 41, in __str__\nTypeError: unorderable types: str() < int()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -18,7 +18,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.key == KS_INSTKEY_SKIP):", "+        if (self.key < KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "         elif (self.key != ''):", "             retval += ('key %s\\n' % self.key)"]]], "op-name": "replace_Eq_with_Lt", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "5": {"occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 1, "line_number": 60}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.key\", line 61, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command key requires one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -34,7 +34,7 @@", "         self.set_to_self(ns)", "         if self.skip:", "             self.key = KS_INSTKEY_SKIP", "-        elif (len(extra) != 1):", "+        elif (len(extra) != 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'key')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'key', 'options': extra}"]]], "op-name": "number_replacer", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "16": {"occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 32, in runTest\n    self.assert_parse_error(\"key\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\n  File \"pykickstart.commands.key\", line 66, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -34,7 +34,7 @@", "         self.set_to_self(ns)", "         if self.skip:", "             self.key = KS_INSTKEY_SKIP", "-        elif (len(extra) != 1):", "+        elif (len(extra) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'key')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'key', 'options': extra}"]]], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "8": {"occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.key\", line 61, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command key requires one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -34,7 +34,7 @@", "         self.set_to_self(ns)", "         if self.skip:", "             self.key = KS_INSTKEY_SKIP", "-        elif (len(extra) != 1):", "+        elif (len(extra) is 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'key')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'key', 'options': extra}"]]], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "28": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'key --skip\\n' != 'key 012345abcd\\n'\n- key --skip\n+ key 012345abcd\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -18,7 +18,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.key == KS_INSTKEY_SKIP):", "+        if (self.key is not KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "         elif (self.key != ''):", "             retval += ('key %s\\n' % self.key)"]]], "op-name": "replace_Eq_with_IsNot", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "3": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.key\", line 41, in __str__\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -18,7 +18,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.key == KS_INSTKEY_SKIP):", "+        if (self.key in KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "         elif (self.key != ''):", "             retval += ('key %s\\n' % self.key)"]]], "op-name": "replace_Eq_with_In", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "19": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 40, in runTest\n    self.assertEqual(cmd.__str__(), \"\")\nAssertionError: 'key \\n' != ''\n- key \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -20,7 +20,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.key == KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "-        elif (self.key != ''):", "+        elif (self.key >= ''):", "             retval += ('key %s\\n' % self.key)", "         return retval", " "]]], "op-name": "replace_NotEq_with_GtE", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "30": {"occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 1, "line_number": 50}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'key --skip\\n' != 'key 012345abcd\\n'\n- key --skip\n+ key 012345abcd\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -26,7 +26,7 @@", " ", "     def _getParser(self):", "         op = KSOptionParser(prog='key', description='', version=RHEL5)", "-        op.add_argument('--skip', action='store_true', default=False, version=RHEL5, help='')", "+        op.add_argument('--skip', action='store_true', default=True, version=RHEL5, help='')", "         return op", " ", "     def parse(self, args):"]]], "op-name": "boolean_replacer", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "1": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.key\", line 41, in __str__\nTypeError: unorderable types: str() > int()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -18,7 +18,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.key == KS_INSTKEY_SKIP):", "+        if (self.key > KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "         elif (self.key != ''):", "             retval += ('key %s\\n' % self.key)"]]], "op-name": "replace_Eq_with_Gt", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "11": {"occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.key\", line 61, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command key requires one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -34,7 +34,7 @@", "         self.set_to_self(ns)", "         if self.skip:", "             self.key = KS_INSTKEY_SKIP", "-        elif (len(extra) != 1):", "+        elif (len(extra) <= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'key')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'key', 'options': extra}"]]], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "22": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'key 012345abcd\\n'\n+ key 012345abcd\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -20,7 +20,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.key == KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "-        elif (self.key != ''):", "+        elif (self.key < ''):", "             retval += ('key %s\\n' % self.key)", "         return retval", " "]]], "op-name": "replace_NotEq_with_Lt", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "24": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -20,7 +20,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.key == KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "-        elif (self.key != ''):", "+        elif (self.key not in ''):", "             retval += ('key %s\\n' % self.key)", "         return retval", " "]]], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "18": {"occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.key\", line 61, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command key requires one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -34,7 +34,7 @@", "         self.set_to_self(ns)", "         if self.skip:", "             self.key = KS_INSTKEY_SKIP", "-        elif (len(extra) != 1):", "+        elif (len(extra) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'key')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'key', 'options': extra}"]]], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "2": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.key\", line 41, in __str__\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -18,7 +18,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.key == KS_INSTKEY_SKIP):", "+        if (self.key not in KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "         elif (self.key != ''):", "             retval += ('key %s\\n' % self.key)"]]], "op-name": "replace_Eq_with_NotIn", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "7": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'key 012345abcd\\n'\n+ key 012345abcd\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -20,7 +20,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.key == KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "-        elif (self.key != ''):", "+        elif (self.key is ''):", "             retval += ('key %s\\n' % self.key)", "         return retval", " "]]], "op-name": "replace_NotEq_with_Is", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "9": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'key --skip\\n' != 'key 012345abcd\\n'\n- key --skip\n+ key 012345abcd\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -18,7 +18,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.key == KS_INSTKEY_SKIP):", "+        if (self.key != KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "         elif (self.key != ''):", "             retval += ('key %s\\n' % self.key)"]]], "op-name": "replace_Eq_with_NotEq", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "12": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'key 012345abcd\\n'\n+ key 012345abcd\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -20,7 +20,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.key == KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "-        elif (self.key != ''):", "+        elif (self.key in ''):", "             retval += ('key %s\\n' % self.key)", "         return retval", " "]]], "op-name": "replace_NotEq_with_In", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "29": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 0, "line_number": 36}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -14,7 +14,7 @@", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.key = kwargs.get('key', '')", "-        self.skip = kwargs.get('skip', False)", "+        self.skip = kwargs.get('skip', True)", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)"]]], "op-name": "boolean_replacer", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "27": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.key\", line 41, in __str__\nTypeError: unorderable types: str() <= int()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -18,7 +18,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.key == KS_INSTKEY_SKIP):", "+        if (self.key <= KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "         elif (self.key != ''):", "             retval += ('key %s\\n' % self.key)"]]], "op-name": "replace_Eq_with_LtE", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "10": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'key 012345abcd\\n'\n+ key 012345abcd\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -20,7 +20,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.key == KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "-        elif (self.key != ''):", "+        elif (self.key <= ''):", "             retval += ('key %s\\n' % self.key)", "         return retval", " "]]], "op-name": "replace_NotEq_with_LtE", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "15": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -20,7 +20,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.key == KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "-        elif (self.key != ''):", "+        elif (self.key > ''):", "             retval += ('key %s\\n' % self.key)", "         return retval", " "]]], "op-name": "replace_NotEq_with_Gt", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "17": {"occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'key 012345abcd\\n'\n+ key 012345abcd\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -20,7 +20,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.key == KS_INSTKEY_SKIP):", "             retval += 'key --skip\\n'", "-        elif (self.key != ''):", "+        elif (self.key == ''):", "             retval += ('key %s\\n' % self.key)", "         return retval", " "]]], "op-name": "replace_NotEq_with_Eq", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}, "25": {"occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/key.py\", line 28, in runTest\n    self.assert_parse(\"key 012345abcd\", \"key 012345abcd\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.key\", line 60, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/key.py", "@@ -34,7 +34,7 @@", "         self.set_to_self(ns)", "         if self.skip:", "             self.key = KS_INSTKEY_SKIP", "-        elif (len(extra) != 1):", "+        elif (len(extra) not in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'key')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'key', 'options': extra}"]]], "op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "module-name": "pykickstart.commands.key", "command": ["cosmic-ray", "worker", "pykickstart.commands.key", "replace_NotEq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/key.py"]}}, "_default": {}}