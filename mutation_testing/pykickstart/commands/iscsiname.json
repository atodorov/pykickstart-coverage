{"_default": {}, "work-parameters": {"1": {"test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "timeout": 4.40136, "test-runner": "nose"}}, "work-items": {"7": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.iscsiname != ''):", "+        if (self.iscsiname >= ''):", "             retval += ('iscsiname %s\\n' % self.iscsiname)", "         return retval", " "]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_GtE"}, "12": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 62, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to iscsiname command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -29,7 +29,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.iqn) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) <= 0):", "             mapping = {'command': 'iscsiname', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.iscsiname = _ns.iqn[0]"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_Gt_with_LtE"}, "3": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'iscsiname foo\\n'\n+ iscsiname foo\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.iscsiname != ''):", "+        if (self.iscsiname in ''):", "             retval += ('iscsiname %s\\n' % self.iscsiname)", "         return retval", " "]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_In"}, "8": {"occurrence": 1, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 59, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command iscsiname requires one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -27,7 +27,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.iqn) != 1):", "+        if (len(_ns.iqn) >= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'iscsiname', 'options': extra}"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_GtE"}, "6": {"occurrence": 1, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 59, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command iscsiname requires one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -27,7 +27,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.iqn) != 1):", "+        if (len(_ns.iqn) <= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'iscsiname', 'options': extra}"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_LtE"}, "20": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 62, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to iscsiname command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -29,7 +29,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.iqn) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) >= 0):", "             mapping = {'command': 'iscsiname', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.iscsiname = _ns.iqn[0]"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_Gt_with_GtE"}, "25": {"occurrence": 1, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -27,7 +27,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.iqn) != 1):", "+        if (len(_ns.iqn) < 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'iscsiname', 'options': extra}"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_Lt"}, "19": {"occurrence": 4, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 4, "line_number": 64}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 64, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -32,6 +32,6 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'iscsiname', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        self.iscsiname = _ns.iqn[0]", "+        self.iscsiname = _ns.iqn[1]", "         return self", " "]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "number_replacer"}, "15": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 0, "line_number": 32}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -9,7 +9,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=70, *args, **kwargs):", "+    def __init__(self, writePriority=71, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.iscsiname = kwargs.get('iscsiname', '')"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "number_replacer"}, "14": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -29,7 +29,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.iqn) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) != 0):", "             mapping = {'command': 'iscsiname', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.iscsiname = _ns.iqn[0]"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_Gt_with_NotEq"}, "22": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 60, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -29,7 +29,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.iqn) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) not in 0):", "             mapping = {'command': 'iscsiname', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.iscsiname = _ns.iqn[0]"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_Gt_with_NotIn"}, "13": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 60, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -29,7 +29,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.iqn) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) in 0):", "             mapping = {'command': 'iscsiname', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.iscsiname = _ns.iqn[0]"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_Gt_with_In"}, "4": {"occurrence": 1, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 58, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -27,7 +27,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.iqn) != 1):", "+        if (len(_ns.iqn) in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'iscsiname', 'options': extra}"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_In"}, "26": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'iscsiname foo\\n'\n+ iscsiname foo\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.iscsiname != ''):", "+        if (self.iscsiname == ''):", "             retval += ('iscsiname %s\\n' % self.iscsiname)", "         return retval", " "]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_Eq"}, "23": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 62, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to iscsiname command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -29,7 +29,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.iqn) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) == 0):", "             mapping = {'command': 'iscsiname', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.iscsiname = _ns.iqn[0]"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_Gt_with_Eq"}, "16": {"occurrence": 1, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": 51, "occurrence": 1, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 56, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1994, in _parse_known_args\n    ', '.join(required_actions))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 249, in error\n    raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nthe following arguments are required: <iqn>\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -22,7 +22,7 @@", " ", "     def _getParser(self):", "         op = KSOptionParser(prog='iscsiname', description='\\n            Assigns an initiator name to the computer. If you use the iscsi\\n            parameter in your kickstart file, this parameter is mandatory, and\\n            you must specify iscsiname in the kickstart file before you specify\\n            iscsi.', version=FC6)", "-        op.add_argument('iqn', metavar='<iqn>', nargs=1, version=FC6, help='\\n                        IQN name')", "+        op.add_argument('iqn', metavar='<iqn>', nargs=2, version=FC6, help='\\n                        IQN name')", "         return op", " ", "     def parse(self, args):"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "number_replacer"}, "17": {"occurrence": 2, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 2, "line_number": 58}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 59, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command iscsiname requires one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -27,7 +27,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.iqn) != 1):", "+        if (len(_ns.iqn) != 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'iscsiname', 'options': extra}"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "number_replacer"}, "29": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.iscsiname != ''):", "+        if (self.iscsiname not in ''):", "             retval += ('iscsiname %s\\n' % self.iscsiname)", "         return retval", " "]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_NotIn"}, "1": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.iscsiname != ''):", "+        if (self.iscsiname > ''):", "             retval += ('iscsiname %s\\n' % self.iscsiname)", "         return retval", " "]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_Gt"}, "10": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'iscsiname foo\\n'\n+ iscsiname foo\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.iscsiname != ''):", "+        if (self.iscsiname is ''):", "             retval += ('iscsiname %s\\n' % self.iscsiname)", "         return retval", " "]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_Is"}, "2": {"occurrence": 1, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -27,7 +27,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.iqn) != 1):", "+        if (len(_ns.iqn) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'iscsiname', 'options': extra}"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_Gt"}, "27": {"occurrence": 1, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 59, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command iscsiname requires one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -27,7 +27,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.iqn) != 1):", "+        if (len(_ns.iqn) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'iscsiname', 'options': extra}"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_Eq"}, "21": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 62, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to iscsiname command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -29,7 +29,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.iqn) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is 0):", "             mapping = {'command': 'iscsiname', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.iscsiname = _ns.iqn[0]"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_Gt_with_Is"}, "28": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -29,7 +29,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.iqn) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is not 0):", "             mapping = {'command': 'iscsiname', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.iscsiname = _ns.iqn[0]"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_Gt_with_IsNot"}, "30": {"occurrence": 1, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 58, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -27,7 +27,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.iqn) != 1):", "+        if (len(_ns.iqn) not in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'iscsiname', 'options': extra}"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_NotIn"}, "18": {"occurrence": 3, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": 60, "occurrence": 3, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 34, in runTest\n    self.assert_parse_error(\"iscsiname foo bar\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -29,7 +29,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.iqn) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) > 1):", "             mapping = {'command': 'iscsiname', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.iscsiname = _ns.iqn[0]"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "number_replacer"}, "11": {"occurrence": 1, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.iscsiname\", line 59, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nKickstart command iscsiname requires one argument\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -27,7 +27,7 @@", " ", "     def parse(self, args):", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(_ns.iqn) != 1):", "+        if (len(_ns.iqn) is 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'iscsiname', 'options': extra}"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_Is"}, "9": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 34, in runTest\n    self.assert_parse_error(\"iscsiname foo bar\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -29,7 +29,7 @@", "         (_ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(_ns.iqn) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Kickstart command %s requires one argument') % 'iscsiname')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) < 0):", "             mapping = {'command': 'iscsiname', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.iscsiname = _ns.iqn[0]"]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_Gt_with_Lt"}, "5": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'iscsiname foo\\n'\n+ iscsiname foo\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.iscsiname != ''):", "+        if (self.iscsiname <= ''):", "             retval += ('iscsiname %s\\n' % self.iscsiname)", "         return retval", " "]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_LtE"}, "24": {"occurrence": 0, "result-type": "normal", "command": ["cosmic-ray", "worker", "pykickstart.commands.iscsiname", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/iscsiname.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/iscsiname.py\", line 29, in runTest\n    self.assert_parse(\"iscsiname foo\", \"iscsiname foo\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'iscsiname foo\\n'\n+ iscsiname foo\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/iscsiname.py", "@@ -16,7 +16,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.iscsiname != ''):", "+        if (self.iscsiname < ''):", "             retval += ('iscsiname %s\\n' % self.iscsiname)", "         return retval", " "]]], "module-name": "pykickstart.commands.iscsiname", "op-name": "replace_NotEq_with_Lt"}}}