{"work-parameters": {"1": {"test-runner": "nose", "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "timeout": 17.68327}}, "_default": {}, "work-items": {"15": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 2, "line_number": 91}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -50,7 +50,7 @@", " ", "     def __init__(self, writePriority=0, *args, **kwargs):", "         FC3_RootPw.__init__(self, writePriority, *args, **kwargs)", "-        self.lock = kwargs.get('lock', False)", "+        self.lock = kwargs.get('lock', True)", " ", "     def _getArgsAsStr(self):", "         retval = FC3_RootPw._getArgsAsStr(self)"]]], "result-type": "normal"}, "33": {"op-name": "replace_Eq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -84,7 +84,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if (len(ns.password) == 1):", "+        if (len(ns.password) is 1):", "             self.password = ns.password[0]", "         else:", "             self.password = ''"]]], "result-type": "normal"}, "22": {"op-name": "replace_NotEq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 134, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the rootpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -79,7 +79,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if ((len(ns.password) != 1) and (not self.lock)):", "+        if ((len(ns.password) <= 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "30": {"op-name": "replace_Eq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'rootpw --iscrypted secrethandshake\\n'\n+ rootpw --iscrypted secrethandshake\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -84,7 +84,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if (len(ns.password) == 1):", "+        if (len(ns.password) < 1):", "             self.password = ns.password[0]", "         else:", "             self.password = ''"]]], "result-type": "normal"}, "11": {"op-name": "replace_NotEq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 133, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -79,7 +79,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if ((len(ns.password) != 1) and (not self.lock)):", "+        if ((len(ns.password) in 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "42": {"op-name": "replace_Gt_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 77, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -37,7 +37,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) not in 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_self(ns)"]]], "result-type": "normal"}, "23": {"op-name": "replace_Gt_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -37,7 +37,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is not 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_self(ns)"]]], "result-type": "normal"}, "51": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 4, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 4, "line_number": 89}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -48,7 +48,7 @@", "     removedKeywords = FC3_RootPw.removedKeywords", "     removedAttrs = FC3_RootPw.removedAttrs", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         FC3_RootPw.__init__(self, writePriority, *args, **kwargs)", "         self.lock = kwargs.get('lock', False)", " "]]], "result-type": "normal"}, "52": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "number_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 5, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 5, "line_number": 133}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 134, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the rootpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -79,7 +79,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if ((len(ns.password) != 1) and (not self.lock)):", "+        if ((len(ns.password) != 2) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "8": {"op-name": "replace_Gt_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 137, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to rootpw command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -81,7 +81,7 @@", "         self.set_to_self(ns)", "         if ((len(ns.password) != 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) == 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if (len(ns.password) == 1):"]]], "result-type": "normal"}, "21": {"op-name": "replace_NotEq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 76, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the rootpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -35,7 +35,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) != 1):", "+        if (len(ns.password) <= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "25": {"op-name": "replace_NotEq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -23,7 +23,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.password != ''):", "+        if (self.password not in ''):", "             retval += ('# Root password\\nrootpw%s %s\\n' % (self._getArgsAsStr(), self.password))", "         return retval", " "]]], "result-type": "normal"}, "49": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 2, "line_number": 77}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -37,7 +37,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) > 1):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_self(ns)"]]], "result-type": "normal"}, "29": {"op-name": "replace_Eq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -84,7 +84,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if (len(ns.password) == 1):", "+        if (len(ns.password) >= 1):", "             self.password = ns.password[0]", "         else:", "             self.password = ''"]]], "result-type": "normal"}, "63": {"op-name": "replace_NotEq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -79,7 +79,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if ((len(ns.password) != 1) and (not self.lock)):", "+        if ((len(ns.password) < 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "20": {"op-name": "replace_NotEq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'rootpw --iscrypted secrethandshake\\n'\n+ rootpw --iscrypted secrethandshake\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -23,7 +23,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.password != ''):", "+        if (self.password <= ''):", "             retval += ('# Root password\\nrootpw%s %s\\n' % (self._getArgsAsStr(), self.password))", "         return retval", " "]]], "result-type": "normal"}, "4": {"op-name": "replace_NotEq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 76, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the rootpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -35,7 +35,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) != 1):", "+        if (len(ns.password) is 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "9": {"op-name": "replace_NotEq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'rootpw --iscrypted secrethandshake\\n'\n+ rootpw --iscrypted secrethandshake\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -23,7 +23,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.password != ''):", "+        if (self.password in ''):", "             retval += ('# Root password\\nrootpw%s %s\\n' % (self._getArgsAsStr(), self.password))", "         return retval", " "]]], "result-type": "normal"}, "53": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "number_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 6, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 6, "line_number": 135}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -81,7 +81,7 @@", "         self.set_to_self(ns)", "         if ((len(ns.password) != 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) > 1):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if (len(ns.password) == 1):"]]], "result-type": "normal"}, "12": {"op-name": "replace_Eq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 139, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -84,7 +84,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if (len(ns.password) == 1):", "+        if (len(ns.password) not in 1):", "             self.password = ns.password[0]", "         else:", "             self.password = ''"]]], "result-type": "normal"}, "54": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "number_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 7, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 7, "line_number": 139}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'rootpw --iscrypted secrethandshake\\n'\n+ rootpw --iscrypted secrethandshake\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -84,7 +84,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if (len(ns.password) == 1):", "+        if (len(ns.password) == 2):", "             self.password = ns.password[0]", "         else:", "             self.password = ''"]]], "result-type": "normal"}, "5": {"op-name": "replace_NotEq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 134, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the rootpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -79,7 +79,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if ((len(ns.password) != 1) and (not self.lock)):", "+        if ((len(ns.password) is 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "64": {"op-name": "replace_Eq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 139, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -84,7 +84,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if (len(ns.password) == 1):", "+        if (len(ns.password) in 1):", "             self.password = ns.password[0]", "         else:", "             self.password = ''"]]], "result-type": "normal"}, "17": {"op-name": "replace_NotEq_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'rootpw --iscrypted secrethandshake\\n'\n+ rootpw --iscrypted secrethandshake\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -23,7 +23,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.password != ''):", "+        if (self.password == ''):", "             retval += ('# Root password\\nrootpw%s %s\\n' % (self._getArgsAsStr(), self.password))", "         return retval", " "]]], "result-type": "normal"}, "7": {"op-name": "replace_Gt_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 79, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to rootpw command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -37,7 +37,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) == 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_self(ns)"]]], "result-type": "normal"}, "38": {"op-name": "replace_NotEq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 134, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the rootpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -79,7 +79,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if ((len(ns.password) != 1) and (not self.lock)):", "+        if ((len(ns.password) >= 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "47": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 0, "line_number": 31}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -9,7 +9,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.isCrypted = kwargs.get('isCrypted', False)"]]], "result-type": "normal"}, "35": {"op-name": "replace_Gt_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 137, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to rootpw command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -81,7 +81,7 @@", "         self.set_to_self(ns)", "         if ((len(ns.password) != 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if (len(ns.password) == 1):"]]], "result-type": "normal"}, "27": {"op-name": "replace_NotEq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 133, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -79,7 +79,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if ((len(ns.password) != 1) and (not self.lock)):", "+        if ((len(ns.password) not in 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "34": {"op-name": "replace_Gt_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 79, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to rootpw command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -37,7 +37,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_self(ns)"]]], "result-type": "normal"}, "6": {"op-name": "replace_Eq_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 66, in runTest\n    self.assert_parse(\"rootpw --lock\", \"rootpw --lock\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 140, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -84,7 +84,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if (len(ns.password) == 1):", "+        if (len(ns.password) <= 1):", "             self.password = ns.password[0]", "         else:", "             self.password = ''"]]], "result-type": "normal"}, "28": {"op-name": "replace_Eq_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'rootpw --iscrypted secrethandshake\\n'\n+ rootpw --iscrypted secrethandshake\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -84,7 +84,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if (len(ns.password) == 1):", "+        if (len(ns.password) is not 1):", "             self.password = ns.password[0]", "         else:", "             self.password = ''"]]], "result-type": "normal"}, "19": {"op-name": "replace_NotEq_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 134, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the rootpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -79,7 +79,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if ((len(ns.password) != 1) and (not self.lock)):", "+        if ((len(ns.password) == 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "3": {"op-name": "replace_NotEq_with_Is", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'rootpw --iscrypted secrethandshake\\n'\n+ rootpw --iscrypted secrethandshake\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -23,7 +23,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.password != ''):", "+        if (self.password is ''):", "             retval += ('# Root password\\nrootpw%s %s\\n' % (self._getArgsAsStr(), self.password))", "         return retval", " "]]], "result-type": "normal"}, "32": {"op-name": "replace_Gt_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 135, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -81,7 +81,7 @@", "         self.set_to_self(ns)", "         if ((len(ns.password) != 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) in 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if (len(ns.password) == 1):"]]], "result-type": "normal"}, "10": {"op-name": "replace_NotEq_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 75, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -35,7 +35,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) != 1):", "+        if (len(ns.password) in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "16": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 3, "line_number": 106}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'rootpw --iscrypted --lock secrethandshake\\n' != 'rootpw --iscrypted secrethandshake\\n'\n- rootpw --iscrypted --lock secrethandshake\n?                   -------\n+ rootpw --iscrypted secrethandshake\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -62,7 +62,7 @@", " ", "     def _getParser(self):", "         op = FC3_RootPw._getParser(self)", "-        op.add_argument('--lock', action='store_true', default=False, version=F8, help='\\n                        If this is present, the root account is locked by\\n                        default. That is, the root user will not be able to\\n                        login from the console.')", "+        op.add_argument('--lock', action='store_true', default=True, version=F8, help='\\n                        If this is present, the root account is locked by\\n                        default. That is, the root user will not be able to\\n                        login from the console.')", "         op.add_argument('--plaintext', dest='isCrypted', action='store_false', version=F8, help='\\n                        The password argument is assumed to not be encrypted.\\n                        This is the default!')", "         return op", " "]]], "result-type": "normal"}, "60": {"op-name": "replace_Gt_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -81,7 +81,7 @@", "         self.set_to_self(ns)", "         if ((len(ns.password) != 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) < 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if (len(ns.password) == 1):"]]], "result-type": "normal"}, "48": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 1, "line_number": 75}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 76, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the rootpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -35,7 +35,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) != 1):", "+        if (len(ns.password) != 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "14": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 1, "line_number": 61}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 42, in runTest\n    self.assert_parse(\"rootpw --lock secrethandshake\", \"rootpw --lock --plaintext secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'rootpw --iscrypted --lock secrethandshake\\n' != 'rootpw --lock --plaintext secrethandshake\\n'\n- rootpw --iscrypted --lock secrethandshake\n+ rootpw --lock --plaintext secrethandshake\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -30,7 +30,7 @@", "     def _getParser(self):", "         op = KSOptionParser(prog='rootpw', description=\"\\n                            This required command sets the system's root\\n                            password.\", version=FC3)", "         op.add_argument('password', metavar='<password>', nargs='*', version=FC3, help='The desired root password.')", "-        op.add_argument('--iscrypted', dest='isCrypted', action='store_true', default=False, version=FC3, help='\\n                        If this is present, the password argument is assumed to\\n                        already be encrypted. To create an encrypted password\\n                        you can use python::\\n\\n                            python -c \\'import crypt; print(crypt.crypt(\"My Password\", \"$6$My Salt\"))\\'\\n\\n                        This will generate sha512 crypt of your password using\\n                        your provided salt.')", "+        op.add_argument('--iscrypted', dest='isCrypted', action='store_true', default=True, version=FC3, help='\\n                        If this is present, the password argument is assumed to\\n                        already be encrypted. To create an encrypted password\\n                        you can use python::\\n\\n                            python -c \\'import crypt; print(crypt.crypt(\"My Password\", \"$6$My Salt\"))\\'\\n\\n                        This will generate sha512 crypt of your password using\\n                        your provided salt.')", "         return op", " ", "     def parse(self, args):"]]], "result-type": "normal"}, "41": {"op-name": "replace_Gt_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 137, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to rootpw command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -81,7 +81,7 @@", "         self.set_to_self(ns)", "         if ((len(ns.password) != 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) >= 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if (len(ns.password) == 1):"]]], "result-type": "normal"}, "57": {"op-name": "replace_Gt_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -37,7 +37,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) != 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_self(ns)"]]], "result-type": "normal"}, "37": {"op-name": "replace_NotEq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 76, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the rootpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -35,7 +35,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) != 1):", "+        if (len(ns.password) >= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "45": {"op-name": "replace_NotEq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 30, in runTest\n    self.assert_parse_error(\"rootpw\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 82, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -35,7 +35,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) != 1):", "+        if (len(ns.password) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "31": {"op-name": "replace_Gt_with_In", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 77, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -37,7 +37,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) in 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_self(ns)"]]], "result-type": "normal"}, "18": {"op-name": "replace_NotEq_with_Eq", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 76, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nA single argument is expected for the rootpw command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -35,7 +35,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) != 1):", "+        if (len(ns.password) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "58": {"op-name": "replace_Gt_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -81,7 +81,7 @@", "         self.set_to_self(ns)", "         if ((len(ns.password) != 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) != 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if (len(ns.password) == 1):"]]], "result-type": "normal"}, "50": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 3, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 3, "line_number": 82}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 82, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -41,7 +41,7 @@", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_self(ns)", "-        self.password = ns.password[0]", "+        self.password = ns.password[1]", "         return self", " ", " class F8_RootPw(FC3_RootPw):"]]], "result-type": "normal"}, "62": {"op-name": "replace_NotEq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -35,7 +35,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) != 1):", "+        if (len(ns.password) < 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "56": {"op-name": "replace_Eq_with_NotEq", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'rootpw --iscrypted secrethandshake\\n'\n+ rootpw --iscrypted secrethandshake\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -84,7 +84,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if (len(ns.password) == 1):", "+        if (len(ns.password) != 1):", "             self.password = ns.password[0]", "         else:", "             self.password = ''"]]], "result-type": "normal"}, "43": {"op-name": "replace_Gt_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 135, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -81,7 +81,7 @@", "         self.set_to_self(ns)", "         if ((len(ns.password) != 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) not in 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if (len(ns.password) == 1):"]]], "result-type": "normal"}, "46": {"op-name": "replace_NotEq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 2, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 2, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 30, in runTest\n    self.assert_parse_error(\"rootpw\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -79,7 +79,7 @@", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         self.set_to_self(ns)", "-        if ((len(ns.password) != 1) and (not self.lock)):", "+        if ((len(ns.password) > 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "44": {"op-name": "replace_NotEq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -23,7 +23,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.password != ''):", "+        if (self.password > ''):", "             retval += ('# Root password\\nrootpw%s %s\\n' % (self._getArgsAsStr(), self.password))", "         return retval", " "]]], "result-type": "normal"}, "13": {"op-name": "boolean_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 0, "line_number": 35}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -12,7 +12,7 @@", "     def __init__(self, writePriority=0, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "-        self.isCrypted = kwargs.get('isCrypted', False)", "+        self.isCrypted = kwargs.get('isCrypted', True)", "         self.password = kwargs.get('password', '')", " ", "     def _getArgsAsStr(self):"]]], "result-type": "normal"}, "1": {"op-name": "replace_Gt_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 79, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to rootpw command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -37,7 +37,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) <= 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_self(ns)"]]], "result-type": "normal"}, "26": {"op-name": "replace_NotEq_with_NotIn", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 75, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -35,7 +35,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.password) != 1):", "+        if (len(ns.password) not in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}"]]], "result-type": "normal"}, "59": {"op-name": "replace_Gt_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -37,7 +37,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) < 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_self(ns)"]]], "result-type": "normal"}, "40": {"op-name": "replace_Gt_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 79, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to rootpw command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -37,7 +37,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.password) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) >= 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.set_to_self(ns)"]]], "result-type": "normal"}, "24": {"op-name": "replace_Gt_with_IsNot", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -81,7 +81,7 @@", "         self.set_to_self(ns)", "         if ((len(ns.password) != 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is not 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if (len(ns.password) == 1):"]]], "result-type": "normal"}, "39": {"op-name": "replace_Eq_with_Gt", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'rootpw --iscrypted secrethandshake\\n'\n+ rootpw --iscrypted secrethandshake\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -84,7 +84,7 @@", "         elif (len(extra) > 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "-        if (len(ns.password) == 1):", "+        if (len(ns.password) > 1):", "             self.password = ns.password[0]", "         else:", "             self.password = ''"]]], "result-type": "normal"}, "36": {"op-name": "replace_NotEq_with_GtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 66, in runTest\n    self.assert_parse(\"rootpw --lock\", \"rootpw --lock\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'rootpw --lock --plaintext \\n' != 'rootpw --lock\\n'\n- rootpw --lock --plaintext \n+ rootpw --lock\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -23,7 +23,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.password != ''):", "+        if (self.password >= ''):", "             retval += ('# Root password\\nrootpw%s %s\\n' % (self._getArgsAsStr(), self.password))", "         return retval", " "]]], "result-type": "normal"}, "2": {"op-name": "replace_Gt_with_LtE", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_Gt_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 1, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "occurrence": 1, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 137, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to rootpw command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -81,7 +81,7 @@", "         self.set_to_self(ns)", "         if ((len(ns.password) != 1) and (not self.lock)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('A single argument is expected for the %s command') % 'rootpw')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) <= 0):", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if (len(ns.password) == 1):"]]], "result-type": "normal"}, "61": {"op-name": "replace_NotEq_with_Lt", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 0, "result-data": [{"operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 0, "line_number": "<UNKNOWN>"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '' != 'rootpw --iscrypted secrethandshake\\n'\n+ rootpw --iscrypted secrethandshake\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -23,7 +23,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.password != ''):", "+        if (self.password < ''):", "             retval += ('# Root password\\nrootpw%s %s\\n' % (self._getArgsAsStr(), self.password))", "         return retval", " "]]], "result-type": "normal"}, "55": {"op-name": "number_replacer", "command": ["cosmic-ray", "worker", "pykickstart.commands.rootpw", "number_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/rootpw.py"], "module-name": "pykickstart.commands.rootpw", "occurrence": 8, "result-data": [{"operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 8, "line_number": 140}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 64, in runTest\n    F8_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 39, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/rootpw.py\", line 27, in runTest\n    self.assert_parse(\"rootpw --iscrypted secrethandshake\", \"rootpw --iscrypted secrethandshake\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.rootpw\", line 140, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/rootpw.py", "@@ -85,7 +85,7 @@", "             mapping = {'command': 'rootpw', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         if (len(ns.password) == 1):", "-            self.password = ns.password[0]", "+            self.password = ns.password[1]", "         else:", "             self.password = ''", "         return self"]]], "result-type": "normal"}}}