{"_default": {}, "work-parameters": {"1": {"test-runner": "nose", "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "timeout": 211.39123}}, "work-items": {"135": {"op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 7, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_In", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 7, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --fsprofile=\"\" raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --fsprofile=\"\" raid.01\n?                                 ---------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -115,7 +115,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F7_RaidData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile in ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.raid"}, "6": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 40, "occurrence": 0, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 129, in runTest\n    self.assertEqual(rd._getArgsAsStr(), \"\")\nAssertionError: ' --spares=1' != ''\n-  --spares=1\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -18,7 +18,7 @@", "         self.fstype = kwargs.get('fstype', '')", "         self.level = kwargs.get('level', '')", "         self.format = kwargs.get('format', True)", "-        self.spares = kwargs.get('spares', 0)", "+        self.spares = kwargs.get('spares', 1)", "         self.preexist = kwargs.get('preexist', False)", "         self.mountpoint = kwargs.get('mountpoint', '')", "         self.members = kwargs.get('members', [])"]]], "module-name": "pykickstart.commands.raid"}, "80": {"op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --level=RAID0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --level=RAID0 raid.01\n+ raid / --device=0 --level=RAID0 raid.01\n?       +++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -33,7 +33,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.device != ''):", "+        if (self.device is ''):", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.raid"}, "2": {"op-name": "replace_Eq_with_Is", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -29,7 +29,7 @@", "         return (self.device == y.device)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.raid"}, "109": {"op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 5, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Lt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 raid.01\\n' != 'raid / --device=0 --level=RAID0 --bytes-per-inode=4096 raid.01\\n'\n- raid / --device=0 --level=RAID0 raid.01\n+ raid / --device=0 --level=RAID0 --bytes-per-inode=4096 raid.01\n?                                 +++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -78,7 +78,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_RaidData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode < 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "111": {"op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 7, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Lt", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 7, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 210, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1 --fsprofile=\\\"ASDF\\\" raid.01 raid.02\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[18 chars]type=\"ext3\" --level=RAID1 raid.01 raid.02\\n' != 'raid[18 chars]type=\"ext3\" --level=RAID1 --fsprofile=\"ASDF\" raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 raid.01 raid.02\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --fsprofile=\"ASDF\" raid.01 raid.02\n?                                                 +++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -115,7 +115,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F7_RaidData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile < ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.raid"}, "91": {"op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 11, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Is", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 11, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 402, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for raid\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -275,7 +275,7 @@", "             extra = []", "         if (not ns.format):", "             ns.preexist = True", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) is 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))"]]], "module-name": "pykickstart.commands.raid"}, "79": {"op-name": "break_continue_replacement", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "break_continue_replacement", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 585, "occurrence": 2, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -390,7 +390,7 @@", "         for action in op._actions:", "             if ('--level' in action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID4\" level was added.' % versionToLongString(F13)))", "-                break", "+                continue", "         return op", " ", " class RHEL6_Raid(F13_Raid):"]]], "module-name": "pykickstart.commands.raid"}, "31": {"op-name": "replace_Gt_with_NotIn", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 405, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -279,7 +279,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "-        elif ((len(ns.partitions) > 0) and ns.preexist):", "+        elif ((len(ns.partitions) not in 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)"]]], "module-name": "pykickstart.commands.raid"}, "61": {"op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 9, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_NotIn", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 9, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -135,7 +135,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_RaidData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert not in '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.raid"}, "14": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 8, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 339, "occurrence": 8, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 387, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1994, in _parse_known_args\n    ', '.join(required_actions))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 249, in error\n    raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nthe following arguments are required: <mntpoint>, <partitions*>\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -251,7 +251,7 @@", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid raid level: %s') % value)))", "         op = KSOptionParser(prog='raid', description='\\n                            Assembles a software RAID device.', epilog='\\n                            The following example shows how to create a RAID\\n                            level 1 partition for /, and a RAID level 5 for\\n                            /usr, assuming there are three disks on the\\n                            system. It also creates three swap partitions, one\\n                            on each drive::\\n\\n                                part raid.01 --size=6000 --ondisk=sda\\n                                part raid.02 --size=6000 --ondisk=sdb\\n                                part raid.03 --size=6000 --ondisk=sdc\\n\\n                                part swap1 --size=512 --ondisk=sda\\n                                part swap2 --size=512 --ondisk=sdb\\n                                part swap3 --size=512 --ondisk=sdc\\n\\n                                part raid.11 --size=6000 --ondisk=sda\\n                                part raid.12 --size=6000 --ondisk=sdb\\n                                part raid.13 --size=6000 --ondisk=sdc\\n\\n                                raid / --level=1 --device=md0 raid.01 raid.02 raid.03\\n                                raid /usr --level=5 --device=md1 raid.11 raid.12 raid.13\\n                            ', version=FC3)", "-        op.add_argument('mntpoint', metavar='<mntpoint>', nargs=1, version=FC3, help='\\n                        Location where the RAID file system is mounted. If it\\n                        is /, the RAID level must be 1 unless a boot partition\\n                        (/boot) is present. If a boot partition is present, the\\n                        /boot partition must be level 1 and the root (/)\\n                        partition can be any of the available types.')", "+        op.add_argument('mntpoint', metavar='<mntpoint>', nargs=2, version=FC3, help='\\n                        Location where the RAID file system is mounted. If it\\n                        is /, the RAID level must be 1 unless a boot partition\\n                        (/boot) is present. If a boot partition is present, the\\n                        /boot partition must be level 1 and the root (/)\\n                        partition can be any of the available types.')", "         op.add_argument('partitions', metavar='<partitions*>', nargs='*', version=FC3, help='\\n                        The software raid partitions lists the RAID identifiers\\n                        to add to the RAID array.')", "         op.add_argument('--device', type=device_cb, required=True, version=FC3, help=\"\\n                        Name of the RAID device to use (such as 'fedora-root'\\n                        or 'home'). As of Fedora 19, RAID devices are no longer\\n                        referred to by names like 'md0'. If you have an old\\n                        (v0.90 metadata) array that you cannot assign a name to,\\n                        you can specify the array by a filesystem label or UUID\\n                        (eg: --device=LABEL=fedora-root).\")", "         op.add_argument('--fstype', version=FC3, help='\\n                        Sets the file system type for the RAID array. Valid\\n                        values include ext4, ext3, ext2, btrfs, swap, and vfat.\\n                        Other filesystems may be valid depending on command\\n                        line arguments passed to anaconda to enable other\\n                        filesystems.')"]]], "module-name": "pykickstart.commands.raid"}, "212": {"op-name": "replace_In_with_IsNot", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_IsNot", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -388,7 +388,7 @@", "     def _getParser(self):", "         op = F12_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' is not action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID4\" level was added.' % versionToLongString(F13)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "194": {"op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Eq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --spares=0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --spares=0 raid.01\n?                                 -----------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -41,7 +41,7 @@", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.spares != 0):", "+        if (self.spares == 0):", "             retval += (' --spares=%d' % self.spares)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "module-name": "pykickstart.commands.raid"}, "19": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 13, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 417, "occurrence": 13, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 417, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -285,7 +285,7 @@", "         self.set_to_obj(ns, rd)", "         rd.lineno = self.lineno", "         rd.device = self._getDevice(rd.device)", "-        rd.mountpoint = ns.mntpoint[0]", "+        rd.mountpoint = ns.mntpoint[1]", "         if (len(ns.partitions) > 0):", "             rd.members = ns.partitions", "         if (rd in self.dataList()):"]]], "module-name": "pykickstart.commands.raid"}, "181": {"op-name": "replace_In_with_GtE", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_GtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 246, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 37, in runTest\n    if \"--bytes-per-inode\" in self.optionList:\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 138, in optionList\n    parser = self.getParser(self.command)._getParser()\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.raid\", line 572, in __init__\n  File \"pykickstart.commands.raid\", line 501, in __init__\n  File \"pykickstart.commands.raid\", line 292, in __init__\n  File \"pykickstart.commands.raid\", line 579, in _getParser\nTypeError: unorderable types: str() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -388,7 +388,7 @@", "     def _getParser(self):", "         op = F12_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' >= action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID4\" level was added.' % versionToLongString(F13)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "90": {"op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 10, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Is", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 10, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 278, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 273, in runTest\n    F13_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 246, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --label= raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --label= raid.01\n?                                 ---------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -172,7 +172,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_RaidData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label is ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "186": {"op-name": "replace_In_with_Is", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Is", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -388,7 +388,7 @@", "     def _getParser(self):", "         op = F12_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' is action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID4\" level was added.' % versionToLongString(F13)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "164": {"op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 9, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_LtE", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 9, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[27 chars]3\" --level=RAID1 --encrypted --escrowcert=\"\" raid.01 raid.02\\n' != 'raid[27 chars]3\" --level=RAID1 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted --escrowcert=\"\" raid.01 raid.02\n?                                                             ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -135,7 +135,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_RaidData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert <= '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.raid"}, "235": {"op-name": "replace_Eq_with_GtE", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 120, in runTest\n    self.assertFalse(rd != rd)\n  File \"pykickstart.commands.raid\", line 52, in __ne__\nTypeError: unorderable types: F12_RaidData() >= F12_RaidData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -29,7 +29,7 @@", "         return (self.device == y.device)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self >= y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.raid"}, "15": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 9, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 370, "occurrence": 9, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --spares=1 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --spares=1 raid.01\n?                                 -----------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -257,7 +257,7 @@", "         op.add_argument('--fstype', version=FC3, help='\\n                        Sets the file system type for the RAID array. Valid\\n                        values include ext4, ext3, ext2, btrfs, swap, and vfat.\\n                        Other filesystems may be valid depending on command\\n                        line arguments passed to anaconda to enable other\\n                        filesystems.')", "         op.add_argument('--level', type=level_cb, version=FC3, help=('\\n                        RAID level to use %s.' % set(self.levelMap.values())))", "         op.add_argument('--noformat', dest='format', action='store_false', default=True, version=FC3, help='\\n                        Use an existing RAID device and do not format the RAID\\n                        array.')", "-        op.add_argument('--spares', type=int, default=0, version=FC3, help='\\n                        Specifies the number of spare drives allocated for the\\n                        RAID array. Spare drives are used to rebuild the array\\n                        in case of drive failure.')", "+        op.add_argument('--spares', type=int, default=1, version=FC3, help='\\n                        Specifies the number of spare drives allocated for the\\n                        RAID array. Spare drives are used to rebuild the array\\n                        in case of drive failure.')", "         op.add_argument('--useexisting', dest='preexist', action='store_true', default=False, version=FC3, help='\\n                        Use an existing RAID device and reformat it.')", "         return op", " "]]], "module-name": "pykickstart.commands.raid"}, "203": {"op-name": "replace_Eq_with_NotIn", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 118, in runTest\n    self.assertTrue(rd == rd)\n  File \"pykickstart.commands.raid\", line 49, in __eq__\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.device == y.device)", "+        return (self.device not in y.device)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.raid"}, "112": {"op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 8, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Lt", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 8, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 180, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted --passphrase=\\\"asdf\\\" raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[31 chars]-level=RAID1 --encrypted raid.01 raid.02\\n' != 'raid[31 chars]-level=RAID1 --encrypted --passphrase=\"asdf\" raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted raid.01 raid.02\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted --passphrase=\"asdf\" raid.01 raid.02\n?                                                             ++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -119,7 +119,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase < ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "205": {"op-name": "replace_Eq_with_NotIn", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 416, in parse\n  File \"pykickstart.commands.raid\", line 384, in _getDevice\nValueError: invalid literal for int() with base 10: 'md0'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -240,7 +240,7 @@", "     def _getParser(self):", " ", "         def device_cb(value):", "-            if (value[0:2] == 'md'):", "+            if (value[0:2] not in 'md'):", "                 return value[2:]", "             else:", "                 return value"]]], "module-name": "pykickstart.commands.raid"}, "191": {"op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --level=RAID0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --level=RAID0 raid.01\n+ raid / --device=0 --level=RAID0 raid.01\n?       +++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -33,7 +33,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.device != ''):", "+        if (self.device == ''):", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.raid"}, "5": {"op-name": "replace_Eq_with_Is", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Is", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -292,7 +292,7 @@", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))", "-        if (rd.preexist and (rd.device == '')):", "+        if (rd.preexist and (rd.device is '')):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='Device required for preexisting RAID device'))", "         return rd", " "]]], "module-name": "pykickstart.commands.raid"}, "151": {"op-name": "replace_Eq_with_NotEq", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 120, in runTest\n    self.assertFalse(rd != rd)\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\n  File \"pykickstart.commands.raid\", line 52, in __ne__\nRecursionError: maximum recursion depth exceeded in comparison\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -29,7 +29,7 @@", "         return (self.device == y.device)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self != y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.raid"}, "26": {"op-name": "replace_In_with_Gt", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.raid\", line 310, in level_cb\nTypeError: unorderable types: str() > dict()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2300, in _get_value\n    raise ArgumentError(action, msg % args)\nargparse.ArgumentError: argument --level: invalid level_cb value: 'RAID0'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 387, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1766, in parse_known_args\n    self.error(str(err))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 249, in error\n    raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nargument --level: invalid level_cb value: 'RAID0'\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -246,7 +246,7 @@", "                 return value", " ", "         def level_cb(value):", "-            if (value.upper() in self.levelMap):", "+            if (value.upper() > self.levelMap):", "                 return self.levelMap[value.upper()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid raid level: %s') % value)))"]]], "module-name": "pykickstart.commands.raid"}, "25": {"op-name": "replace_Gt_with_In", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 419, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -286,7 +286,7 @@", "         rd.lineno = self.lineno", "         rd.device = self._getDevice(rd.device)", "         rd.mountpoint = ns.mntpoint[0]", "-        if (len(ns.partitions) > 0):", "+        if (len(ns.partitions) in 0):", "             rd.members = ns.partitions", "         if (rd in self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))"]]], "module-name": "pykickstart.commands.raid"}, "209": {"op-name": "replace_In_with_IsNot", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 424, in parse\nUserWarning: A RAID device with the name 0 has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -288,7 +288,7 @@", "         rd.mountpoint = ns.mntpoint[0]", "         if (len(ns.partitions) > 0):", "             rd.members = ns.partitions", "-        if (rd in self.dataList()):", "+        if (rd is not self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))"]]], "module-name": "pykickstart.commands.raid"}, "177": {"op-name": "replace_In_with_GtE", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.raid\", line 310, in level_cb\nTypeError: unorderable types: str() >= dict()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2300, in _get_value\n    raise ArgumentError(action, msg % args)\nargparse.ArgumentError: argument --level: invalid level_cb value: 'RAID0'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 387, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1766, in parse_known_args\n    self.error(str(err))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 249, in error\n    raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nargument --level: invalid level_cb value: 'RAID0'\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -246,7 +246,7 @@", "                 return value", " ", "         def level_cb(value):", "-            if (value.upper() in self.levelMap):", "+            if (value.upper() >= self.levelMap):", "                 return self.levelMap[value.upper()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid raid level: %s') % value)))"]]], "module-name": "pykickstart.commands.raid"}, "227": {"op-name": "replace_Gt_with_GtE", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 77, in runTest\n    \"raid / --device=0 --level=RAID6 --useexisting%s\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 406, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMembers may not be specified for preexisting RAID device\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -279,7 +279,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "-        elif ((len(ns.partitions) > 0) and ns.preexist):", "+        elif ((len(ns.partitions) >= 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)"]]], "module-name": "pykickstart.commands.raid"}, "76": {"op-name": "boolean_replacer", "result-type": "normal", "occurrence": 12, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "boolean_replacer", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 556, "occurrence": 12, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 227, in runTest\n    \"raid / --device=0 --level=RAID1 --encrypted --escrowcert=\\\"http://x/y\\\" raid.01 raid.02\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[40 chars]--escrowcert=\"http://x/y\" --backuppassphrase raid.01 raid.02\\n' != 'raid[40 chars]--escrowcert=\"http://x/y\" raid.01 raid.02\\n'\n- raid / --device=0 --level=RAID1 --encrypted --escrowcert=\"http://x/y\" --backuppassphrase raid.01 raid.02\n?                                                                       -------------------\n+ raid / --device=0 --level=RAID1 --encrypted --escrowcert=\"http://x/y\" raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -374,7 +374,7 @@", "     def _getParser(self):", "         op = F9_Raid._getParser(self)", "         op.add_argument('--escrowcert', metavar='<url>', version=F12, help='\\n                        Load an X.509 certificate from ``<url>``. Store the\\n                        data encryption key of this partition, encrypted using\\n                        the certificate, as a file in ``/root``. Only relevant\\n                        if ``--encrypted`` is specified as well.')", "-        op.add_argument('--backuppassphrase', action='store_true', default=False, version=F12, help='\\n                        Only relevant if ``--escrowcert`` is specified as well.\\n                        In addition to storing the data encryption key, generate\\n                        a random passphrase and add it to this partition. Then\\n                        store the passphrase, encrypted using the certificate\\n                        specified by ``--escrowcert``, as a file in ``/root``.\\n                        If more than one LUKS volume uses ``--backuppassphrase``,\\n                        the same passphrase will be used for all such volumes.\\n                        ')", "+        op.add_argument('--backuppassphrase', action='store_true', default=True, version=F12, help='\\n                        Only relevant if ``--escrowcert`` is specified as well.\\n                        In addition to storing the data encryption key, generate\\n                        a random passphrase and add it to this partition. Then\\n                        store the passphrase, encrypted using the certificate\\n                        specified by ``--escrowcert``, as a file in ``/root``.\\n                        If more than one LUKS volume uses ``--backuppassphrase``,\\n                        the same passphrase will be used for all such volumes.\\n                        ')", "         return op", " ", " class F13_Raid(F12_Raid):"]]], "module-name": "pykickstart.commands.raid"}, "17": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 11, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 403, "occurrence": 11, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 404, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPartitions required for raid\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -277,7 +277,7 @@", "             ns.preexist = True", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "-        elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "+        elif ((len(ns.partitions) == 1) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "         elif ((len(ns.partitions) > 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))"]]], "module-name": "pykickstart.commands.raid"}, "46": {"op-name": "replace_Eq_with_LtE", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 120, in runTest\n    self.assertFalse(rd != rd)\n  File \"pykickstart.commands.raid\", line 52, in __ne__\nTypeError: unorderable types: F12_RaidData() <= F12_RaidData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -29,7 +29,7 @@", "         return (self.device == y.device)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self <= y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.raid"}, "190": {"op-name": "replace_Gt_with_IsNot", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -286,7 +286,7 @@", "         rd.lineno = self.lineno", "         rd.device = self._getDevice(rd.device)", "         rd.mountpoint = ns.mntpoint[0]", "-        if (len(ns.partitions) > 0):", "+        if (len(ns.partitions) is not 0):", "             rd.members = ns.partitions", "         if (rd in self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))"]]], "module-name": "pykickstart.commands.raid"}, "220": {"op-name": "replace_In_with_NotEq", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_NotEq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -350,7 +350,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' != action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(F7)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "193": {"op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 raid.01\n+ raid / --device=0 --level=RAID0 raid.01\n?                   ++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -37,7 +37,7 @@", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "-        if (self.level != ''):", "+        if (self.level == ''):", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.raid"}, "145": {"op-name": "replace_Eq_with_Gt", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 118, in runTest\n    self.assertTrue(rd == rd)\n  File \"pykickstart.commands.raid\", line 49, in __eq__\nTypeError: unorderable types: NoneType() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.device == y.device)", "+        return (self.device > y.device)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.raid"}, "197": {"op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 6, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Eq", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 6, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[50 chars]s-per-inode=4096 --encrypted --passphrase=\"\" raid.01 raid.02\\n' != 'raid[50 chars]s-per-inode=4096 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --bytes-per-inode=4096 --encrypted --passphrase=\"\" raid.01 raid.02\n?                                                                                    ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --bytes-per-inode=4096 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -95,7 +95,7 @@", "         retval = FC5_RaidData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase == ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "7": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 65, "occurrence": 1, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --spares=0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --spares=0 raid.01\n?                                 -----------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -41,7 +41,7 @@", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.spares != 0):", "+        if (self.spares != 1):", "             retval += (' --spares=%d' % self.spares)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "module-name": "pykickstart.commands.raid"}, "35": {"op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 129, in runTest\n    self.assertEqual(rd._getArgsAsStr(), \"\")\nAssertionError: ' --level=' != ''\n-  --level=\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -37,7 +37,7 @@", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "-        if (self.level != ''):", "+        if (self.level >= ''):", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.raid"}, "150": {"op-name": "replace_Eq_with_NotEq", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 118, in runTest\n    self.assertTrue(rd == rd)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.device == y.device)", "+        return (self.device != y.device)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.raid"}, "121": {"op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 5, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Gt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -78,7 +78,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_RaidData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode > 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "154": {"op-name": "replace_Eq_with_NotEq", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_NotEq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 77, in runTest\n    \"raid / --device=0 --level=RAID6 --useexisting%s\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 430, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nDevice required for preexisting RAID device\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -292,7 +292,7 @@", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))", "-        if (rd.preexist and (rd.device == '')):", "+        if (rd.preexist and (rd.device != '')):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='Device required for preexisting RAID device'))", "         return rd", " "]]], "module-name": "pykickstart.commands.raid"}, "139": {"op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 11, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_In", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 11, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 401, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -275,7 +275,7 @@", "             extra = []", "         if (not ns.format):", "             ns.preexist = True", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))"]]], "module-name": "pykickstart.commands.raid"}, "217": {"op-name": "replace_In_with_NotEq", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 107, in runTest\n    self.assert_parse_error(\"raid / --level=47 --device=md0 raid.01 raid.02\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 387, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.raid\", line 311, in level_cb\nKeyError: '47'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -246,7 +246,7 @@", "                 return value", " ", "         def level_cb(value):", "-            if (value.upper() in self.levelMap):", "+            if (value.upper() != self.levelMap):", "                 return self.levelMap[value.upper()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid raid level: %s') % value)))"]]], "module-name": "pykickstart.commands.raid"}, "57": {"op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 5, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_NotIn", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.raid\", line 74, in __str__\n  File \"pykickstart.commands.raid\", line 110, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -78,7 +78,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_RaidData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode not in 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "147": {"op-name": "replace_Eq_with_Gt", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 416, in parse\n  File \"pykickstart.commands.raid\", line 384, in _getDevice\nValueError: invalid literal for int() with base 10: 'md0'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -240,7 +240,7 @@", "     def _getParser(self):", " ", "         def device_cb(value):", "-            if (value[0:2] == 'md'):", "+            if (value[0:2] > 'md'):", "                 return value[2:]", "             else:", "                 return value"]]], "module-name": "pykickstart.commands.raid"}, "236": {"op-name": "replace_Eq_with_GtE", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 286, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 278, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 273, in runTest\n    F13_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 246, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 115, in runTest\n    \"raid / --device=root --level=RAID1 raid.01 raid.02 raid.03\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=ot --level=RAID1 raid.01 raid.02 raid.03\\n' != 'raid / --device=root --level=RAID1 raid.01 raid.02 raid.03\\n'\n- raid / --device=ot --level=RAID1 raid.01 raid.02 raid.03\n+ raid / --device=root --level=RAID1 raid.01 raid.02 raid.03\n?                 ++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -240,7 +240,7 @@", "     def _getParser(self):", " ", "         def device_cb(value):", "-            if (value[0:2] == 'md'):", "+            if (value[0:2] >= 'md'):", "                 return value[2:]", "             else:", "                 return value"]]], "module-name": "pykickstart.commands.raid"}, "126": {"op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 10, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Gt", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 10, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -172,7 +172,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_RaidData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label > ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "94": {"op-name": "replace_In_with_LtE", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.raid\", line 310, in level_cb\nTypeError: unorderable types: str() <= dict()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2300, in _get_value\n    raise ArgumentError(action, msg % args)\nargparse.ArgumentError: argument --level: invalid level_cb value: 'RAID0'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 387, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1766, in parse_known_args\n    self.error(str(err))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 249, in error\n    raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nargument --level: invalid level_cb value: 'RAID0'\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -246,7 +246,7 @@", "                 return value", " ", "         def level_cb(value):", "-            if (value.upper() in self.levelMap):", "+            if (value.upper() <= self.levelMap):", "                 return self.levelMap[value.upper()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid raid level: %s') % value)))"]]], "module-name": "pykickstart.commands.raid"}, "173": {"op-name": "replace_Eq_with_IsNot", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 120, in runTest\n    self.assertFalse(rd != rd)\nAssertionError: True is not false\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -29,7 +29,7 @@", "         return (self.device == y.device)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is not y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.raid"}, "102": {"op-name": "replace_Eq_with_Lt", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 101, in runTest\n    self.assert_parse_error(\"raid / --level=0 --device=md0\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -277,7 +277,7 @@", "             ns.preexist = True", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "-        elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "+        elif ((len(ns.partitions) < 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "         elif ((len(ns.partitions) > 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))"]]], "module-name": "pykickstart.commands.raid"}, "176": {"op-name": "replace_Eq_with_IsNot", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_IsNot", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 77, in runTest\n    \"raid / --device=0 --level=RAID6 --useexisting%s\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 430, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nDevice required for preexisting RAID device\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -292,7 +292,7 @@", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))", "-        if (rd.preexist and (rd.device == '')):", "+        if (rd.preexist and (rd.device is not '')):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='Device required for preexisting RAID device'))", "         return rd", " "]]], "module-name": "pykickstart.commands.raid"}, "122": {"op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 6, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Gt", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 6, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -95,7 +95,7 @@", "         retval = FC5_RaidData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase > ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "44": {"op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 11, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_GtE", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 11, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 402, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for raid\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -275,7 +275,7 @@", "             extra = []", "         if (not ns.format):", "             ns.preexist = True", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) >= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))"]]], "module-name": "pykickstart.commands.raid"}, "106": {"op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 raid.01\n+ raid / --device=0 --level=RAID0 raid.01\n?                   ++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -37,7 +37,7 @@", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "-        if (self.level != ''):", "+        if (self.level < ''):", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.raid"}, "81": {"op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --fstype=\"\" --level=RAID0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --fstype=\"\" --level=RAID0 raid.01\n?                  ------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -35,7 +35,7 @@", "         retval = ''", "         if (self.device != ''):", "             retval += (' --device=%s' % self.device)", "-        if (self.fstype != ''):", "+        if (self.fstype is ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if (self.level != ''):", "             retval += (' --level=%s' % self.level.upper())"]]], "module-name": "pykickstart.commands.raid"}, "3": {"op-name": "replace_Eq_with_Is", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 416, in parse\n  File \"pykickstart.commands.raid\", line 384, in _getDevice\nValueError: invalid literal for int() with base 10: 'md0'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -240,7 +240,7 @@", "     def _getParser(self):", " ", "         def device_cb(value):", "-            if (value[0:2] == 'md'):", "+            if (value[0:2] is 'md'):", "                 return value[2:]", "             else:", "                 return value"]]], "module-name": "pykickstart.commands.raid"}, "223": {"op-name": "replace_In_with_Lt", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 423, in parse\nTypeError: unorderable types: F12_RaidData() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -288,7 +288,7 @@", "         rd.mountpoint = ns.mntpoint[0]", "         if (len(ns.partitions) > 0):", "             rd.members = ns.partitions", "-        if (rd in self.dataList()):", "+        if (rd < self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))"]]], "module-name": "pykickstart.commands.raid"}, "188": {"op-name": "replace_Gt_with_Is", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0\n+ raid / --device=0 --level=RAID0 raid.01\n?                                ++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -286,7 +286,7 @@", "         rd.lineno = self.lineno", "         rd.device = self._getDevice(rd.device)", "         rd.mountpoint = ns.mntpoint[0]", "-        if (len(ns.partitions) > 0):", "+        if (len(ns.partitions) is 0):", "             rd.members = ns.partitions", "         if (rd in self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))"]]], "module-name": "pykickstart.commands.raid"}, "166": {"op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 11, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_LtE", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 11, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 402, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for raid\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -275,7 +275,7 @@", "             extra = []", "         if (not ns.format):", "             ns.preexist = True", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) <= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))"]]], "module-name": "pykickstart.commands.raid"}, "24": {"op-name": "replace_Gt_with_In", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 405, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -279,7 +279,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "-        elif ((len(ns.partitions) > 0) and ns.preexist):", "+        elif ((len(ns.partitions) in 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)"]]], "module-name": "pykickstart.commands.raid"}, "87": {"op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 7, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Is", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 7, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --fsprofile=\"\" raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --fsprofile=\"\" raid.01\n?                                 ---------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -115,7 +115,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F7_RaidData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile is ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.raid"}, "86": {"op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 6, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Is", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 6, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[50 chars]s-per-inode=4096 --encrypted --passphrase=\"\" raid.01 raid.02\\n' != 'raid[50 chars]s-per-inode=4096 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --bytes-per-inode=4096 --encrypted --passphrase=\"\" raid.01 raid.02\n?                                                                                    ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --bytes-per-inode=4096 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -95,7 +95,7 @@", "         retval = FC5_RaidData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase is ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "114": {"op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 10, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Lt", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 10, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 282, in runTest\n    \"raid / --device=0 --level=RAID1 --label=ROOT raid.01 raid.02\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID1 raid.01 raid.02\\n' != 'raid / --device=0 --level=RAID1 --label=ROOT raid.01 raid.02\\n'\n- raid / --device=0 --level=RAID1 raid.01 raid.02\n+ raid / --device=0 --level=RAID1 --label=ROOT raid.01 raid.02\n?                                 +++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -172,7 +172,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_RaidData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label < ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "92": {"op-name": "replace_Gt_with_Eq", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 77, in runTest\n    \"raid / --device=0 --level=RAID6 --useexisting%s\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 406, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMembers may not be specified for preexisting RAID device\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -279,7 +279,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "-        elif ((len(ns.partitions) > 0) and ns.preexist):", "+        elif ((len(ns.partitions) == 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)"]]], "module-name": "pykickstart.commands.raid"}, "107": {"op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 66, in runTest\n    \"raid / --device=2 --level=RAID5 --spares=2%s raid.01 raid.02 raid.03\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=2 --level=RAID5 raid.01 raid.02 raid.03\\n' != 'raid / --device=2 --level=RAID5 --spares=2 raid.01 raid.02 raid.03\\n'\n- raid / --device=2 --level=RAID5 raid.01 raid.02 raid.03\n+ raid / --device=2 --level=RAID5 --spares=2 raid.01 raid.02 raid.03\n?                                 +++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -41,7 +41,7 @@", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.spares != 0):", "+        if (self.spares < 0):", "             retval += (' --spares=%d' % self.spares)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "module-name": "pykickstart.commands.raid"}, "219": {"op-name": "replace_In_with_NotEq", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -332,7 +332,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' != action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(RHEL5)))", "                 break", "         op.add_argument('--encrypted', action='store_true', default=False, version=RHEL5, help='\\n                        Specify that this RAID device should be encrypted.\\n                        ')"]]], "module-name": "pykickstart.commands.raid"}, "22": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 16, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 500, "occurrence": 16, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -343,7 +343,7 @@", "     removedKeywords = FC5_Raid.removedKeywords", "     removedAttrs = FC5_Raid.removedAttrs", " ", "-    def __init__(self, writePriority=131, *args, **kwargs):", "+    def __init__(self, writePriority=132, *args, **kwargs):", "         FC5_Raid.__init__(self, writePriority, *args, **kwargs)", "         self.levelMap.update({'RAID10': 'RAID10', '10': 'RAID10'})", " "]]], "module-name": "pykickstart.commands.raid"}, "103": {"op-name": "replace_Eq_with_Lt", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Lt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 77, in runTest\n    \"raid / --device=0 --level=RAID6 --useexisting%s\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 429, in parse\nTypeError: unorderable types: int() < str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -292,7 +292,7 @@", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))", "-        if (rd.preexist and (rd.device == '')):", "+        if (rd.preexist and (rd.device < '')):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='Device required for preexisting RAID device'))", "         return rd", " "]]], "module-name": "pykickstart.commands.raid"}, "178": {"op-name": "replace_In_with_GtE", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 423, in parse\nTypeError: unorderable types: F12_RaidData() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -288,7 +288,7 @@", "         rd.mountpoint = ns.mntpoint[0]", "         if (len(ns.partitions) > 0):", "             rd.members = ns.partitions", "-        if (rd in self.dataList()):", "+        if (rd >= self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))"]]], "module-name": "pykickstart.commands.raid"}, "222": {"op-name": "replace_In_with_Lt", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.raid\", line 310, in level_cb\nTypeError: unorderable types: str() < dict()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2300, in _get_value\n    raise ArgumentError(action, msg % args)\nargparse.ArgumentError: argument --level: invalid level_cb value: 'RAID0'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 387, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1766, in parse_known_args\n    self.error(str(err))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 249, in error\n    raise KickstartParseError(formatErrorMsg(self.lineno, msg=message))\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nargument --level: invalid level_cb value: 'RAID0'\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -246,7 +246,7 @@", "                 return value", " ", "         def level_cb(value):", "-            if (value.upper() in self.levelMap):", "+            if (value.upper() < self.levelMap):", "                 return self.levelMap[value.upper()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid raid level: %s') % value)))"]]], "module-name": "pykickstart.commands.raid"}, "18": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 12, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 405, "occurrence": 12, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -279,7 +279,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "-        elif ((len(ns.partitions) > 0) and ns.preexist):", "+        elif ((len(ns.partitions) > 1) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)"]]], "module-name": "pykickstart.commands.raid"}, "56": {"op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_NotIn", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -64,7 +64,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_RaidData._getArgsAsStr(self)", "-        if (self.fsopts != ''):", "+        if (self.fsopts not in ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "158": {"op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --spares=0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --spares=0 raid.01\n?                                 -----------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -41,7 +41,7 @@", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.spares != 0):", "+        if (self.spares <= 0):", "             retval += (' --spares=%d' % self.spares)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "module-name": "pykickstart.commands.raid"}, "184": {"op-name": "replace_In_with_Is", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -332,7 +332,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' is action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(RHEL5)))", "                 break", "         op.add_argument('--encrypted', action='store_true', default=False, version=RHEL5, help='\\n                        Specify that this RAID device should be encrypted.\\n                        ')"]]], "module-name": "pykickstart.commands.raid"}, "138": {"op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 10, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_In", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 10, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 278, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 273, in runTest\n    F13_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 246, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --label= raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --label= raid.01\n?                                 ---------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -172,7 +172,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_RaidData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label in ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "175": {"op-name": "replace_Eq_with_IsNot", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_IsNot", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 404, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPartitions required for raid\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -277,7 +277,7 @@", "             ns.preexist = True", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "-        elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "+        elif ((len(ns.partitions) is not 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "         elif ((len(ns.partitions) > 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))"]]], "module-name": "pykickstart.commands.raid"}, "88": {"op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 8, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Is", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 8, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[27 chars]3\" --level=RAID1 --encrypted --passphrase=\"\" raid.01 raid.02\\n' != 'raid[27 chars]3\" --level=RAID1 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted --passphrase=\"\" raid.01 raid.02\n?                                                             ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -119,7 +119,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase is ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "96": {"op-name": "replace_In_with_LtE", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 37, in runTest\n    if \"--bytes-per-inode\" in self.optionList:\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 138, in optionList\n    parser = self.getParser(self.command)._getParser()\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.raid\", line 469, in __init__\n  File \"pykickstart.commands.raid\", line 292, in __init__\n  File \"pykickstart.commands.raid\", line 476, in _getParser\nTypeError: unorderable types: str() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -332,7 +332,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' <= action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(RHEL5)))", "                 break", "         op.add_argument('--encrypted', action='store_true', default=False, version=RHEL5, help='\\n                        Specify that this RAID device should be encrypted.\\n                        ')"]]], "module-name": "pykickstart.commands.raid"}, "115": {"op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 11, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Lt", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 11, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -275,7 +275,7 @@", "             extra = []", "         if (not ns.format):", "             ns.preexist = True", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) < 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))"]]], "module-name": "pykickstart.commands.raid"}, "168": {"op-name": "replace_In_with_Eq", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nAttributeError: 'list' object has no attribute 'device'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 141, in runTest\n    \"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nraid / --device=md0 --level=0 raid.01 raid.02\nraid /usr --device=md1 --level=0 raid.01 raid.02\n: 'list' object has no attribute 'device'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -288,7 +288,7 @@", "         rd.mountpoint = ns.mntpoint[0]", "         if (len(ns.partitions) > 0):", "             rd.members = ns.partitions", "-        if (rd in self.dataList()):", "+        if (rd == self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))"]]], "module-name": "pykickstart.commands.raid"}, "9": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 110, "occurrence": 3, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -78,7 +78,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_RaidData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 1)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "20": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 14, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 419, "occurrence": 14, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0\n+ raid / --device=0 --level=RAID0 raid.01\n?                                ++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -286,7 +286,7 @@", "         rd.lineno = self.lineno", "         rd.device = self._getDevice(rd.device)", "         rd.mountpoint = ns.mntpoint[0]", "-        if (len(ns.partitions) > 0):", "+        if (len(ns.partitions) > 1):", "             rd.members = ns.partitions", "         if (rd in self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))"]]], "module-name": "pykickstart.commands.raid"}, "132": {"op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_In", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --fsoptions=\"\" raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --fsoptions=\"\" raid.01\n?                                 ---------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -64,7 +64,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_RaidData._getArgsAsStr(self)", "-        if (self.fsopts != ''):", "+        if (self.fsopts in ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "100": {"op-name": "replace_Eq_with_Lt", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 120, in runTest\n    self.assertFalse(rd != rd)\n  File \"pykickstart.commands.raid\", line 52, in __ne__\nTypeError: unorderable types: F12_RaidData() < F12_RaidData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -29,7 +29,7 @@", "         return (self.device == y.device)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self < y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.raid"}, "146": {"op-name": "replace_Eq_with_Gt", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 120, in runTest\n    self.assertFalse(rd != rd)\n  File \"pykickstart.commands.raid\", line 52, in __ne__\nTypeError: unorderable types: F12_RaidData() > F12_RaidData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -29,7 +29,7 @@", "         return (self.device == y.device)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self > y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.raid"}, "230": {"op-name": "replace_Eq_with_In", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 120, in runTest\n    self.assertFalse(rd != rd)\n  File \"pykickstart.commands.raid\", line 52, in __ne__\nTypeError: argument of type 'F12_RaidData' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -29,7 +29,7 @@", "         return (self.device == y.device)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self in y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.raid"}, "51": {"op-name": "replace_Gt_with_NotEq", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -286,7 +286,7 @@", "         rd.lineno = self.lineno", "         rd.device = self._getDevice(rd.device)", "         rd.mountpoint = ns.mntpoint[0]", "-        if (len(ns.partitions) > 0):", "+        if (len(ns.partitions) != 0):", "             rd.members = ns.partitions", "         if (rd in self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))"]]], "module-name": "pykickstart.commands.raid"}, "208": {"op-name": "replace_In_with_IsNot", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 107, in runTest\n    self.assert_parse_error(\"raid / --level=47 --device=md0 raid.01 raid.02\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 387, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.raid\", line 311, in level_cb\nKeyError: '47'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -246,7 +246,7 @@", "                 return value", " ", "         def level_cb(value):", "-            if (value.upper() in self.levelMap):", "+            if (value.upper() is not self.levelMap):", "                 return self.levelMap[value.upper()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid raid level: %s') % value)))"]]], "module-name": "pykickstart.commands.raid"}, "218": {"op-name": "replace_In_with_NotEq", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 424, in parse\nUserWarning: A RAID device with the name 0 has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -288,7 +288,7 @@", "         rd.mountpoint = ns.mntpoint[0]", "         if (len(ns.partitions) > 0):", "             rd.members = ns.partitions", "-        if (rd in self.dataList()):", "+        if (rd != self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))"]]], "module-name": "pykickstart.commands.raid"}, "128": {"op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.raid\", line 74, in __str__\n  File \"pykickstart.commands.raid\", line 175, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 151, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 108, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 92, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 57, in _getArgsAsStr\nTypeError: 'in <string>' requires string as left operand, not int\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -33,7 +33,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.device != ''):", "+        if (self.device in ''):", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.raid"}, "213": {"op-name": "replace_Gt_with_LtE", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 77, in runTest\n    \"raid / --device=0 --level=RAID6 --useexisting%s\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 406, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMembers may not be specified for preexisting RAID device\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -279,7 +279,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "-        elif ((len(ns.partitions) > 0) and ns.preexist):", "+        elif ((len(ns.partitions) <= 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)"]]], "module-name": "pykickstart.commands.raid"}, "143": {"op-name": "replace_In_with_NotIn", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -350,7 +350,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' not in action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(F7)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "63": {"op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 11, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_NotIn", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 11, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 401, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -275,7 +275,7 @@", "             extra = []", "         if (not ns.format):", "             ns.preexist = True", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) not in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))"]]], "module-name": "pykickstart.commands.raid"}, "118": {"op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -37,7 +37,7 @@", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "-        if (self.level != ''):", "+        if (self.level > ''):", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.raid"}, "117": {"op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -35,7 +35,7 @@", "         retval = ''", "         if (self.device != ''):", "             retval += (' --device=%s' % self.device)", "-        if (self.fstype != ''):", "+        if (self.fstype > ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if (self.level != ''):", "             retval += (' --level=%s' % self.level.upper())"]]], "module-name": "pykickstart.commands.raid"}, "47": {"op-name": "replace_Eq_with_LtE", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 53, in runTest\n    \"raid / --device=0 --level=RAID1%s raid.01 raid.02 raid.03\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 416, in parse\n  File \"pykickstart.commands.raid\", line 384, in _getDevice\nValueError: invalid literal for int() with base 10: ''\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -240,7 +240,7 @@", "     def _getParser(self):", " ", "         def device_cb(value):", "-            if (value[0:2] == 'md'):", "+            if (value[0:2] <= 'md'):", "                 return value[2:]", "             else:", "                 return value"]]], "module-name": "pykickstart.commands.raid"}, "23": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 17, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 571, "occurrence": 17, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -381,7 +381,7 @@", "     removedKeywords = F12_Raid.removedKeywords", "     removedAttrs = F12_Raid.removedAttrs", " ", "-    def __init__(self, writePriority=131, *args, **kwargs):", "+    def __init__(self, writePriority=132, *args, **kwargs):", "         F12_Raid.__init__(self, writePriority, *args, **kwargs)", "         self.levelMap.update({'RAID4': 'RAID4', '4': 'RAID4'})", " "]]], "module-name": "pykickstart.commands.raid"}, "180": {"op-name": "replace_In_with_GtE", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 37, in runTest\n    if \"--bytes-per-inode\" in self.optionList:\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 138, in optionList\n    parser = self.getParser(self.command)._getParser()\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.raid\", line 501, in __init__\n  File \"pykickstart.commands.raid\", line 292, in __init__\n  File \"pykickstart.commands.raid\", line 549, in _getParser\n  File \"pykickstart.commands.raid\", line 522, in _getParser\n  File \"pykickstart.commands.raid\", line 508, in _getParser\nTypeError: unorderable types: str() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -350,7 +350,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' >= action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(F7)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "127": {"op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 11, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Gt", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 11, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -275,7 +275,7 @@", "             extra = []", "         if (not ns.format):", "             ns.preexist = True", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))"]]], "module-name": "pykickstart.commands.raid"}, "221": {"op-name": "replace_In_with_NotEq", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_NotEq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -388,7 +388,7 @@", "     def _getParser(self):", "         op = F12_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' != action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID4\" level was added.' % versionToLongString(F13)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "196": {"op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 5, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Eq", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 raid.01\\n' != 'raid / --device=0 --level=RAID0 --bytes-per-inode=4096 raid.01\\n'\n- raid / --device=0 --level=RAID0 raid.01\n+ raid / --device=0 --level=RAID0 --bytes-per-inode=4096 raid.01\n?                                 +++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -78,7 +78,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_RaidData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode == 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "97": {"op-name": "replace_In_with_LtE", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 37, in runTest\n    if \"--bytes-per-inode\" in self.optionList:\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 138, in optionList\n    parser = self.getParser(self.command)._getParser()\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.raid\", line 501, in __init__\n  File \"pykickstart.commands.raid\", line 292, in __init__\n  File \"pykickstart.commands.raid\", line 549, in _getParser\n  File \"pykickstart.commands.raid\", line 522, in _getParser\n  File \"pykickstart.commands.raid\", line 508, in _getParser\nTypeError: unorderable types: str() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -350,7 +350,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' <= action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(F7)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "110": {"op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 6, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Lt", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 6, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 180, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted --passphrase=\\\"asdf\\\" raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[54 chars]r-inode=4096 --encrypted raid.01 raid.02\\n' != 'raid[54 chars]r-inode=4096 --encrypted --passphrase=\"asdf\" raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --bytes-per-inode=4096 --encrypted raid.01 raid.02\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --bytes-per-inode=4096 --encrypted --passphrase=\"asdf\" raid.01 raid.02\n?                                                                                    ++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -95,7 +95,7 @@", "         retval = FC5_RaidData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase < ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "60": {"op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 8, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_NotIn", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 8, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -119,7 +119,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase not in ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "165": {"op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 10, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_LtE", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 10, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 278, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 273, in runTest\n    F13_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 246, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --label= raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --label= raid.01\n?                                 ---------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -172,7 +172,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_RaidData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label <= ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "29": {"op-name": "replace_In_with_Gt", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 37, in runTest\n    if \"--bytes-per-inode\" in self.optionList:\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 138, in optionList\n    parser = self.getParser(self.command)._getParser()\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.raid\", line 501, in __init__\n  File \"pykickstart.commands.raid\", line 292, in __init__\n  File \"pykickstart.commands.raid\", line 549, in _getParser\n  File \"pykickstart.commands.raid\", line 522, in _getParser\n  File \"pykickstart.commands.raid\", line 508, in _getParser\nTypeError: unorderable types: str() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -350,7 +350,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' > action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(F7)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "105": {"op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 72, in runTest\n    \"raid / --device=0 --fstype=\\\"ASDF\\\" --level=RAID6%s raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID6 raid.01 raid.02\\n' != 'raid / --device=0 --fstype=\"ASDF\" --level=RAID6 raid.01 raid.02\\n'\n- raid / --device=0 --level=RAID6 raid.01 raid.02\n+ raid / --device=0 --fstype=\"ASDF\" --level=RAID6 raid.01 raid.02\n?                  ++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -35,7 +35,7 @@", "         retval = ''", "         if (self.device != ''):", "             retval += (' --device=%s' % self.device)", "-        if (self.fstype != ''):", "+        if (self.fstype < ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if (self.level != ''):", "             retval += (' --level=%s' % self.level.upper())"]]], "module-name": "pykickstart.commands.raid"}, "71": {"op-name": "boolean_replacer", "result-type": "normal", "occurrence": 7, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "boolean_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 367, "occurrence": 7, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 406, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMembers may not be specified for preexisting RAID device\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -256,7 +256,7 @@", "         op.add_argument('--device', type=device_cb, required=True, version=FC3, help=\"\\n                        Name of the RAID device to use (such as 'fedora-root'\\n                        or 'home'). As of Fedora 19, RAID devices are no longer\\n                        referred to by names like 'md0'. If you have an old\\n                        (v0.90 metadata) array that you cannot assign a name to,\\n                        you can specify the array by a filesystem label or UUID\\n                        (eg: --device=LABEL=fedora-root).\")", "         op.add_argument('--fstype', version=FC3, help='\\n                        Sets the file system type for the RAID array. Valid\\n                        values include ext4, ext3, ext2, btrfs, swap, and vfat.\\n                        Other filesystems may be valid depending on command\\n                        line arguments passed to anaconda to enable other\\n                        filesystems.')", "         op.add_argument('--level', type=level_cb, version=FC3, help=('\\n                        RAID level to use %s.' % set(self.levelMap.values())))", "-        op.add_argument('--noformat', dest='format', action='store_false', default=True, version=FC3, help='\\n                        Use an existing RAID device and do not format the RAID\\n                        array.')", "+        op.add_argument('--noformat', dest='format', action='store_false', default=False, version=FC3, help='\\n                        Use an existing RAID device and do not format the RAID\\n                        array.')", "         op.add_argument('--spares', type=int, default=0, version=FC3, help='\\n                        Specifies the number of spare drives allocated for the\\n                        RAID array. Spare drives are used to rebuild the array\\n                        in case of drive failure.')", "         op.add_argument('--useexisting', dest='preexist', action='store_true', default=False, version=FC3, help='\\n                        Use an existing RAID device and reformat it.')", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "189": {"op-name": "replace_Gt_with_IsNot", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -279,7 +279,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "-        elif ((len(ns.partitions) > 0) and ns.preexist):", "+        elif ((len(ns.partitions) is not 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)"]]], "module-name": "pykickstart.commands.raid"}, "187": {"op-name": "replace_Gt_with_Is", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 77, in runTest\n    \"raid / --device=0 --level=RAID6 --useexisting%s\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 406, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMembers may not be specified for preexisting RAID device\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -279,7 +279,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "-        elif ((len(ns.partitions) > 0) and ns.preexist):", "+        elif ((len(ns.partitions) is 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)"]]], "module-name": "pykickstart.commands.raid"}, "198": {"op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 7, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Eq", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 7, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --fsprofile=\"\" raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --fsprofile=\"\" raid.01\n?                                 ---------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -115,7 +115,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F7_RaidData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile == ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.raid"}, "130": {"op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 raid.01\n+ raid / --device=0 --level=RAID0 raid.01\n?                   ++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -37,7 +37,7 @@", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "-        if (self.level != ''):", "+        if (self.level in ''):", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.raid"}, "98": {"op-name": "replace_In_with_LtE", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_LtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 246, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 37, in runTest\n    if \"--bytes-per-inode\" in self.optionList:\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 138, in optionList\n    parser = self.getParser(self.command)._getParser()\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.raid\", line 572, in __init__\n  File \"pykickstart.commands.raid\", line 501, in __init__\n  File \"pykickstart.commands.raid\", line 292, in __init__\n  File \"pykickstart.commands.raid\", line 579, in _getParser\nTypeError: unorderable types: str() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -388,7 +388,7 @@", "     def _getParser(self):", "         op = F12_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' <= action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID4\" level was added.' % versionToLongString(F13)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "67": {"op-name": "boolean_replacer", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 121, "occurrence": 3, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 126, in runTest\n    self.assertEqual(rd._getArgsAsStr(), \" --bytes-per-inode=4096\")\nAssertionError: ' --bytes-per-inode=4096 --encrypted' != ' --bytes-per-inode=4096'\n-  --bytes-per-inode=4096 --encrypted\n?                        ------------\n+  --bytes-per-inode=4096\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -88,7 +88,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         FC5_RaidData.__init__(self, *args, **kwargs)", "-        self.encrypted = kwargs.get('encrypted', False)", "+        self.encrypted = kwargs.get('encrypted', True)", "         self.passphrase = kwargs.get('passphrase', '')", " ", "     def _getArgsAsStr(self):"]]], "module-name": "pykickstart.commands.raid"}, "77": {"op-name": "break_continue_replacement", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "break_continue_replacement", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 482, "occurrence": 0, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -334,7 +334,7 @@", "         for action in op._actions:", "             if ('--level' in action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(RHEL5)))", "-                break", "+                continue", "         op.add_argument('--encrypted', action='store_true', default=False, version=RHEL5, help='\\n                        Specify that this RAID device should be encrypted.\\n                        ')", "         op.add_argument('--passphrase', version=RHEL5, help='\\n                        Specify the passphrase to use when encrypting this RAID\\n                        device. Without the above --encrypted option, this\\n                        option does nothing. If no passphrase is specified, the\\n                        default system-wide one is used, or the installer will\\n                        stop and prompt if there is no default.')", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "182": {"op-name": "replace_In_with_Is", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 387, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.raid\", line 313, in level_cb\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nInvalid raid level: RAID0\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -246,7 +246,7 @@", "                 return value", " ", "         def level_cb(value):", "-            if (value.upper() in self.levelMap):", "+            if (value.upper() is self.levelMap):", "                 return self.levelMap[value.upper()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid raid level: %s') % value)))"]]], "module-name": "pykickstart.commands.raid"}, "99": {"op-name": "replace_Eq_with_Lt", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 118, in runTest\n    self.assertTrue(rd == rd)\n  File \"pykickstart.commands.raid\", line 49, in __eq__\nTypeError: unorderable types: NoneType() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.device == y.device)", "+        return (self.device < y.device)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.raid"}, "45": {"op-name": "replace_Eq_with_LtE", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 118, in runTest\n    self.assertTrue(rd == rd)\n  File \"pykickstart.commands.raid\", line 49, in __eq__\nTypeError: unorderable types: NoneType() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.device == y.device)", "+        return (self.device <= y.device)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.raid"}, "183": {"op-name": "replace_In_with_Is", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 146, in runTest\n    \"\"\", UserWarning)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -288,7 +288,7 @@", "         rd.mountpoint = ns.mntpoint[0]", "         if (len(ns.partitions) > 0):", "             rd.members = ns.partitions", "-        if (rd in self.dataList()):", "+        if (rd is self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))"]]], "module-name": "pykickstart.commands.raid"}, "152": {"op-name": "replace_Eq_with_NotEq", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 416, in parse\n  File \"pykickstart.commands.raid\", line 384, in _getDevice\nValueError: invalid literal for int() with base 10: 'md0'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -240,7 +240,7 @@", "     def _getParser(self):", " ", "         def device_cb(value):", "-            if (value[0:2] == 'md'):", "+            if (value[0:2] != 'md'):", "                 return value[2:]", "             else:", "                 return value"]]], "module-name": "pykickstart.commands.raid"}, "73": {"op-name": "boolean_replacer", "result-type": "normal", "occurrence": 9, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "boolean_replacer", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 399, "occurrence": 9, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 83, in runTest\n    \"raid / --device=0 --level=RAID6 --noformat --useexisting%s\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 404, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPartitions required for raid\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -274,7 +274,7 @@", "             ns.partitions = extra", "             extra = []", "         if (not ns.format):", "-            ns.preexist = True", "+            ns.preexist = False", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):"]]], "module-name": "pykickstart.commands.raid"}, "163": {"op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 8, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_LtE", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 8, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[27 chars]3\" --level=RAID1 --encrypted --passphrase=\"\" raid.01 raid.02\\n' != 'raid[27 chars]3\" --level=RAID1 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted --passphrase=\"\" raid.01 raid.02\n?                                                             ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -119,7 +119,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase <= ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "32": {"op-name": "replace_Gt_with_NotIn", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 419, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -286,7 +286,7 @@", "         rd.lineno = self.lineno", "         rd.device = self._getDevice(rd.device)", "         rd.mountpoint = ns.mntpoint[0]", "-        if (len(ns.partitions) > 0):", "+        if (len(ns.partitions) not in 0):", "             rd.members = ns.partitions", "         if (rd in self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))"]]], "module-name": "pykickstart.commands.raid"}, "232": {"op-name": "replace_Eq_with_In", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 403, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -277,7 +277,7 @@", "             ns.preexist = True", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "-        elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "+        elif ((len(ns.partitions) in 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "         elif ((len(ns.partitions) > 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))"]]], "module-name": "pykickstart.commands.raid"}, "229": {"op-name": "replace_Eq_with_In", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 118, in runTest\n    self.assertTrue(rd == rd)\n  File \"pykickstart.commands.raid\", line 49, in __eq__\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.device == y.device)", "+        return (self.device in y.device)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.raid"}, "171": {"op-name": "replace_In_with_Eq", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Eq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -388,7 +388,7 @@", "     def _getParser(self):", "         op = F12_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' == action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID4\" level was added.' % versionToLongString(F13)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "129": {"op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --fstype=\"\" --level=RAID0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --fstype=\"\" --level=RAID0 raid.01\n?                  ------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -35,7 +35,7 @@", "         retval = ''", "         if (self.device != ''):", "             retval += (' --device=%s' % self.device)", "-        if (self.fstype != ''):", "+        if (self.fstype in ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if (self.level != ''):", "             retval += (' --level=%s' % self.level.upper())"]]], "module-name": "pykickstart.commands.raid"}, "174": {"op-name": "replace_Eq_with_IsNot", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 53, in runTest\n    \"raid / --device=0 --level=RAID1%s raid.01 raid.02 raid.03\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 416, in parse\n  File \"pykickstart.commands.raid\", line 384, in _getDevice\nValueError: invalid literal for int() with base 10: ''\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -240,7 +240,7 @@", "     def _getParser(self):", " ", "         def device_cb(value):", "-            if (value[0:2] == 'md'):", "+            if (value[0:2] is not 'md'):", "                 return value[2:]", "             else:", "                 return value"]]], "module-name": "pykickstart.commands.raid"}, "104": {"op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.raid\", line 74, in __str__\n  File \"pykickstart.commands.raid\", line 175, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 151, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 108, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 92, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 57, in _getArgsAsStr\nTypeError: unorderable types: int() < str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -33,7 +33,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.device != ''):", "+        if (self.device < ''):", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.raid"}, "72": {"op-name": "boolean_replacer", "result-type": "normal", "occurrence": 8, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "boolean_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 375, "occurrence": 8, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 406, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMembers may not be specified for preexisting RAID device\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -258,7 +258,7 @@", "         op.add_argument('--level', type=level_cb, version=FC3, help=('\\n                        RAID level to use %s.' % set(self.levelMap.values())))", "         op.add_argument('--noformat', dest='format', action='store_false', default=True, version=FC3, help='\\n                        Use an existing RAID device and do not format the RAID\\n                        array.')", "         op.add_argument('--spares', type=int, default=0, version=FC3, help='\\n                        Specifies the number of spare drives allocated for the\\n                        RAID array. Spare drives are used to rebuild the array\\n                        in case of drive failure.')", "-        op.add_argument('--useexisting', dest='preexist', action='store_true', default=False, version=FC3, help='\\n                        Use an existing RAID device and reformat it.')", "+        op.add_argument('--useexisting', dest='preexist', action='store_true', default=True, version=FC3, help='\\n                        Use an existing RAID device and reformat it.')", "         return op", " ", "     def _getDevice(self, s):"]]], "module-name": "pykickstart.commands.raid"}, "21": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 15, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 468, "occurrence": 15, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -325,7 +325,7 @@", "     removedKeywords = FC5_Raid.removedKeywords", "     removedAttrs = FC5_Raid.removedAttrs", " ", "-    def __init__(self, writePriority=131, *args, **kwargs):", "+    def __init__(self, writePriority=132, *args, **kwargs):", "         FC5_Raid.__init__(self, writePriority, *args, **kwargs)", "         self.levelMap.update({'RAID10': 'RAID10', '10': 'RAID10'})", " "]]], "module-name": "pykickstart.commands.raid"}, "131": {"op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.raid\", line 74, in __str__\n  File \"pykickstart.commands.raid\", line 175, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 151, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 108, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 92, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 65, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -41,7 +41,7 @@", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.spares != 0):", "+        if (self.spares in 0):", "             retval += (' --spares=%d' % self.spares)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "module-name": "pykickstart.commands.raid"}, "119": {"op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -41,7 +41,7 @@", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.spares != 0):", "+        if (self.spares > 0):", "             retval += (' --spares=%d' % self.spares)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "module-name": "pykickstart.commands.raid"}, "85": {"op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 5, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Is", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 raid.01\\n' != 'raid / --device=0 --level=RAID0 --bytes-per-inode=4096 raid.01\\n'\n- raid / --device=0 --level=RAID0 raid.01\n+ raid / --device=0 --level=RAID0 --bytes-per-inode=4096 raid.01\n?                                 +++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -78,7 +78,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_RaidData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode is 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "231": {"op-name": "replace_Eq_with_In", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -240,7 +240,7 @@", "     def _getParser(self):", " ", "         def device_cb(value):", "-            if (value[0:2] == 'md'):", "+            if (value[0:2] in 'md'):", "                 return value[2:]", "             else:", "                 return value"]]], "module-name": "pykickstart.commands.raid"}, "74": {"op-name": "boolean_replacer", "result-type": "normal", "occurrence": 10, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "boolean_replacer", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 485, "occurrence": 10, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --bytes-per-inode=4096 --encrypted raid.01\\n' != 'raid / --device=0 --level=RAID0 --bytes-per-inode=4096 raid.01\\n'\n- raid / --device=0 --level=RAID0 --bytes-per-inode=4096 --encrypted raid.01\n?                                                        ------------\n+ raid / --device=0 --level=RAID0 --bytes-per-inode=4096 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -335,7 +335,7 @@", "             if ('--level' in action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(RHEL5)))", "                 break", "-        op.add_argument('--encrypted', action='store_true', default=False, version=RHEL5, help='\\n                        Specify that this RAID device should be encrypted.\\n                        ')", "+        op.add_argument('--encrypted', action='store_true', default=True, version=RHEL5, help='\\n                        Specify that this RAID device should be encrypted.\\n                        ')", "         op.add_argument('--passphrase', version=RHEL5, help='\\n                        Specify the passphrase to use when encrypting this RAID\\n                        device. Without the above --encrypted option, this\\n                        option does nothing. If no passphrase is specified, the\\n                        default system-wide one is used, or the installer will\\n                        stop and prompt if there is no default.')", "         return op", " "]]], "module-name": "pykickstart.commands.raid"}, "202": {"op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 11, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Eq", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 11, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 402, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for raid\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -275,7 +275,7 @@", "             extra = []", "         if (not ns.format):", "             ns.preexist = True", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))"]]], "module-name": "pykickstart.commands.raid"}, "95": {"op-name": "replace_In_with_LtE", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 423, in parse\nTypeError: unorderable types: F12_RaidData() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -288,7 +288,7 @@", "         rd.mountpoint = ns.mntpoint[0]", "         if (len(ns.partitions) > 0):", "             rd.members = ns.partitions", "-        if (rd in self.dataList()):", "+        if (rd <= self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))"]]], "module-name": "pykickstart.commands.raid"}, "172": {"op-name": "replace_Eq_with_IsNot", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 118, in runTest\n    self.assertTrue(rd == rd)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.device == y.device)", "+        return (self.device is not y.device)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.raid"}, "28": {"op-name": "replace_In_with_Gt", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 37, in runTest\n    if \"--bytes-per-inode\" in self.optionList:\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 138, in optionList\n    parser = self.getParser(self.command)._getParser()\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.raid\", line 469, in __init__\n  File \"pykickstart.commands.raid\", line 292, in __init__\n  File \"pykickstart.commands.raid\", line 476, in _getParser\nTypeError: unorderable types: str() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -332,7 +332,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' > action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(RHEL5)))", "                 break", "         op.add_argument('--encrypted', action='store_true', default=False, version=RHEL5, help='\\n                        Specify that this RAID device should be encrypted.\\n                        ')"]]], "module-name": "pykickstart.commands.raid"}, "215": {"op-name": "replace_Gt_with_Lt", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 103, in runTest\n    self.assert_parse_error(\"raid / --level=0 --device=md0 --useexisting raid.01 raid.02\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -279,7 +279,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "-        elif ((len(ns.partitions) > 0) and ns.preexist):", "+        elif ((len(ns.partitions) < 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)"]]], "module-name": "pykickstart.commands.raid"}, "225": {"op-name": "replace_In_with_Lt", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 37, in runTest\n    if \"--bytes-per-inode\" in self.optionList:\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 138, in optionList\n    parser = self.getParser(self.command)._getParser()\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.raid\", line 501, in __init__\n  File \"pykickstart.commands.raid\", line 292, in __init__\n  File \"pykickstart.commands.raid\", line 549, in _getParser\n  File \"pykickstart.commands.raid\", line 522, in _getParser\n  File \"pykickstart.commands.raid\", line 508, in _getParser\nTypeError: unorderable types: str() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -350,7 +350,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' < action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(F7)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "201": {"op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 10, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Eq", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 10, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 278, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 273, in runTest\n    F13_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 246, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --label= raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --label= raid.01\n?                                 ---------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -172,7 +172,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_RaidData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label == ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "39": {"op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 6, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_GtE", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 6, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[50 chars]s-per-inode=4096 --encrypted --passphrase=\"\" raid.01 raid.02\\n' != 'raid[50 chars]s-per-inode=4096 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --bytes-per-inode=4096 --encrypted --passphrase=\"\" raid.01 raid.02\n?                                                                                    ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --bytes-per-inode=4096 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -95,7 +95,7 @@", "         retval = FC5_RaidData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase >= ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "83": {"op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --spares=0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --spares=0 raid.01\n?                                 -----------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -41,7 +41,7 @@", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.spares != 0):", "+        if (self.spares is 0):", "             retval += (' --spares=%d' % self.spares)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "module-name": "pykickstart.commands.raid"}, "27": {"op-name": "replace_In_with_Gt", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 423, in parse\nTypeError: unorderable types: F12_RaidData() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -288,7 +288,7 @@", "         rd.mountpoint = ns.mntpoint[0]", "         if (len(ns.partitions) > 0):", "             rd.members = ns.partitions", "-        if (rd in self.dataList()):", "+        if (rd > self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))"]]], "module-name": "pykickstart.commands.raid"}, "59": {"op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 7, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_NotIn", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 7, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -115,7 +115,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F7_RaidData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile not in ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.raid"}, "179": {"op-name": "replace_In_with_GtE", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 37, in runTest\n    if \"--bytes-per-inode\" in self.optionList:\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 138, in optionList\n    parser = self.getParser(self.command)._getParser()\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.raid\", line 469, in __init__\n  File \"pykickstart.commands.raid\", line 292, in __init__\n  File \"pykickstart.commands.raid\", line 476, in _getParser\nTypeError: unorderable types: str() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -332,7 +332,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' >= action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(RHEL5)))", "                 break", "         op.add_argument('--encrypted', action='store_true', default=False, version=RHEL5, help='\\n                        Specify that this RAID device should be encrypted.\\n                        ')"]]], "module-name": "pykickstart.commands.raid"}, "70": {"op-name": "boolean_replacer", "result-type": "normal", "occurrence": 6, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "boolean_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 350, "occurrence": 6, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 91, in runTest\n    self.assert_parse_error(\"raid part.01 part.01\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 416, in parse\n  File \"pykickstart.commands.raid\", line 384, in _getDevice\nTypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -253,7 +253,7 @@", "         op = KSOptionParser(prog='raid', description='\\n                            Assembles a software RAID device.', epilog='\\n                            The following example shows how to create a RAID\\n                            level 1 partition for /, and a RAID level 5 for\\n                            /usr, assuming there are three disks on the\\n                            system. It also creates three swap partitions, one\\n                            on each drive::\\n\\n                                part raid.01 --size=6000 --ondisk=sda\\n                                part raid.02 --size=6000 --ondisk=sdb\\n                                part raid.03 --size=6000 --ondisk=sdc\\n\\n                                part swap1 --size=512 --ondisk=sda\\n                                part swap2 --size=512 --ondisk=sdb\\n                                part swap3 --size=512 --ondisk=sdc\\n\\n                                part raid.11 --size=6000 --ondisk=sda\\n                                part raid.12 --size=6000 --ondisk=sdb\\n                                part raid.13 --size=6000 --ondisk=sdc\\n\\n                                raid / --level=1 --device=md0 raid.01 raid.02 raid.03\\n                                raid /usr --level=5 --device=md1 raid.11 raid.12 raid.13\\n                            ', version=FC3)", "         op.add_argument('mntpoint', metavar='<mntpoint>', nargs=1, version=FC3, help='\\n                        Location where the RAID file system is mounted. If it\\n                        is /, the RAID level must be 1 unless a boot partition\\n                        (/boot) is present. If a boot partition is present, the\\n                        /boot partition must be level 1 and the root (/)\\n                        partition can be any of the available types.')", "         op.add_argument('partitions', metavar='<partitions*>', nargs='*', version=FC3, help='\\n                        The software raid partitions lists the RAID identifiers\\n                        to add to the RAID array.')", "-        op.add_argument('--device', type=device_cb, required=True, version=FC3, help=\"\\n                        Name of the RAID device to use (such as 'fedora-root'\\n                        or 'home'). As of Fedora 19, RAID devices are no longer\\n                        referred to by names like 'md0'. If you have an old\\n                        (v0.90 metadata) array that you cannot assign a name to,\\n                        you can specify the array by a filesystem label or UUID\\n                        (eg: --device=LABEL=fedora-root).\")", "+        op.add_argument('--device', type=device_cb, required=False, version=FC3, help=\"\\n                        Name of the RAID device to use (such as 'fedora-root'\\n                        or 'home'). As of Fedora 19, RAID devices are no longer\\n                        referred to by names like 'md0'. If you have an old\\n                        (v0.90 metadata) array that you cannot assign a name to,\\n                        you can specify the array by a filesystem label or UUID\\n                        (eg: --device=LABEL=fedora-root).\")", "         op.add_argument('--fstype', version=FC3, help='\\n                        Sets the file system type for the RAID array. Valid\\n                        values include ext4, ext3, ext2, btrfs, swap, and vfat.\\n                        Other filesystems may be valid depending on command\\n                        line arguments passed to anaconda to enable other\\n                        filesystems.')", "         op.add_argument('--level', type=level_cb, version=FC3, help=('\\n                        RAID level to use %s.' % set(self.levelMap.values())))", "         op.add_argument('--noformat', dest='format', action='store_false', default=True, version=FC3, help='\\n                        Use an existing RAID device and do not format the RAID\\n                        array.')"]]], "module-name": "pykickstart.commands.raid"}, "136": {"op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 8, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_In", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 8, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[27 chars]3\" --level=RAID1 --encrypted --passphrase=\"\" raid.01 raid.02\\n' != 'raid[27 chars]3\" --level=RAID1 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted --passphrase=\"\" raid.01 raid.02\n?                                                             ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -119,7 +119,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase in ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "13": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 7, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 305, "occurrence": 7, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 416, in parse\n  File \"pykickstart.commands.raid\", line 384, in _getDevice\nValueError: invalid literal for int() with base 10: ''\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -241,7 +241,7 @@", " ", "         def device_cb(value):", "             if (value[0:2] == 'md'):", "-                return value[2:]", "+                return value[3:]", "             else:", "                 return value", " "]]], "module-name": "pykickstart.commands.raid"}, "170": {"op-name": "replace_In_with_Eq", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Eq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -350,7 +350,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' == action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(F7)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "68": {"op-name": "boolean_replacer", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "boolean_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 147, "occurrence": 4, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 129, in runTest\n    self.assertEqual(rd._getArgsAsStr(), \"\")\nAssertionError: ' --encrypted' != ''\n-  --encrypted\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -110,7 +110,7 @@", "         F7_RaidData.__init__(self, *args, **kwargs)", "         self.deleteRemovedAttrs()", "         self.fsprofile = kwargs.get('fsprofile', '')", "-        self.encrypted = kwargs.get('encrypted', False)", "+        self.encrypted = kwargs.get('encrypted', True)", "         self.passphrase = kwargs.get('passphrase', '')", " ", "     def _getArgsAsStr(self):"]]], "module-name": "pykickstart.commands.raid"}, "101": {"op-name": "replace_Eq_with_Lt", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 416, in parse\n  File \"pykickstart.commands.raid\", line 384, in _getDevice\nValueError: invalid literal for int() with base 10: 'md0'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -240,7 +240,7 @@", "     def _getParser(self):", " ", "         def device_cb(value):", "-            if (value[0:2] == 'md'):", "+            if (value[0:2] < 'md'):", "                 return value[2:]", "             else:", "                 return value"]]], "module-name": "pykickstart.commands.raid"}, "55": {"op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.raid\", line 74, in __str__\n  File \"pykickstart.commands.raid\", line 175, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 151, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 108, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 92, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 65, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -41,7 +41,7 @@", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.spares != 0):", "+        if (self.spares not in 0):", "             retval += (' --spares=%d' % self.spares)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "module-name": "pykickstart.commands.raid"}, "12": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 6, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 304, "occurrence": 6, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 416, in parse\n  File \"pykickstart.commands.raid\", line 384, in _getDevice\nValueError: invalid literal for int() with base 10: 'md0'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -240,7 +240,7 @@", "     def _getParser(self):", " ", "         def device_cb(value):", "-            if (value[0:2] == 'md'):", "+            if (value[0:3] == 'md'):", "                 return value[2:]", "             else:", "                 return value"]]], "module-name": "pykickstart.commands.raid"}, "148": {"op-name": "replace_Eq_with_Gt", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 404, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPartitions required for raid\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -277,7 +277,7 @@", "             ns.preexist = True", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "-        elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "+        elif ((len(ns.partitions) > 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "         elif ((len(ns.partitions) > 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))"]]], "module-name": "pykickstart.commands.raid"}, "58": {"op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 6, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_NotIn", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 6, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -95,7 +95,7 @@", "         retval = FC5_RaidData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase not in ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "50": {"op-name": "replace_Gt_with_NotEq", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -279,7 +279,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "-        elif ((len(ns.partitions) > 0) and ns.preexist):", "+        elif ((len(ns.partitions) != 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))", "         rd = self.dataClass()", "         self.set_to_obj(ns, rd)"]]], "module-name": "pykickstart.commands.raid"}, "133": {"op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 5, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_In", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.raid\", line 74, in __str__\n  File \"pykickstart.commands.raid\", line 110, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -78,7 +78,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_RaidData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode in 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "142": {"op-name": "replace_In_with_NotIn", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -332,7 +332,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' not in action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(RHEL5)))", "                 break", "         op.add_argument('--encrypted', action='store_true', default=False, version=RHEL5, help='\\n                        Specify that this RAID device should be encrypted.\\n                        ')"]]], "module-name": "pykickstart.commands.raid"}, "65": {"op-name": "boolean_replacer", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 41, "occurrence": 1, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 129, in runTest\n    self.assertEqual(rd._getArgsAsStr(), \"\")\nAssertionError: ' --useexisting' != ''\n-  --useexisting\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -19,7 +19,7 @@", "         self.level = kwargs.get('level', '')", "         self.format = kwargs.get('format', True)", "         self.spares = kwargs.get('spares', 0)", "-        self.preexist = kwargs.get('preexist', False)", "+        self.preexist = kwargs.get('preexist', True)", "         self.mountpoint = kwargs.get('mountpoint', '')", "         self.members = kwargs.get('members', [])", " "]]], "module-name": "pykickstart.commands.raid"}, "108": {"op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Lt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 156, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID6 --fsoptions=\\\"these=are,options\\\"%s raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[31 chars]-level=RAID6 raid.01 raid.02\\n' != 'raid[31 chars]-level=RAID6 --fsoptions=\"these=are,options\" raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID6 raid.01 raid.02\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID6 --fsoptions=\"these=are,options\" raid.01 raid.02\n?                                                 ++++++++++++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -64,7 +64,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_RaidData._getArgsAsStr(self)", "-        if (self.fsopts != ''):", "+        if (self.fsopts < ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "144": {"op-name": "replace_In_with_NotIn", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_NotIn", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -388,7 +388,7 @@", "     def _getParser(self):", "         op = F12_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' not in action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID4\" level was added.' % versionToLongString(F13)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "33": {"op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.raid\", line 74, in __str__\n  File \"pykickstart.commands.raid\", line 175, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 151, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 108, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 92, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 57, in _getArgsAsStr\nTypeError: unorderable types: int() >= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -33,7 +33,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.device != ''):", "+        if (self.device >= ''):", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.raid"}, "162": {"op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 7, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_LtE", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 7, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --fsprofile=\"\" raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --fsprofile=\"\" raid.01\n?                                 ---------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -115,7 +115,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F7_RaidData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile <= ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.raid"}, "210": {"op-name": "replace_In_with_IsNot", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -332,7 +332,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' is not action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(RHEL5)))", "                 break", "         op.add_argument('--encrypted', action='store_true', default=False, version=RHEL5, help='\\n                        Specify that this RAID device should be encrypted.\\n                        ')"]]], "module-name": "pykickstart.commands.raid"}, "237": {"op-name": "replace_Eq_with_GtE", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 404, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPartitions required for raid\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -277,7 +277,7 @@", "             ns.preexist = True", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "-        elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "+        elif ((len(ns.partitions) >= 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "         elif ((len(ns.partitions) > 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))"]]], "module-name": "pykickstart.commands.raid"}, "43": {"op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 10, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_GtE", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 10, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 278, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 273, in runTest\n    F13_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 246, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --label= raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --label= raid.01\n?                                 ---------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -172,7 +172,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_RaidData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label >= ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "156": {"op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --fstype=\"\" --level=RAID0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --fstype=\"\" --level=RAID0 raid.01\n?                  ------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -35,7 +35,7 @@", "         retval = ''", "         if (self.device != ''):", "             retval += (' --device=%s' % self.device)", "-        if (self.fstype != ''):", "+        if (self.fstype <= ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if (self.level != ''):", "             retval += (' --level=%s' % self.level.upper())"]]], "module-name": "pykickstart.commands.raid"}, "48": {"op-name": "replace_Eq_with_LtE", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -277,7 +277,7 @@", "             ns.preexist = True", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "-        elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "+        elif ((len(ns.partitions) <= 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "         elif ((len(ns.partitions) > 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))"]]], "module-name": "pykickstart.commands.raid"}, "157": {"op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 raid.01\n+ raid / --device=0 --level=RAID0 raid.01\n?                   ++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -37,7 +37,7 @@", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "-        if (self.level != ''):", "+        if (self.level <= ''):", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.raid"}, "42": {"op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 9, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_GtE", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 9, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[27 chars]3\" --level=RAID1 --encrypted --escrowcert=\"\" raid.01 raid.02\\n' != 'raid[27 chars]3\" --level=RAID1 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted --escrowcert=\"\" raid.01 raid.02\n?                                                             ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -135,7 +135,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_RaidData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert >= '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.raid"}, "54": {"op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -37,7 +37,7 @@", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "-        if (self.level != ''):", "+        if (self.level not in ''):", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.raid"}, "82": {"op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 raid.01\n+ raid / --device=0 --level=RAID0 raid.01\n?                   ++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -37,7 +37,7 @@", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "-        if (self.level != ''):", "+        if (self.level is ''):", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'"]]], "module-name": "pykickstart.commands.raid"}, "161": {"op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 6, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_LtE", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 6, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[50 chars]s-per-inode=4096 --encrypted --passphrase=\"\" raid.01 raid.02\\n' != 'raid[50 chars]s-per-inode=4096 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --bytes-per-inode=4096 --encrypted --passphrase=\"\" raid.01 raid.02\n?                                                                                    ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --bytes-per-inode=4096 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -95,7 +95,7 @@", "         retval = FC5_RaidData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase <= ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "120": {"op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Gt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -64,7 +64,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_RaidData._getArgsAsStr(self)", "-        if (self.fsopts != ''):", "+        if (self.fsopts > ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "52": {"op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.raid\", line 74, in __str__\n  File \"pykickstart.commands.raid\", line 175, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 151, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 108, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 92, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 57, in _getArgsAsStr\nTypeError: 'in <string>' requires string as left operand, not int\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -33,7 +33,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.device != ''):", "+        if (self.device not in ''):", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.raid"}, "62": {"op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 10, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_NotIn", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 10, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -172,7 +172,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_RaidData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label not in ''):", "             retval += (' --label=%s' % self.label)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "226": {"op-name": "replace_In_with_Lt", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Lt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 246, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 37, in runTest\n    if \"--bytes-per-inode\" in self.optionList:\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 138, in optionList\n    parser = self.getParser(self.command)._getParser()\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.raid\", line 572, in __init__\n  File \"pykickstart.commands.raid\", line 501, in __init__\n  File \"pykickstart.commands.raid\", line 292, in __init__\n  File \"pykickstart.commands.raid\", line 579, in _getParser\nTypeError: unorderable types: str() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -388,7 +388,7 @@", "     def _getParser(self):", "         op = F12_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' < action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID4\" level was added.' % versionToLongString(F13)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "140": {"op-name": "replace_In_with_NotIn", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 387, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.raid\", line 313, in level_cb\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nInvalid raid level: RAID0\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -246,7 +246,7 @@", "                 return value", " ", "         def level_cb(value):", "-            if (value.upper() in self.levelMap):", "+            if (value.upper() not in self.levelMap):", "                 return self.levelMap[value.upper()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid raid level: %s') % value)))"]]], "module-name": "pykickstart.commands.raid"}, "41": {"op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 8, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_GtE", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 8, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[27 chars]3\" --level=RAID1 --encrypted --passphrase=\"\" raid.01 raid.02\\n' != 'raid[27 chars]3\" --level=RAID1 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted --passphrase=\"\" raid.01 raid.02\n?                                                             ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -119,7 +119,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase >= ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "199": {"op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 8, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Eq", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 8, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[27 chars]3\" --level=RAID1 --encrypted --passphrase=\"\" raid.01 raid.02\\n' != 'raid[27 chars]3\" --level=RAID1 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted --passphrase=\"\" raid.01 raid.02\n?                                                             ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -119,7 +119,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase == ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "1": {"op-name": "replace_Eq_with_Is", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.device == y.device)", "+        return (self.device is y.device)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.raid"}, "8": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 105, "occurrence": 2, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 126, in runTest\n    self.assertEqual(rd._getArgsAsStr(), \" --bytes-per-inode=4096\")\nAssertionError: ' --bytes-per-inode=4097' != ' --bytes-per-inode=4096'\n-  --bytes-per-inode=4097\n?                       ^\n+  --bytes-per-inode=4096\n?                       ^\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -74,7 +74,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         FC4_RaidData.__init__(self, *args, **kwargs)", "-        self.bytesPerInode = kwargs.get('bytesPerInode', 4096)", "+        self.bytesPerInode = kwargs.get('bytesPerInode', 4097)", " ", "     def _getArgsAsStr(self):", "         retval = FC4_RaidData._getArgsAsStr(self)"]]], "module-name": "pykickstart.commands.raid"}, "40": {"op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 7, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_GtE", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 7, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --fsprofile=\"\" raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --fsprofile=\"\" raid.01\n?                                 ---------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -115,7 +115,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F7_RaidData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile >= ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.raid"}, "159": {"op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_LtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --fsoptions=\"\" raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --fsoptions=\"\" raid.01\n?                                 ---------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -64,7 +64,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_RaidData._getArgsAsStr(self)", "-        if (self.fsopts != ''):", "+        if (self.fsopts <= ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "206": {"op-name": "replace_Eq_with_NotIn", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 403, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -277,7 +277,7 @@", "             ns.preexist = True", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "-        elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "+        elif ((len(ns.partitions) not in 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "         elif ((len(ns.partitions) > 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))"]]], "module-name": "pykickstart.commands.raid"}, "64": {"op-name": "boolean_replacer", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 39, "occurrence": 0, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 129, in runTest\n    self.assertEqual(rd._getArgsAsStr(), \"\")\nAssertionError: ' --noformat' != ''\n-  --noformat\n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -17,7 +17,7 @@", "         self.device = kwargs.get('device', None)", "         self.fstype = kwargs.get('fstype', '')", "         self.level = kwargs.get('level', '')", "-        self.format = kwargs.get('format', True)", "+        self.format = kwargs.get('format', False)", "         self.spares = kwargs.get('spares', 0)", "         self.preexist = kwargs.get('preexist', False)", "         self.mountpoint = kwargs.get('mountpoint', '')"]]], "module-name": "pykickstart.commands.raid"}, "69": {"op-name": "boolean_replacer", "result-type": "normal", "occurrence": 5, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "boolean_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 172, "occurrence": 5, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -131,7 +131,7 @@", "         F9_RaidData.__init__(self, *args, **kwargs)", "         self.deleteRemovedAttrs()", "         self.escrowcert = kwargs.get('escrowcert', '')", "-        self.backuppassphrase = kwargs.get('backuppassphrase', False)", "+        self.backuppassphrase = kwargs.get('backuppassphrase', True)", " ", "     def _getArgsAsStr(self):", "         retval = F9_RaidData._getArgsAsStr(self)"]]], "module-name": "pykickstart.commands.raid"}, "207": {"op-name": "replace_Eq_with_NotIn", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_NotIn", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 77, in runTest\n    \"raid / --device=0 --level=RAID6 --useexisting%s\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 429, in parse\nTypeError: 'in <string>' requires string as left operand, not int\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -292,7 +292,7 @@", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))", "-        if (rd.preexist and (rd.device == '')):", "+        if (rd.preexist and (rd.device not in '')):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='Device required for preexisting RAID device'))", "         return rd", " "]]], "module-name": "pykickstart.commands.raid"}, "84": {"op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Is", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --fsoptions=\"\" raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --fsoptions=\"\" raid.01\n?                                 ---------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -64,7 +64,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_RaidData._getArgsAsStr(self)", "-        if (self.fsopts != ''):", "+        if (self.fsopts is ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "37": {"op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_GtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --fsoptions=\"\" raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --fsoptions=\"\" raid.01\n?                                 ---------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -64,7 +64,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_RaidData._getArgsAsStr(self)", "-        if (self.fsopts != ''):", "+        if (self.fsopts >= ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "78": {"op-name": "break_continue_replacement", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "break_continue_replacement", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 514, "occurrence": 1, "operator": "cosmic_ray.operators.break_continue.ReplaceBreakWithContinue"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -352,7 +352,7 @@", "         for action in op._actions:", "             if ('--level' in action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(F7)))", "-                break", "+                continue", "         return op", " ", " class F9_Raid(F7_Raid):"]]], "module-name": "pykickstart.commands.raid"}, "75": {"op-name": "boolean_replacer", "result-type": "normal", "occurrence": 11, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "boolean_replacer", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 534, "occurrence": 11, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --encrypted raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --encrypted raid.01\n?                                 ------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -363,7 +363,7 @@", "         op = F7_Raid._getParser(self)", "         op.add_argument('--bytes-per-inode', deprecated=F9)", "         op.add_argument('--fsprofile', version=F9, help='\\n                        Specifies a usage type to be passed to the program that\\n                        makes a filesystem on this partition. A usage type\\n                        defines a variety of tuning parameters to be used when\\n                        making a filesystem. For this option to work, the\\n                        filesystem must support the concept of usage types and\\n                        there must be a configuration file that lists valid\\n                        types. For ext2/3/4, this configuration file is\\n                        ``/etc/mke2fs.conf``.')", "-        op.add_argument('--encrypted', action='store_true', version=F9, default=False, help='\\n                        Specify that this RAID device should be encrypted.')", "+        op.add_argument('--encrypted', action='store_true', version=F9, default=True, help='\\n                        Specify that this RAID device should be encrypted.')", "         op.add_argument('--passphrase', version=F9, help='\\n                        Specify the passphrase to use when encrypting this RAID\\n                        device. Without the above --encrypted option, this option\\n                        does nothing. If no passphrase is specified, the default\\n                        system-wide one is used, or the installer will stop and\\n                        prompt if there is no default.')", "         return op", " "]]], "module-name": "pykickstart.commands.raid"}, "30": {"op-name": "replace_In_with_Gt", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Gt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 246, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 37, in runTest\n    if \"--bytes-per-inode\" in self.optionList:\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 138, in optionList\n    parser = self.getParser(self.command)._getParser()\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.raid\", line 572, in __init__\n  File \"pykickstart.commands.raid\", line 501, in __init__\n  File \"pykickstart.commands.raid\", line 292, in __init__\n  File \"pykickstart.commands.raid\", line 579, in _getParser\nTypeError: unorderable types: str() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -388,7 +388,7 @@", "     def _getParser(self):", "         op = F12_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' > action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID4\" level was added.' % versionToLongString(F13)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "16": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 10, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 401, "occurrence": 10, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 402, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for raid\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -275,7 +275,7 @@", "             extra = []", "         if (not ns.format):", "             ns.preexist = True", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) != 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "         elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))"]]], "module-name": "pykickstart.commands.raid"}, "11": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 5, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 304, "occurrence": 5, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 416, in parse\n  File \"pykickstart.commands.raid\", line 384, in _getDevice\nValueError: invalid literal for int() with base 10: 'md0'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -240,7 +240,7 @@", "     def _getParser(self):", " ", "         def device_cb(value):", "-            if (value[0:2] == 'md'):", "+            if (value[1:2] == 'md'):", "                 return value[2:]", "             else:", "                 return value"]]], "module-name": "pykickstart.commands.raid"}, "167": {"op-name": "replace_In_with_Eq", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 387, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1965, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1905, in consume_optional\n    take_action(action, args, option_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1817, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2258, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 2287, in _get_value\n    result = type_func(arg_string)\n  File \"pykickstart.commands.raid\", line 313, in level_cb\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nInvalid raid level: RAID0\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -246,7 +246,7 @@", "                 return value", " ", "         def level_cb(value):", "-            if (value.upper() in self.levelMap):", "+            if (value.upper() == self.levelMap):", "                 return self.levelMap[value.upper()]", "             else:", "                 raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid raid level: %s') % value)))"]]], "module-name": "pykickstart.commands.raid"}, "34": {"op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --fstype=\"\" --level=RAID0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --fstype=\"\" --level=RAID0 raid.01\n?                  ------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -35,7 +35,7 @@", "         retval = ''", "         if (self.device != ''):", "             retval += (' --device=%s' % self.device)", "-        if (self.fstype != ''):", "+        if (self.fstype >= ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if (self.level != ''):", "             retval += (' --level=%s' % self.level.upper())"]]], "module-name": "pykickstart.commands.raid"}, "216": {"op-name": "replace_Gt_with_Lt", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0\n+ raid / --device=0 --level=RAID0 raid.01\n?                                ++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -286,7 +286,7 @@", "         rd.lineno = self.lineno", "         rd.device = self._getDevice(rd.device)", "         rd.mountpoint = ns.mntpoint[0]", "-        if (len(ns.partitions) > 0):", "+        if (len(ns.partitions) < 0):", "             rd.members = ns.partitions", "         if (rd in self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))"]]], "module-name": "pykickstart.commands.raid"}, "38": {"op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 5, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_GtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -78,7 +78,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_RaidData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode >= 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "123": {"op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 7, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Gt", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 7, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -115,7 +115,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F7_RaidData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile > ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "module-name": "pykickstart.commands.raid"}, "116": {"op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.raid\", line 74, in __str__\n  File \"pykickstart.commands.raid\", line 175, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 151, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 108, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 92, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 57, in _getArgsAsStr\nTypeError: unorderable types: int() > str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -33,7 +33,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.device != ''):", "+        if (self.device > ''):", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.raid"}, "149": {"op-name": "replace_Eq_with_Gt", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Gt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 77, in runTest\n    \"raid / --device=0 --level=RAID6 --useexisting%s\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 429, in parse\nTypeError: unorderable types: int() > str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -292,7 +292,7 @@", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))", "-        if (rd.preexist and (rd.device == '')):", "+        if (rd.preexist and (rd.device > '')):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='Device required for preexisting RAID device'))", "         return rd", " "]]], "module-name": "pykickstart.commands.raid"}, "153": {"op-name": "replace_Eq_with_NotEq", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_NotEq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 404, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPartitions required for raid\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -277,7 +277,7 @@", "             ns.preexist = True", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "-        elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "+        elif ((len(ns.partitions) != 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "         elif ((len(ns.partitions) > 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))"]]], "module-name": "pykickstart.commands.raid"}, "169": {"op-name": "replace_In_with_Eq", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -332,7 +332,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' == action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(RHEL5)))", "                 break", "         op.add_argument('--encrypted', action='store_true', default=False, version=RHEL5, help='\\n                        Specify that this RAID device should be encrypted.\\n                        ')"]]], "module-name": "pykickstart.commands.raid"}, "124": {"op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 8, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Gt", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 8, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -119,7 +119,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase > ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "10": {"op-name": "number_replacer", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 281, "occurrence": 4, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -225,7 +225,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=131, *args, **kwargs):", "+    def __init__(self, writePriority=132, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.levelMap = {'RAID0': 'RAID0', '0': 'RAID0', 'RAID1': 'RAID1', '1': 'RAID1', 'RAID5': 'RAID5', '5': 'RAID5', 'RAID6': 'RAID6', '6': 'RAID6'}", "         self.raidList = kwargs.get('raidList', [])"]]], "module-name": "pykickstart.commands.raid"}, "113": {"op-name": "replace_NotEq_with_Lt", "result-type": "normal", "occurrence": 9, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Lt", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 9, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 227, in runTest\n    \"raid / --device=0 --level=RAID1 --encrypted --escrowcert=\\\"http://x/y\\\" raid.01 raid.02\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[21 chars]=RAID1 --encrypted raid.01 raid.02\\n' != 'raid[21 chars]=RAID1 --encrypted --escrowcert=\"http://x/y\" raid.01 raid.02\\n'\n- raid / --device=0 --level=RAID1 --encrypted raid.01 raid.02\n+ raid / --device=0 --level=RAID1 --encrypted --escrowcert=\"http://x/y\" raid.01 raid.02\n?                                             ++++++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -135,7 +135,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_RaidData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert < '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.raid"}, "238": {"op-name": "replace_Eq_with_GtE", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_GtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 77, in runTest\n    \"raid / --device=0 --level=RAID6 --useexisting%s\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 429, in parse\nTypeError: unorderable types: int() >= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -292,7 +292,7 @@", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))", "-        if (rd.preexist and (rd.device == '')):", "+        if (rd.preexist and (rd.device >= '')):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='Device required for preexisting RAID device'))", "         return rd", " "]]], "module-name": "pykickstart.commands.raid"}, "89": {"op-name": "replace_NotEq_with_Is", "result-type": "normal", "occurrence": 9, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Is", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 9, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[27 chars]3\" --level=RAID1 --encrypted --escrowcert=\"\" raid.01 raid.02\\n' != 'raid[27 chars]3\" --level=RAID1 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted --escrowcert=\"\" raid.01 raid.02\n?                                                             ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -135,7 +135,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_RaidData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert is '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.raid"}, "134": {"op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 6, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_In", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 6, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[50 chars]s-per-inode=4096 --encrypted --passphrase=\"\" raid.01 raid.02\\n' != 'raid[50 chars]s-per-inode=4096 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --bytes-per-inode=4096 --encrypted --passphrase=\"\" raid.01 raid.02\n?                                                                                    ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --bytes-per-inode=4096 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -95,7 +95,7 @@", "         retval = FC5_RaidData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase in ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "4": {"op-name": "replace_Eq_with_Is", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -277,7 +277,7 @@", "             ns.preexist = True", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'raid')))", "-        elif ((len(ns.partitions) == 0) and (not ns.preexist)):", "+        elif ((len(ns.partitions) is 0) and (not ns.preexist)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Partitions required for %s') % 'raid')))", "         elif ((len(ns.partitions) > 0) and ns.preexist):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Members may not be specified for preexisting RAID device')))"]]], "module-name": "pykickstart.commands.raid"}, "200": {"op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 9, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Eq", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 9, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[27 chars]3\" --level=RAID1 --encrypted --escrowcert=\"\" raid.01 raid.02\\n' != 'raid[27 chars]3\" --level=RAID1 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted --escrowcert=\"\" raid.01 raid.02\n?                                                             ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -135,7 +135,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_RaidData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert == '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.raid"}, "204": {"op-name": "replace_Eq_with_NotIn", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 120, in runTest\n    self.assertFalse(rd != rd)\n  File \"pykickstart.commands.raid\", line 52, in __ne__\nTypeError: argument of type 'F12_RaidData' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -29,7 +29,7 @@", "         return (self.device == y.device)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self not in y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "module-name": "pykickstart.commands.raid"}, "66": {"op-name": "boolean_replacer", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": 47, "occurrence": 2, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -25,7 +25,7 @@", " ", "     def __eq__(self, y):", "         if (not y):", "-            return False", "+            return True", "         return (self.device == y.device)", " ", "     def __ne__(self, y):"]]], "module-name": "pykickstart.commands.raid"}, "234": {"op-name": "replace_Eq_with_GtE", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 118, in runTest\n    self.assertTrue(rd == rd)\n  File \"pykickstart.commands.raid\", line 49, in __eq__\nTypeError: unorderable types: NoneType() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -26,7 +26,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.device == y.device)", "+        return (self.device >= y.device)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "module-name": "pykickstart.commands.raid"}, "185": {"op-name": "replace_In_with_Is", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -350,7 +350,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' is action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(F7)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "49": {"op-name": "replace_Eq_with_LtE", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_LtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 77, in runTest\n    \"raid / --device=0 --level=RAID6 --useexisting%s\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 429, in parse\nTypeError: unorderable types: int() <= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -292,7 +292,7 @@", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))", "-        if (rd.preexist and (rd.device == '')):", "+        if (rd.preexist and (rd.device <= '')):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='Device required for preexisting RAID device'))", "         return rd", " "]]], "module-name": "pykickstart.commands.raid"}, "93": {"op-name": "replace_Gt_with_Eq", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0\n+ raid / --device=0 --level=RAID0 raid.01\n?                                ++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -286,7 +286,7 @@", "         rd.lineno = self.lineno", "         rd.device = self._getDevice(rd.device)", "         rd.mountpoint = ns.mntpoint[0]", "-        if (len(ns.partitions) > 0):", "+        if (len(ns.partitions) == 0):", "             rd.members = ns.partitions", "         if (rd in self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))"]]], "module-name": "pykickstart.commands.raid"}, "195": {"op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Eq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --fsoptions=\"\" raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --fsoptions=\"\" raid.01\n?                                 ---------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -64,7 +64,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_RaidData._getArgsAsStr(self)", "-        if (self.fsopts != ''):", "+        if (self.fsopts == ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "155": {"op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 0, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.raid\", line 74, in __str__\n  File \"pykickstart.commands.raid\", line 175, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 151, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 108, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 92, in _getArgsAsStr\n  File \"pykickstart.commands.raid\", line 57, in _getArgsAsStr\nTypeError: unorderable types: int() <= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -33,7 +33,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.device != ''):", "+        if (self.device <= ''):", "             retval += (' --device=%s' % self.device)", "         if (self.fstype != ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)"]]], "module-name": "pykickstart.commands.raid"}, "36": {"op-name": "replace_NotEq_with_GtE", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 --spares=0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0 --spares=0 raid.01\n?                                 -----------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -41,7 +41,7 @@", "             retval += (' --level=%s' % self.level.upper())", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.spares != 0):", "+        if (self.spares >= 0):", "             retval += (' --spares=%d' % self.spares)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "module-name": "pykickstart.commands.raid"}, "160": {"op-name": "replace_NotEq_with_LtE", "result-type": "normal", "occurrence": 5, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_LtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0 raid.01\\n' != 'raid / --device=0 --level=RAID0 --bytes-per-inode=4096 raid.01\\n'\n- raid / --device=0 --level=RAID0 raid.01\n+ raid / --device=0 --level=RAID0 --bytes-per-inode=4096 raid.01\n?                                 +++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -78,7 +78,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_RaidData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode <= 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         return retval", " "]]], "module-name": "pykickstart.commands.raid"}, "125": {"op-name": "replace_NotEq_with_Gt", "result-type": "normal", "occurrence": 9, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Gt", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 9, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -135,7 +135,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_RaidData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert > '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.raid"}, "137": {"op-name": "replace_NotEq_with_In", "result-type": "normal", "occurrence": 9, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_In", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 9, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 172, in runTest\n    \"raid / --device=0 --fstype=\\\"ext3\\\" --level=RAID1%s --encrypted raid.01 raid.02\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid[27 chars]3\" --level=RAID1 --encrypted --escrowcert=\"\" raid.01 raid.02\\n' != 'raid[27 chars]3\" --level=RAID1 --encrypted raid.01 raid.02\\n'\n- raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted --escrowcert=\"\" raid.01 raid.02\n?                                                             ----------------\n+ raid / --device=0 --fstype=\"ext3\" --level=RAID1 --encrypted raid.01 raid.02\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -135,7 +135,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_RaidData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert in '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "module-name": "pykickstart.commands.raid"}, "211": {"op-name": "replace_In_with_IsNot", "result-type": "normal", "occurrence": 3, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_IsNot", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -350,7 +350,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' is not action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(F7)))", "                 break", "         return op"]]], "module-name": "pykickstart.commands.raid"}, "224": {"op-name": "replace_In_with_Lt", "result-type": "normal", "occurrence": 2, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 37, in runTest\n    if \"--bytes-per-inode\" in self.optionList:\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 138, in optionList\n    parser = self.getParser(self.command)._getParser()\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 151, in getParser\n    parser = self.handler().commands[cmd]\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 290, in __init__\n    self._registerCommands(mapping, dataMapping, commandUpdates, dataUpdates)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 400, in _registerCommands\n    cmdObj = cmdClass()\n  File \"pykickstart.commands.raid\", line 469, in __init__\n  File \"pykickstart.commands.raid\", line 292, in __init__\n  File \"pykickstart.commands.raid\", line 476, in _getParser\nTypeError: unorderable types: str() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -332,7 +332,7 @@", "     def _getParser(self):", "         op = FC5_Raid._getParser(self)", "         for action in op._actions:", "-            if ('--level' in action.option_strings):", "+            if ('--level' < action.option_strings):", "                 action.help += dedent(('\\n\\n                .. versionchanged:: %s\\n\\n                The \"RAID10\" level was added.' % versionToLongString(RHEL5)))", "                 break", "         op.add_argument('--encrypted', action='store_true', default=False, version=RHEL5, help='\\n                        Specify that this RAID device should be encrypted.\\n                        ')"]]], "module-name": "pykickstart.commands.raid"}, "228": {"op-name": "replace_Gt_with_GtE", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -286,7 +286,7 @@", "         rd.lineno = self.lineno", "         rd.device = self._getDevice(rd.device)", "         rd.mountpoint = ns.mntpoint[0]", "-        if (len(ns.partitions) > 0):", "+        if (len(ns.partitions) >= 0):", "             rd.members = ns.partitions", "         if (rd in self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))"]]], "module-name": "pykickstart.commands.raid"}, "233": {"op-name": "replace_Eq_with_In", "result-type": "normal", "occurrence": 4, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Eq_with_In", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 77, in runTest\n    \"raid / --device=0 --level=RAID6 --useexisting%s\\n\" % (self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 429, in parse\nTypeError: 'in <string>' requires string as left operand, not int\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -292,7 +292,7 @@", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))", "-        if (rd.preexist and (rd.device == '')):", "+        if (rd.preexist and (rd.device in '')):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='Device required for preexisting RAID device'))", "         return rd", " "]]], "module-name": "pykickstart.commands.raid"}, "214": {"op-name": "replace_Gt_with_LtE", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_Gt_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --level=RAID0\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --level=RAID0\n+ raid / --device=0 --level=RAID0 raid.01\n?                                ++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -286,7 +286,7 @@", "         rd.lineno = self.lineno", "         rd.device = self._getDevice(rd.device)", "         rd.mountpoint = ns.mntpoint[0]", "-        if (len(ns.partitions) > 0):", "+        if (len(ns.partitions) <= 0):", "             rd.members = ns.partitions", "         if (rd in self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))"]]], "module-name": "pykickstart.commands.raid"}, "141": {"op-name": "replace_In_with_NotIn", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_In_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.raid\", line 424, in parse\nUserWarning: A RAID device with the name 0 has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -288,7 +288,7 @@", "         rd.mountpoint = ns.mntpoint[0]", "         if (len(ns.partitions) > 0):", "             rd.members = ns.partitions", "-        if (rd in self.dataList()):", "+        if (rd not in self.dataList()):", "             warnings.warn((_('A RAID device with the name %s has already been defined.') % rd.device))", "         if ((not rd.preexist) and (not rd.level)):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg='RAID Partition defined without RAID level'))"]]], "module-name": "pykickstart.commands.raid"}, "53": {"op-name": "replace_NotEq_with_NotIn", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -35,7 +35,7 @@", "         retval = ''", "         if (self.device != ''):", "             retval += (' --device=%s' % self.device)", "-        if (self.fstype != ''):", "+        if (self.fstype not in ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if (self.level != ''):", "             retval += (' --level=%s' % self.level.upper())"]]], "module-name": "pykickstart.commands.raid"}, "192": {"op-name": "replace_NotEq_with_Eq", "result-type": "normal", "occurrence": 1, "command": ["cosmic-ray", "worker", "pykickstart.commands.raid", "replace_NotEq_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/raid.py"], "result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 219, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 206, in runTest\n    F7_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 200, in runTest\n    RHEL5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 192, in runTest\n    FC5_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 161, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 151, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/raid.py\", line 44, in runTest\n    \"raid / --device=0 --level=%s%s raid.01\\n\" % (level, self.bytesPerInode))\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'raid / --device=0 --fstype=\"\" --level=RAID0 raid.01\\n' != 'raid / --device=0 --level=RAID0 raid.01\\n'\n- raid / --device=0 --fstype=\"\" --level=RAID0 raid.01\n?                  ------------\n+ raid / --device=0 --level=RAID0 raid.01\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/raid.py", "@@ -35,7 +35,7 @@", "         retval = ''", "         if (self.device != ''):", "             retval += (' --device=%s' % self.device)", "-        if (self.fstype != ''):", "+        if (self.fstype == ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if (self.level != ''):", "             retval += (' --level=%s' % self.level.upper())"]]], "module-name": "pykickstart.commands.raid"}}}