{"work-items": {"29": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 28, in runTest\n    self.assertEqual(realm.discover_options, [\"--client-software=sssd\"])\nAssertionError: Lists differ: [] != ['--client-software=sssd']\n\nSecond list contains 1 additional elements.\nFirst extra element 0:\n--client-software=sssd\n\n- []\n+ ['--client-software=sssd']\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -40,7 +40,7 @@", "         self.discover_options = []", "         supported_discover_options = ('--client-software', '--server-software', '--membership-software')", "         for (o, a) in opts:", "-            if (o in supported_discover_options):", "+            if (o == supported_discover_options):", "                 self.discover_options.append(('%s=%s' % (o, a)))", " ", "     def _getCommandsAsStrings(self):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_In_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_In_with_Eq"}, "24": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 28, in runTest\n    self.assertEqual(realm.discover_options, [\"--client-software=sssd\"])\nAssertionError: Lists differ: ['--client-software=sssd', '--computer-ou=OU=blah'] != ['--client-software=sssd']\n\nFirst list contains 1 additional elements.\nFirst extra element 1:\n--computer-ou=OU=blah\n\n- ['--client-software=sssd', '--computer-ou=OU=blah']\n+ ['--client-software=sssd']\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -40,7 +40,7 @@", "         self.discover_options = []", "         supported_discover_options = ('--client-software', '--server-software', '--membership-software')", "         for (o, a) in opts:", "-            if (o in supported_discover_options):", "+            if (o != supported_discover_options):", "                 self.discover_options.append(('%s=%s' % (o, a)))", " ", "     def _getCommandsAsStrings(self):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_In_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_In_with_NotEq"}, "6": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -23,7 +23,7 @@", "         if (not args):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Missing realm command arguments')))", "         command = args.pop(0)", "-        if (command == 'join'):", "+        if (command is not 'join'):", "             self._parseJoin(args)", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Unsupported realm '%s' command\") % command)))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_Eq_with_IsNot"}, "25": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnsupported realm 'join' command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 18, in runTest\n    realm = self.assert_parse(\"realm join blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nUnsupported realm 'join' command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -23,7 +23,7 @@", "         if (not args):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Missing realm command arguments')))", "         command = args.pop(0)", "-        if (command == 'join'):", "+        if (command != 'join'):", "             self._parseJoin(args)", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Unsupported realm '%s' command\") % command)))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_Eq_with_NotEq"}, "18": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 28, in runTest\n    self.assertEqual(realm.discover_options, [\"--client-software=sssd\"])\nAssertionError: Lists differ: ['--computer-ou=OU=blah'] != ['--client-software=sssd']\n\nFirst differing element 0:\n--computer-ou=OU=blah\n--client-software=sssd\n\n- ['--computer-ou=OU=blah']\n+ ['--client-software=sssd']\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -40,7 +40,7 @@", "         self.discover_options = []", "         supported_discover_options = ('--client-software', '--server-software', '--membership-software')", "         for (o, a) in opts:", "-            if (o in supported_discover_options):", "+            if (o not in supported_discover_options):", "                 self.discover_options.append(('%s=%s' % (o, a)))", " ", "     def _getCommandsAsStrings(self):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_In_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_In_with_NotIn"}, "27": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 28, in runTest\n    self.assertEqual(realm.discover_options, [\"--client-software=sssd\"])\nAssertionError: Lists differ: [] != ['--client-software=sssd']\n\nSecond list contains 1 additional elements.\nFirst extra element 0:\n--client-software=sssd\n\n- []\n+ ['--client-software=sssd']\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -40,7 +40,7 @@", "         self.discover_options = []", "         supported_discover_options = ('--client-software', '--server-software', '--membership-software')", "         for (o, a) in opts:", "-            if (o in supported_discover_options):", "+            if (o is supported_discover_options):", "                 self.discover_options.append(('%s=%s' % (o, a)))", " ", "     def _getCommandsAsStrings(self):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_In_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_In_with_Is"}, "8": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -23,7 +23,7 @@", "         if (not args):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Missing realm command arguments')))", "         command = args.pop(0)", "-        if (command == 'join'):", "+        if (command in 'join'):", "             self._parseJoin(args)", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Unsupported realm '%s' command\") % command)))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_Eq_with_In"}, "28": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\nTypeError: unorderable types: str() >= tuple()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 25, in runTest\n    realm = self.assert_parse(\"realm join --client-software=sssd --computer-ou=OU=blah domain.example.com\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: str() >= tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -40,7 +40,7 @@", "         self.discover_options = []", "         supported_discover_options = ('--client-software', '--server-software', '--membership-software')", "         for (o, a) in opts:", "-            if (o in supported_discover_options):", "+            if (o >= supported_discover_options):", "                 self.discover_options.append(('%s=%s' % (o, a)))", " ", "     def _getCommandsAsStrings(self):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_In_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_In_with_GtE"}, "19": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\nTypeError: unorderable types: str() < tuple()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 25, in runTest\n    realm = self.assert_parse(\"realm join --client-software=sssd --computer-ou=OU=blah domain.example.com\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: str() < tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -40,7 +40,7 @@", "         self.discover_options = []", "         supported_discover_options = ('--client-software', '--server-software', '--membership-software')", "         for (o, a) in opts:", "-            if (o in supported_discover_options):", "+            if (o < supported_discover_options):", "                 self.discover_options.append(('%s=%s' % (o, a)))", " ", "     def _getCommandsAsStrings(self):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_In_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_In_with_Lt"}, "12": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 41, in runTest\n    self.assert_parse_error(\"realm join one two\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -33,7 +33,7 @@", "             (opts, remaining) = getopt.getopt(args, '', ('client-software=', 'server-software=', 'membership-software=', 'one-time-password=', 'no-password', 'computer-ou='))", "         except getopt.GetoptError as ex:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid realm arguments: %s') % ex)))", "-        if (len(remaining) != 1):", "+        if (len(remaining) < 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Specify only one realm to join')))", "         self.join_realm = remaining[0]", "         self.join_args = args"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_NotEq_with_Lt"}, "15": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnsupported realm 'join' command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 18, in runTest\n    realm = self.assert_parse(\"realm join blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nUnsupported realm 'join' command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -23,7 +23,7 @@", "         if (not args):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Missing realm command arguments')))", "         command = args.pop(0)", "-        if (command == 'join'):", "+        if (command not in 'join'):", "             self._parseJoin(args)", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Unsupported realm '%s' command\") % command)))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_Eq_with_NotIn"}, "26": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 28, in runTest\n    self.assertEqual(realm.discover_options, [\"--client-software=sssd\"])\nAssertionError: Lists differ: ['--client-software=sssd', '--computer-ou=OU=blah'] != ['--client-software=sssd']\n\nFirst list contains 1 additional elements.\nFirst extra element 1:\n--computer-ou=OU=blah\n\n- ['--client-software=sssd', '--computer-ou=OU=blah']\n+ ['--client-software=sssd']\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -40,7 +40,7 @@", "         self.discover_options = []", "         supported_discover_options = ('--client-software', '--server-software', '--membership-software')", "         for (o, a) in opts:", "-            if (o in supported_discover_options):", "+            if (o is not supported_discover_options):", "                 self.discover_options.append(('%s=%s' % (o, a)))", " ", "     def _getCommandsAsStrings(self):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_In_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_In_with_IsNot"}, "7": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnsupported realm 'join' command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 18, in runTest\n    realm = self.assert_parse(\"realm join blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nUnsupported realm 'join' command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -23,7 +23,7 @@", "         if (not args):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Missing realm command arguments')))", "         command = args.pop(0)", "-        if (command == 'join'):", "+        if (command < 'join'):", "             self._parseJoin(args)", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Unsupported realm '%s' command\") % command)))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_Eq_with_Lt"}, "23": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\nTypeError: unorderable types: str() <= tuple()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 25, in runTest\n    realm = self.assert_parse(\"realm join --client-software=sssd --computer-ou=OU=blah domain.example.com\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: str() <= tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -40,7 +40,7 @@", "         self.discover_options = []", "         supported_discover_options = ('--client-software', '--server-software', '--membership-software')", "         for (o, a) in opts:", "-            if (o in supported_discover_options):", "+            if (o <= supported_discover_options):", "                 self.discover_options.append(('%s=%s' % (o, a)))", " ", "     def _getCommandsAsStrings(self):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_In_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_In_with_LtE"}, "17": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 55, in runTest\n    realm join blah2\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in _stateMachine\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 670, in _tryFunc\n    fn()\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in <lambda>\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 561, in handleCommand\n    retval = self.handler.dispatcher(args, lineno)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 456, in dispatcher\n    obj = self.commands[cmd].parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\n  File \"pykickstart.commands.realm\", line 50, in _parseArguments\n  File \"pykickstart.commands.realm\", line 68, in _parseJoin\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -33,7 +33,7 @@", "             (opts, remaining) = getopt.getopt(args, '', ('client-software=', 'server-software=', 'membership-software=', 'one-time-password=', 'no-password', 'computer-ou='))", "         except getopt.GetoptError as ex:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid realm arguments: %s') % ex)))", "-        if (len(remaining) != 1):", "+        if (len(remaining) not in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Specify only one realm to join')))", "         self.join_realm = remaining[0]", "         self.join_args = args"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_NotEq_with_NotIn"}, "22": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 55, in runTest\n    realm join blah2\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in _stateMachine\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 670, in _tryFunc\n    fn()\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in <lambda>\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 561, in handleCommand\n    retval = self.handler.dispatcher(args, lineno)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 456, in dispatcher\n    obj = self.commands[cmd].parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\n  File \"pykickstart.commands.realm\", line 50, in _parseArguments\n  File \"pykickstart.commands.realm\", line 68, in _parseJoin\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -33,7 +33,7 @@", "             (opts, remaining) = getopt.getopt(args, '', ('client-software=', 'server-software=', 'membership-software=', 'one-time-password=', 'no-password', 'computer-ou='))", "         except getopt.GetoptError as ex:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid realm arguments: %s') % ex)))", "-        if (len(remaining) != 1):", "+        if (len(remaining) in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Specify only one realm to join')))", "         self.join_realm = remaining[0]", "         self.join_args = args"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_NotEq_with_In"}, "2": {"result-data": [{"line_number": 48, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnsupported realm 'blah' command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 18, in runTest\n    realm = self.assert_parse(\"realm join blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nUnsupported realm 'blah' command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -22,7 +22,7 @@", "         args = shlex.split(string)", "         if (not args):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Missing realm command arguments')))", "-        command = args.pop(0)", "+        command = args.pop(1)", "         if (command == 'join'):", "             self._parseJoin(args)", "         else:"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 1, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "number_replacer"}, "1": {"result-data": [{"line_number": 34, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -10,7 +10,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         KickstartCommand.__init__(self, *args, **kwargs)", "         self.join_realm = None", "         self.join_args = []"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "number_replacer"}, "11": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -23,7 +23,7 @@", "         if (not args):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Missing realm command arguments')))", "         command = args.pop(0)", "-        if (command == 'join'):", "+        if (command <= 'join'):", "             self._parseJoin(args)", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Unsupported realm '%s' command\") % command)))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_Eq_with_LtE"}, "21": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nSpecify only one realm to join\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 18, in runTest\n    realm = self.assert_parse(\"realm join blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nSpecify only one realm to join\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -33,7 +33,7 @@", "             (opts, remaining) = getopt.getopt(args, '', ('client-software=', 'server-software=', 'membership-software=', 'one-time-password=', 'no-password', 'computer-ou='))", "         except getopt.GetoptError as ex:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid realm arguments: %s') % ex)))", "-        if (len(remaining) != 1):", "+        if (len(remaining) is 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Specify only one realm to join')))", "         self.join_realm = remaining[0]", "         self.join_args = args"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_NotEq_with_Is"}, "5": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nSpecify only one realm to join\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 18, in runTest\n    realm = self.assert_parse(\"realm join blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nSpecify only one realm to join\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -33,7 +33,7 @@", "             (opts, remaining) = getopt.getopt(args, '', ('client-software=', 'server-software=', 'membership-software=', 'one-time-password=', 'no-password', 'computer-ou='))", "         except getopt.GetoptError as ex:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid realm arguments: %s') % ex)))", "-        if (len(remaining) != 1):", "+        if (len(remaining) <= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Specify only one realm to join')))", "         self.join_realm = remaining[0]", "         self.join_args = args"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_NotEq_with_LtE"}, "14": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\nTypeError: unorderable types: str() > tuple()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 25, in runTest\n    realm = self.assert_parse(\"realm join --client-software=sssd --computer-ou=OU=blah domain.example.com\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: str() > tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -40,7 +40,7 @@", "         self.discover_options = []", "         supported_discover_options = ('--client-software', '--server-software', '--membership-software')", "         for (o, a) in opts:", "-            if (o in supported_discover_options):", "+            if (o > supported_discover_options):", "                 self.discover_options.append(('%s=%s' % (o, a)))", " ", "     def _getCommandsAsStrings(self):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_In_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_In_with_Gt"}, "16": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nSpecify only one realm to join\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 18, in runTest\n    realm = self.assert_parse(\"realm join blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nSpecify only one realm to join\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -33,7 +33,7 @@", "             (opts, remaining) = getopt.getopt(args, '', ('client-software=', 'server-software=', 'membership-software=', 'one-time-password=', 'no-password', 'computer-ou='))", "         except getopt.GetoptError as ex:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid realm arguments: %s') % ex)))", "-        if (len(remaining) != 1):", "+        if (len(remaining) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Specify only one realm to join')))", "         self.join_realm = remaining[0]", "         self.join_args = args"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_NotEq_with_Eq"}, "30": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -33,7 +33,7 @@", "             (opts, remaining) = getopt.getopt(args, '', ('client-software=', 'server-software=', 'membership-software=', 'one-time-password=', 'no-password', 'computer-ou='))", "         except getopt.GetoptError as ex:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid realm arguments: %s') % ex)))", "-        if (len(remaining) != 1):", "+        if (len(remaining) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Specify only one realm to join')))", "         self.join_realm = remaining[0]", "         self.join_args = args"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_NotEq_with_Gt"}, "9": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnsupported realm 'join' command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 18, in runTest\n    realm = self.assert_parse(\"realm join blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nUnsupported realm 'join' command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -23,7 +23,7 @@", "         if (not args):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Missing realm command arguments')))", "         command = args.pop(0)", "-        if (command == 'join'):", "+        if (command > 'join'):", "             self._parseJoin(args)", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Unsupported realm '%s' command\") % command)))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_Eq_with_Gt"}, "3": {"result-data": [{"line_number": 68, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nSpecify only one realm to join\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 18, in runTest\n    realm = self.assert_parse(\"realm join blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nSpecify only one realm to join\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -33,7 +33,7 @@", "             (opts, remaining) = getopt.getopt(args, '', ('client-software=', 'server-software=', 'membership-software=', 'one-time-password=', 'no-password', 'computer-ou='))", "         except getopt.GetoptError as ex:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid realm arguments: %s') % ex)))", "-        if (len(remaining) != 1):", "+        if (len(remaining) != 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Specify only one realm to join')))", "         self.join_realm = remaining[0]", "         self.join_args = args"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 2, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "number_replacer"}, "4": {"result-data": [{"line_number": 73, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 55, in runTest\n    realm join blah2\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in _stateMachine\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 670, in _tryFunc\n    fn()\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 759, in <lambda>\n    self._tryFunc(lambda: self.handleCommand(lineno, args))\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 561, in handleCommand\n    retval = self.handler.dispatcher(args, lineno)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/base.py\", line 456, in dispatcher\n    obj = self.commands[cmd].parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\n  File \"pykickstart.commands.realm\", line 50, in _parseArguments\n  File \"pykickstart.commands.realm\", line 73, in _parseJoin\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -35,7 +35,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid realm arguments: %s') % ex)))", "         if (len(remaining) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Specify only one realm to join')))", "-        self.join_realm = remaining[0]", "+        self.join_realm = remaining[1]", "         self.join_args = args", "         self.discover_options = []", "         supported_discover_options = ('--client-software', '--server-software', '--membership-software')"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 3, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "number_replacer"}, "13": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -23,7 +23,7 @@", "         if (not args):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Missing realm command arguments')))", "         command = args.pop(0)", "-        if (command == 'join'):", "+        if (command >= 'join'):", "             self._parseJoin(args)", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Unsupported realm '%s' command\") % command)))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_Eq_with_GtE"}, "10": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnsupported realm 'join' command\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 18, in runTest\n    realm = self.assert_parse(\"realm join blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nUnsupported realm 'join' command\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -23,7 +23,7 @@", "         if (not args):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Missing realm command arguments')))", "         command = args.pop(0)", "-        if (command == 'join'):", "+        if (command is 'join'):", "             self._parseJoin(args)", "         else:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_(\"Unsupported realm '%s' command\") % command)))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_Eq_with_Is"}, "20": {"result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.realm\", line 104, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nSpecify only one realm to join\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/realm.py\", line 18, in runTest\n    realm = self.assert_parse(\"realm join blah\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nSpecify only one realm to join\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/realm.py", "@@ -33,7 +33,7 @@", "             (opts, remaining) = getopt.getopt(args, '', ('client-software=', 'server-software=', 'membership-software=', 'one-time-password=', 'no-password', 'computer-ou='))", "         except getopt.GetoptError as ex:", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Invalid realm arguments: %s') % ex)))", "-        if (len(remaining) != 1):", "+        if (len(remaining) >= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('Specify only one realm to join')))", "         self.join_realm = remaining[0]", "         self.join_args = args"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.realm", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "occurrence": 0, "result-type": "normal", "module-name": "pykickstart.commands.realm", "op-name": "replace_NotEq_with_GtE"}}, "work-parameters": {"1": {"test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/realm.py"], "test-runner": "nose", "timeout": 7.07615}}, "_default": {}}