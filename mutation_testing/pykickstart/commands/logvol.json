{"_default": {}, "work-parameters": {"1": {"timeout": 333.6762, "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "test-runner": "nose"}}, "work-items": {"91": {"result-type": "normal", "result-data": [{"line_number": 404, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 17}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --noformat --size=10240 --useexisting --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --noformat --size=10240 --useexisting --name=NAME --vgname=VGNAME\n?          -----------              --------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -308,7 +308,7 @@", "         op.add_argument('--grow', action='store_true', default=False, version=FC3, help='\\n                        Tells the logical volume to grow to fill available space\\n                        (if any), or up to the maximum size setting. Note that\\n                        --grow is not supported for logical volumes containing\\n                        a RAID volume on top of them.')", "         op.add_argument('--maxsize', dest='maxSizeMB', type=int, version=FC3, help='\\n                        The maximum size in MiB the logical volume may grow to.\\n                        Specify an integer value here, and do not append any\\n                        units.  This option is only relevant if ``--grow`` is\\n                        specified as well.')", "         op.add_argument('--name', required=True, version=FC3, help='\\n                        The name of this logical volume.')", "-        op.add_argument('--noformat', action='store_false', version=FC3, dest='format', default=True, help='\\n                        Use an existing logical volume and do not format it.\\n                        ')", "+        op.add_argument('--noformat', action='store_false', version=FC3, dest='format', default=False, help='\\n                        Use an existing logical volume and do not format it.\\n                        ')", "         op.add_argument('--percent', dest='percent', type=int, version=FC3, help='\\n                        Specify the size of the logical volume as a percentage\\n                        of available space in the volume group. Without the above\\n                        --grow option, this may not work.')", "         op.add_argument('--recommended', action='store_true', default=False, version=FC3, help='\\n                        Determine the size of the logical volume automatically.\\n                        ')", "         op.add_argument('--size', type=int, version=FC3, help='\\n                        Size of this logical volume.')"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "17", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 17}, "15": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --bytes-per-inode=4096 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --name=NAME --vgname=VGNAME\n+ logvol /  --size=10240 --bytes-per-inode=4096 --name=NAME --vgname=VGNAME\n?                        +++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -69,7 +69,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_LogVolData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode < 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Lt", "occurrence": 1}, "9": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 416, in runTest\n    \"logvol /home  --size=500 --cachesize=250 --cachepvs=pv.01,pv.02 --cachemode=writeback --name=home --vgname=vg\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 834, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nInvalid cache mode given: writeback\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -552,7 +552,7 @@", "             if (not retval.cache_size):", "                 err = formatErrorMsg(self.lineno, msg=_('Cache needs to have size specified'))", "                 raise KickstartParseError(err)", "-            if (retval.cache_mode and (retval.cache_mode not in ('writeback', 'writethrough'))):", "+            if (retval.cache_mode and (retval.cache_mode in ('writeback', 'writethrough'))):", "                 err = formatErrorMsg(self.lineno, msg=(_('Invalid cache mode given: %s') % retval.cache_mode))", "                 raise KickstartParseError(err)", "         if ((not retval.format) and retval.mkfsopts):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotIn_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotIn_with_In", "occurrence": 0}, "183": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 444, in parse\nTypeError: unorderable types: F12_LogVolData() >= list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: F12_LogVolData() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -329,7 +329,7 @@", "         lvd.mountpoint = ns.mntpoint[0]", "         if (not lvd.format):", "             lvd.preexist = True", "-        if (lvd in self.dataList()):", "+        if (lvd >= self.dataList()):", "             warnings.warn((_('A logical volume with the name %(logical_volume_name)s has already been defined in volume group %(volume_group)s.') % {'logical_volume_name': lvd.name, 'volume_group': lvd.vgname}))", "         return lvd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_In_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_In_with_GtE", "occurrence": 0}, "75": {"result-type": "normal", "result-data": [{"line_number": 39, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -17,7 +17,7 @@", "         self.grow = kwargs.get('grow', False)", "         self.maxSizeMB = kwargs.get('maxSizeMB', 0)", "         self.name = kwargs.get('name', '')", "-        self.format = kwargs.get('format', True)", "+        self.format = kwargs.get('format', False)", "         self.percent = kwargs.get('percent', 0)", "         self.recommended = kwargs.get('recommended', False)", "         self.size = kwargs.get('size', None)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 1}, "142": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 8}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 430, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for logvol\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for logvol\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -318,7 +318,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'logvol', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Eq", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Eq", "occurrence": 8}, "180": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 444, in parse\nTypeError: unorderable types: F12_LogVolData() <= list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: F12_LogVolData() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -329,7 +329,7 @@", "         lvd.mountpoint = ns.mntpoint[0]", "         if (not lvd.format):", "             lvd.preexist = True", "-        if (lvd in self.dataList()):", "+        if (lvd <= self.dataList()):", "             warnings.warn((_('A logical volume with the name %(logical_volume_name)s has already been defined in volume group %(volume_group)s.') % {'logical_volume_name': lvd.name, 'volume_group': lvd.vgname}))", "         return lvd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_In_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_In_with_LtE", "occurrence": 0}, "89": {"result-type": "normal", "result-data": [{"line_number": 389, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 15}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --grow --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --grow --size=10240 --name=NAME --vgname=VGNAME\n?          -------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -305,7 +305,7 @@", "         op = KSOptionParser(prog='logvol', description='\\n                            Create a logical volume for Logical Volume Management\\n                            (LVM).', version=FC3, epilog='\\n                            Create the partition first, create the logical volume\\n                            group, and then create the logical volume. For example::\\n\\n                                part pv.01 --size 3000\\n                                volgroup myvg pv.01\\n                                logvol / --vgname=myvg --size=2000 --name=rootvol\\n                            ')", "         op.add_argument('mntpoint', metavar='<mntpoint>', nargs=1, version=FC3, help=\"Mountpoint for this logical volume or 'none'.\")", "         op.add_argument('--fstype', version=FC3, help='\\n                        Sets the file system type for the logical volume. Valid\\n                        values include ext4, ext3, ext2, btrfs, swap, and vfat.\\n                        Other filesystems may be valid depending on command line\\n                        arguments passed to Anaconda to enable other filesystems.\\n                        ')", "-        op.add_argument('--grow', action='store_true', default=False, version=FC3, help='\\n                        Tells the logical volume to grow to fill available space\\n                        (if any), or up to the maximum size setting. Note that\\n                        --grow is not supported for logical volumes containing\\n                        a RAID volume on top of them.')", "+        op.add_argument('--grow', action='store_true', default=True, version=FC3, help='\\n                        Tells the logical volume to grow to fill available space\\n                        (if any), or up to the maximum size setting. Note that\\n                        --grow is not supported for logical volumes containing\\n                        a RAID volume on top of them.')", "         op.add_argument('--maxsize', dest='maxSizeMB', type=int, version=FC3, help='\\n                        The maximum size in MiB the logical volume may grow to.\\n                        Specify an integer value here, and do not append any\\n                        units.  This option is only relevant if ``--grow`` is\\n                        specified as well.')", "         op.add_argument('--name', required=True, version=FC3, help='\\n                        The name of this logical volume.')", "         op.add_argument('--noformat', action='store_false', version=FC3, dest='format', default=True, help='\\n                        Use an existing logical volume and do not format it.\\n                        ')"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "15", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 15}, "171": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size is not None) and (self.size is not 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_IsNot", "occurrence": 2}, "151": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --fsoptions=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --fsoptions=\"\" --name=NAME --vgname=VGNAME\n?                        ---------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -71,7 +71,7 @@", "         retval = FC3_LogVolData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts in ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_In", "occurrence": 2}, "156": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 7}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --label=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --label=\"\" --name=NAME --vgname=VGNAME\n?                        -----------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -178,7 +178,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_LogVolData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label in ''):", "             retval += (' --label=\"%s\"' % self.label)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_In", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_In", "occurrence": 7}, "83": {"result-type": "normal", "result-data": [{"line_number": 180, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 9}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -140,7 +140,7 @@", "         F12_LogVolData.__init__(self, *args, **kwargs)", "         self.cipher = kwargs.get('cipher', '')", "         self.hibernation = kwargs.get('hibernation', False)", "-        self.thin_pool = kwargs.get('thin_pool', False)", "+        self.thin_pool = kwargs.get('thin_pool', True)", "         self.thin_volume = kwargs.get('thin_volume', False)", "         self.pool_name = kwargs.get('pool_name', '')", "         self.chunk_size = kwargs.get('chunk_size', None)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 9}, "209": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 6}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[13 chars]1024 --encrypted --escrowcert=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[13 chars]1024 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --encrypted --escrowcert=\"\" --name=NAME --vgname=VGNAME\n?                                   ----------------\n+ logvol /  --size=1024 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -126,7 +126,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_LogVolData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert <= '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_LtE", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_LtE", "occurrence": 6}, "61": {"result-type": "normal", "result-data": [{"line_number": 333, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 7}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 826, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nCache needs to have a list of (fast) PVs specified\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 409, in runTest\n    F21_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 383, in runTest\n    F20_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nCache needs to have a list of (fast) PVs specified\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -269,7 +269,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         F21_LogVolData.__init__(self, *args, **kwargs)", "-        self.cache_size = kwargs.get('cache_size', 0)", "+        self.cache_size = kwargs.get('cache_size', 1)", "         self.cache_mode = kwargs.get('cache_mode', '')", "         self.cache_pvs = kwargs.get('cache_pvs', [])", "         self.mkfsopts = (kwargs.get('mkfsoptions', '') or kwargs.get('mkfsopts', ''))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 7}, "170": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -43,7 +43,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.percent > 0):", "+        if (self.percent is not 0):", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_IsNot", "occurrence": 1}, "7": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: A logical volume with the name nameB has already been defined in volume group vgA.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 102, in runTest\n    logvol /home --size=1024 --name=nameB --vgname=vgA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nlogvol / --size=1024 --name=nameA --vgname=vgA\nlogvol /home --size=1024 --name=nameB --vgname=vgA: A logical volume with the name nameB has already been defined in volume group vgA.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname == y.vgname) and (self.name > y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_Gt", "occurrence": 1}, "52": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -320,7 +320,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) != 0):", "             mapping = {'command': 'logvol', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         lvd = self.dataClass()"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_NotEq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_NotEq", "occurrence": 3}, "25": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.logvol\", line 80, in __str__\n  File \"pykickstart.commands.logvol\", line 160, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 136, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 93, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 71, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size is not None) and (self.size not in 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_NotIn", "occurrence": 2}, "68": {"result-type": "normal", "result-data": [{"line_number": 731, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 14}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 101))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 14}, "106": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 416, in runTest\n    \"logvol /home  --size=500 --cachesize=250 --cachepvs=pv.01,pv.02 --cachemode=writeback --name=home --vgname=vg\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 832, in parse\nTypeError: unorderable types: str() < tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -552,7 +552,7 @@", "             if (not retval.cache_size):", "                 err = formatErrorMsg(self.lineno, msg=_('Cache needs to have size specified'))", "                 raise KickstartParseError(err)", "-            if (retval.cache_mode and (retval.cache_mode not in ('writeback', 'writethrough'))):", "+            if (retval.cache_mode and (retval.cache_mode < ('writeback', 'writethrough'))):", "                 err = formatErrorMsg(self.lineno, msg=(_('Invalid cache mode given: %s') % retval.cache_mode))", "                 raise KickstartParseError(err)", "         if ((not retval.format) and retval.mkfsopts):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotIn_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotIn_with_Lt", "occurrence": 0}, "65": {"result-type": "normal", "result-data": [{"line_number": 431, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 11}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 87, in runTest\n    self.assert_parse_error(\"logvol / --name=NAME --vgname=VGNAME --bogus-option\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -320,7 +320,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) > 1):", "             mapping = {'command': 'logvol', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         lvd = self.dataClass()"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 11}, "139": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[13 chars]1024 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[13 chars]1024 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\n?                                   ----------------\n+ logvol /  --size=1024 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -110,7 +110,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase == ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Eq", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Eq", "occurrence": 5}, "130": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithNotEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 51, in runTest\n    \"logvol /  --percent=10 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 733, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent != 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Lt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Lt_with_NotEq", "occurrence": 0}, "155": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 6}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[13 chars]1024 --encrypted --escrowcert=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[13 chars]1024 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --encrypted --escrowcert=\"\" --name=NAME --vgname=VGNAME\n?                                   ----------------\n+ logvol /  --size=1024 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -126,7 +126,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_LogVolData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert in '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_In", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_In", "occurrence": 6}, "145": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.logvol\", line 80, in __str__\n  File \"pykickstart.commands.logvol\", line 160, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 136, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 93, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 71, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size is not None) and (self.size in 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_In", "occurrence": 2}, "14": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 36, in runTest\n    \"logvol /  --fstype=\\\"BLAFS\\\" --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --fstype=\"BLAFS\" --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --name=NAME --vgname=VGNAME\n+ logvol /  --fstype=\"BLAFS\" --size=10240 --name=NAME --vgname=VGNAME\n?          +++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -35,7 +35,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.fstype != ''):", "+        if (self.fstype < ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Lt", "occurrence": 0}, "27": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 731, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent not in 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_NotIn", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_NotIn", "occurrence": 4}, "198": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 25, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=OTHER --vgname=VGNAME\"))\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\nTypeError: unorderable types: F12_LogVolData() <= F12_LogVolData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -31,7 +31,7 @@", "         return ((self.vgname == y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self <= y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_LtE", "occurrence": 2}, "134": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --fstype=\"\" --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --fstype=\"\" --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -35,7 +35,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.fstype != ''):", "+        if (self.fstype == ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Eq", "occurrence": 0}, "23": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.logvol\", line 80, in __str__\n  File \"pykickstart.commands.logvol\", line 160, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 136, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 93, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 63, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -39,7 +39,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB not in 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_NotIn", "occurrence": 0}, "32": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --fsprofile=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --fsprofile=\"\" --name=NAME --vgname=VGNAME\n?                        ---------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -106,7 +106,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_LogVolData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile is ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Is", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Is", "occurrence": 4}, "81": {"result-type": "normal", "result-data": [{"line_number": 157, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 7}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -122,7 +122,7 @@", "         F9_LogVolData.__init__(self, *args, **kwargs)", "         self.deleteRemovedAttrs()", "         self.escrowcert = kwargs.get('escrowcert', '')", "-        self.backuppassphrase = kwargs.get('backuppassphrase', False)", "+        self.backuppassphrase = kwargs.get('backuppassphrase', True)", " ", "     def _getArgsAsStr(self):", "         retval = F9_LogVolData._getArgsAsStr(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 7}, "228": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -35,7 +35,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.fstype != ''):", "+        if (self.fstype not in ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_NotIn", "occurrence": 0}, "34": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 6}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[13 chars]1024 --encrypted --escrowcert=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[13 chars]1024 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --encrypted --escrowcert=\"\" --name=NAME --vgname=VGNAME\n?                                   ----------------\n+ logvol /  --size=1024 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -126,7 +126,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_LogVolData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert is '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Is", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Is", "occurrence": 6}, "95": {"result-type": "normal", "result-data": [{"line_number": 441, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 21}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 57, in runTest\n    \"logvol /  --noformat --useexisting %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --noformat --name=NAME --vgname=VGNAME\\n' != 'logvol /  --noformat --useexisting --name=NAME --vgname=VGNAME\\n'\n- logvol /  --noformat --name=NAME --vgname=VGNAME\n+ logvol /  --noformat --useexisting --name=NAME --vgname=VGNAME\n?                     ++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -328,7 +328,7 @@", "         lvd.lineno = self.lineno", "         lvd.mountpoint = ns.mntpoint[0]", "         if (not lvd.format):", "-            lvd.preexist = True", "+            lvd.preexist = False", "         if (lvd in self.dataList()):", "             warnings.warn((_('A logical volume with the name %(logical_volume_name)s has already been defined in volume group %(volume_group)s.') % {'logical_volume_name': lvd.name, 'volume_group': lvd.vgname}))", "         return lvd"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "21", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 21}, "222": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 445, in parse\nUserWarning: A logical volume with the name NAME has already been defined in volume group VGNAME.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: A logical volume with the name NAME has already been defined in volume group VGNAME.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -329,7 +329,7 @@", "         lvd.mountpoint = ns.mntpoint[0]", "         if (not lvd.format):", "             lvd.preexist = True", "-        if (lvd in self.dataList()):", "+        if (lvd is not self.dataList()):", "             warnings.warn((_('A logical volume with the name %(logical_volume_name)s has already been defined in volume group %(volume_group)s.') % {'logical_volume_name': lvd.name, 'volume_group': lvd.vgname}))", "         return lvd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_In_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_In_with_IsNot", "occurrence": 0}, "220": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 433, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to logvol command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to logvol command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -320,7 +320,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) <= 0):", "             mapping = {'command': 'logvol', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         lvd = self.dataClass()"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_LtE", "occurrence": 3}, "20": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 6}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 202, in runTest\n    \"logvol /  --size=1024 --encrypted --escrowcert=\\\"http://x/y\\\" \"\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[23 chars]rypted --name=NAME --vgname=VGNAME\\n' != 'logv[23 chars]rypted --escrowcert=\"http://x/y\" --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --encrypted --name=NAME --vgname=VGNAME\n+ logvol /  --size=1024 --encrypted --escrowcert=\"http://x/y\" --name=NAME --vgname=VGNAME\n?                                   ++++++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -126,7 +126,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_LogVolData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert < '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Lt", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Lt", "occurrence": 6}, "38": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 29, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=OTHERVG\"))\nAssertionError: True is not false\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname not in y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_NotIn", "occurrence": 0}, "62": {"result-type": "normal", "result-data": [{"line_number": 356, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 8}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -290,7 +290,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=133, *args, **kwargs):", "+    def __init__(self, writePriority=134, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.lvList = kwargs.get('lvList', [])"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 8}, "111": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent >= 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_GtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_GtE", "occurrence": 4}, "31": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 168, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[36 chars]4096 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[36 chars]4096 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --bytes-per-inode=4096 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\n?                                                          ----------------\n+ logvol /  --size=1024 --bytes-per-inode=4096 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -88,7 +88,7 @@", "         retval = FC4_LogVolData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase is ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Is", "occurrence": 3}, "144": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.logvol\", line 80, in __str__\n  File \"pykickstart.commands.logvol\", line 160, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 136, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 93, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 67, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -43,7 +43,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.percent > 0):", "+        if (self.percent in 0):", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_In", "occurrence": 1}, "103": {"result-type": "normal", "result-data": [{"line_number": 660, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 29}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --hibernation --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --hibernation --name=NAME --vgname=VGNAME\n?                        --------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -455,7 +455,7 @@", " ", "     def _getParser(self):", "         op = F17_LogVol._getParser(self)", "-        op.add_argument('--hibernation', action='store_true', default=False, version=F18, help='\\n                        This option can be used to automatically determine the\\n                        size of the swap partition big enough for hibernation.\\n                        ')", "+        op.add_argument('--hibernation', action='store_true', default=True, version=F18, help='\\n                        This option can be used to automatically determine the\\n                        size of the swap partition big enough for hibernation.\\n                        ')", "         op.add_argument('--cipher', version=F18, help='\\n                        Only relevant if ``--encrypted`` is specified. Specifies\\n                        which encryption algorithm should be used to encrypt the\\n                        filesystem.')", "         return op", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "29", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 29}, "77": {"result-type": "normal", "result-data": [{"line_number": 43, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -21,7 +21,7 @@", "         self.percent = kwargs.get('percent', 0)", "         self.recommended = kwargs.get('recommended', False)", "         self.size = kwargs.get('size', None)", "-        self.preexist = kwargs.get('preexist', False)", "+        self.preexist = kwargs.get('preexist', True)", "         self.vgname = kwargs.get('vgname', '')", "         self.mountpoint = kwargs.get('mountpoint', '')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 3}, "217": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --maxsize=0 --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --maxsize=0 --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -39,7 +39,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB <= 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_LtE", "occurrence": 0}, "199": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 110, in runTest\n    logvol /home --size=1024 --name=nameA --vgname=vgA\"\"\", UserWarning)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname < y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_Lt", "occurrence": 0}, "166": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 6}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[13 chars]1024 --encrypted --escrowcert=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[13 chars]1024 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --encrypted --escrowcert=\"\" --name=NAME --vgname=VGNAME\n?                                   ----------------\n+ logvol /  --size=1024 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -126,7 +126,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_LogVolData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert >= '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_GtE", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_GtE", "occurrence": 6}, "43": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 731, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent in 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Lt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Lt_with_In", "occurrence": 0}, "47": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 25, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=OTHER --vgname=VGNAME\"))\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname == y.vgname) and (self.name is not y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_IsNot", "occurrence": 1}, "66": {"result-type": "normal", "result-data": [{"line_number": 438, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 12}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 438, in parse\nIndexError: list index out of range\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -326,7 +326,7 @@", "         lvd = self.dataClass()", "         self.set_to_obj(ns, lvd)", "         lvd.lineno = self.lineno", "-        lvd.mountpoint = ns.mntpoint[0]", "+        lvd.mountpoint = ns.mntpoint[1]", "         if (not lvd.format):", "             lvd.preexist = True", "         if (lvd in self.dataList()):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 12}, "187": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname in y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_In", "occurrence": 0}, "82": {"result-type": "normal", "result-data": [{"line_number": 178, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 8}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -139,7 +139,7 @@", "     def __init__(self, *args, **kwargs):", "         F12_LogVolData.__init__(self, *args, **kwargs)", "         self.cipher = kwargs.get('cipher', '')", "-        self.hibernation = kwargs.get('hibernation', False)", "+        self.hibernation = kwargs.get('hibernation', True)", "         self.thin_pool = kwargs.get('thin_pool', False)", "         self.thin_volume = kwargs.get('thin_volume', False)", "         self.pool_name = kwargs.get('pool_name', '')"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 8}, "153": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --fsprofile=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --fsprofile=\"\" --name=NAME --vgname=VGNAME\n?                        ---------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -106,7 +106,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_LogVolData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile in ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_In", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_In", "occurrence": 4}, "16": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 122, in runTest\n    \"logvol /  --fstype=\\\"BLAFS\\\" --size=1024 %s--fsoptions=\\\"ABC 123\\\" --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[24 chars]-size=1024 --name=NAME --vgname=VGNAME\\n' != 'logv[24 chars]-size=1024 --fsoptions=\"ABC 123\" --name=NAME --vgname=VGNAME\\n'\n- logvol /  --fstype=\"BLAFS\" --size=1024 --name=NAME --vgname=VGNAME\n+ logvol /  --fstype=\"BLAFS\" --size=1024 --fsoptions=\"ABC 123\" --name=NAME --vgname=VGNAME\n?                                        ++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -71,7 +71,7 @@", "         retval = FC3_LogVolData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts < ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Lt", "occurrence": 2}, "205": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --fsoptions=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --fsoptions=\"\" --name=NAME --vgname=VGNAME\n?                        ---------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -71,7 +71,7 @@", "         retval = FC3_LogVolData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts <= ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_LtE", "occurrence": 2}, "206": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 168, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[36 chars]4096 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[36 chars]4096 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --bytes-per-inode=4096 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\n?                                                          ----------------\n+ logvol /  --size=1024 --bytes-per-inode=4096 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -88,7 +88,7 @@", "         retval = FC4_LogVolData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase <= ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_LtE", "occurrence": 3}, "45": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 731, in parse\nTypeError: argument of type 'NoneType' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent not in None) and ((retval.percent < 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_NotIn", "occurrence": 1}, "218": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --percent=0 --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --percent=0 --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -43,7 +43,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.percent > 0):", "+        if (self.percent <= 0):", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_LtE", "occurrence": 1}, "70": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --percent=0 --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --percent=0 --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -43,7 +43,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.percent > 0):", "+        if (self.percent == 0):", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Eq", "occurrence": 1}, "184": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 29, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=OTHERVG\"))\nAssertionError: True is not false\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname != y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_NotEq", "occurrence": 0}, "109": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size is not None) and (self.size >= 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_GtE", "occurrence": 2}, "54": {"result-type": "normal", "result-data": [{"line_number": 37, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --maxsize=1 --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --maxsize=1 --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -15,7 +15,7 @@", "         BaseData.__init__(self, *args, **kwargs)", "         self.fstype = kwargs.get('fstype', '')", "         self.grow = kwargs.get('grow', False)", "-        self.maxSizeMB = kwargs.get('maxSizeMB', 0)", "+        self.maxSizeMB = kwargs.get('maxSizeMB', 1)", "         self.name = kwargs.get('name', '')", "         self.format = kwargs.get('format', True)", "         self.percent = kwargs.get('percent', 0)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 0}, "224": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 733, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent == 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Lt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Lt_with_Eq", "occurrence": 0}, "190": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 110, in runTest\n    logvol /home --size=1024 --name=nameA --vgname=vgA\"\"\", UserWarning)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -329,7 +329,7 @@", "         lvd.mountpoint = ns.mntpoint[0]", "         if (not lvd.format):", "             lvd.preexist = True", "-        if (lvd in self.dataList()):", "+        if (lvd is self.dataList()):", "             warnings.warn((_('A logical volume with the name %(logical_volume_name)s has already been defined in volume group %(volume_group)s.') % {'logical_volume_name': lvd.name, 'volume_group': lvd.vgname}))", "         return lvd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_In_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_In_with_Is", "occurrence": 0}, "121": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -110,7 +110,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase > ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Gt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Gt", "occurrence": 5}, "124": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 8}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -318,7 +318,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'logvol', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Gt", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Gt", "occurrence": 8}, "131": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size != None) and (self.size > 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_NotEq", "occurrence": 0}, "150": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.logvol\", line 80, in __str__\n  File \"pykickstart.commands.logvol\", line 95, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -69,7 +69,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_LogVolData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode in 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_In", "occurrence": 1}, "86": {"result-type": "normal", "result-data": [{"line_number": 253, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 12}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -202,7 +202,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         F17_LogVolData.__init__(self, *args, **kwargs)", "-        self.hibernation = kwargs.get('hibernation', False)", "+        self.hibernation = kwargs.get('hibernation', True)", "         self.cipher = kwargs.get('cipher', '')", " ", "     def _getArgsAsStr(self):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "12", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 12}, "63": {"result-type": "normal", "result-data": [{"line_number": 381, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 9}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 427, in parse\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/options.py\", line 268, in parse_known_args\n    return ArgumentParser.parse_known_args(self, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1759, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/opt/rh/rh-python35/root/usr/lib64/python3.5/argparse.py\", line 1994, in _parse_known_args\n    ', '.join(required_actions))\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nthe following arguments are required: <mntpoint>\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nthe following arguments are required: <mntpoint>\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -303,7 +303,7 @@", " ", "     def _getParser(self):", "         op = KSOptionParser(prog='logvol', description='\\n                            Create a logical volume for Logical Volume Management\\n                            (LVM).', version=FC3, epilog='\\n                            Create the partition first, create the logical volume\\n                            group, and then create the logical volume. For example::\\n\\n                                part pv.01 --size 3000\\n                                volgroup myvg pv.01\\n                                logvol / --vgname=myvg --size=2000 --name=rootvol\\n                            ')", "-        op.add_argument('mntpoint', metavar='<mntpoint>', nargs=1, version=FC3, help=\"Mountpoint for this logical volume or 'none'.\")", "+        op.add_argument('mntpoint', metavar='<mntpoint>', nargs=2, version=FC3, help=\"Mountpoint for this logical volume or 'none'.\")", "         op.add_argument('--fstype', version=FC3, help='\\n                        Sets the file system type for the logical volume. Valid\\n                        values include ext4, ext3, ext2, btrfs, swap, and vfat.\\n                        Other filesystems may be valid depending on command line\\n                        arguments passed to Anaconda to enable other filesystems.\\n                        ')", "         op.add_argument('--grow', action='store_true', default=False, version=FC3, help='\\n                        Tells the logical volume to grow to fill available space\\n                        (if any), or up to the maximum size setting. Note that\\n                        --grow is not supported for logical volumes containing\\n                        a RAID volume on top of them.')", "         op.add_argument('--maxsize', dest='maxSizeMB', type=int, version=FC3, help='\\n                        The maximum size in MiB the logical volume may grow to.\\n                        Specify an integer value here, and do not append any\\n                        units.  This option is only relevant if ``--grow`` is\\n                        specified as well.')"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "9", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 9}, "225": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithIsNot", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 51, in runTest\n    \"logvol /  --percent=10 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 733, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent is not 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Lt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Lt_with_IsNot", "occurrence": 0}, "12": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nUserWarning: A logical volume with the name nameB has already been defined in volume group vgA.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 102, in runTest\n    logvol /home --size=1024 --name=nameB --vgname=vgA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nlogvol / --size=1024 --name=nameA --vgname=vgA\nlogvol /home --size=1024 --name=nameB --vgname=vgA: A logical volume with the name nameB has already been defined in volume group vgA.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname == y.vgname) and (self.name >= y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_GtE", "occurrence": 1}, "165": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[13 chars]1024 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[13 chars]1024 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\n?                                   ----------------\n+ logvol /  --size=1024 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -110,7 +110,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase >= ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_GtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_GtE", "occurrence": 5}, "110": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 433, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to logvol command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to logvol command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -320,7 +320,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) >= 0):", "             mapping = {'command': 'logvol', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         lvd = self.dataClass()"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_GtE", "occurrence": 3}, "158": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.logvol\", line 80, in __str__\n  File \"pykickstart.commands.logvol\", line 160, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 136, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 93, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 71, in _getArgsAsStr\nTypeError: unorderable types: int() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size <= None) and (self.size > 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_LtE", "occurrence": 0}, "194": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 87, in runTest\n    self.assert_parse_error(\"logvol / --name=NAME --vgname=VGNAME --bogus-option\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -320,7 +320,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) < 0):", "             mapping = {'command': 'logvol', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         lvd = self.dataClass()"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Lt", "occurrence": 3}, "114": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 110, in runTest\n    logvol /home --size=1024 --name=nameA --vgname=vgA\"\"\", UserWarning)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname == y.vgname) and (self.name is y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_Is", "occurrence": 1}, "152": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 168, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[36 chars]4096 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[36 chars]4096 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --bytes-per-inode=4096 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\n?                                                          ----------------\n+ logvol /  --size=1024 --bytes-per-inode=4096 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -88,7 +88,7 @@", "         retval = FC4_LogVolData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase in ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_In", "occurrence": 3}, "90": {"result-type": "normal", "result-data": [{"line_number": 401, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 16}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 78, in runTest\n    self.assert_parse_error(\"logvol / --vgname=NAME\", regex=requiredError % \"--name\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -307,7 +307,7 @@", "         op.add_argument('--fstype', version=FC3, help='\\n                        Sets the file system type for the logical volume. Valid\\n                        values include ext4, ext3, ext2, btrfs, swap, and vfat.\\n                        Other filesystems may be valid depending on command line\\n                        arguments passed to Anaconda to enable other filesystems.\\n                        ')", "         op.add_argument('--grow', action='store_true', default=False, version=FC3, help='\\n                        Tells the logical volume to grow to fill available space\\n                        (if any), or up to the maximum size setting. Note that\\n                        --grow is not supported for logical volumes containing\\n                        a RAID volume on top of them.')", "         op.add_argument('--maxsize', dest='maxSizeMB', type=int, version=FC3, help='\\n                        The maximum size in MiB the logical volume may grow to.\\n                        Specify an integer value here, and do not append any\\n                        units.  This option is only relevant if ``--grow`` is\\n                        specified as well.')", "-        op.add_argument('--name', required=True, version=FC3, help='\\n                        The name of this logical volume.')", "+        op.add_argument('--name', required=False, version=FC3, help='\\n                        The name of this logical volume.')", "         op.add_argument('--noformat', action='store_false', version=FC3, dest='format', default=True, help='\\n                        Use an existing logical volume and do not format it.\\n                        ')", "         op.add_argument('--percent', dest='percent', type=int, version=FC3, help='\\n                        Specify the size of the logical volume as a percentage\\n                        of available space in the volume group. Without the above\\n                        --grow option, this may not work.')", "         op.add_argument('--recommended', action='store_true', default=False, version=FC3, help='\\n                        Determine the size of the logical volume automatically.\\n                        ')"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "16", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 16}, "118": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -71,7 +71,7 @@", "         retval = FC3_LogVolData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts > ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Gt", "occurrence": 2}, "2": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --percent=0 --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --percent=0 --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -43,7 +43,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.percent > 0):", "+        if (self.percent is 0):", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Is", "occurrence": 1}, "26": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 431, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -320,7 +320,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) not in 0):", "             mapping = {'command': 'logvol', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         lvd = self.dataClass()"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_NotIn", "occurrence": 3}, "112": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 445, in parse\nUserWarning: A logical volume with the name NAME has already been defined in volume group VGNAME.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: A logical volume with the name NAME has already been defined in volume group VGNAME.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -329,7 +329,7 @@", "         lvd.mountpoint = ns.mntpoint[0]", "         if (not lvd.format):", "             lvd.preexist = True", "-        if (lvd in self.dataList()):", "+        if (lvd != self.dataList()):", "             warnings.warn((_('A logical volume with the name %(logical_volume_name)s has already been defined in volume group %(volume_group)s.') % {'logical_volume_name': lvd.name, 'volume_group': lvd.vgname}))", "         return lvd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_In_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_In_with_NotEq", "occurrence": 0}, "92": {"result-type": "normal", "result-data": [{"line_number": 412, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 18}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --recommended --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --recommended --size=10240 --name=NAME --vgname=VGNAME\n?          --------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -310,7 +310,7 @@", "         op.add_argument('--name', required=True, version=FC3, help='\\n                        The name of this logical volume.')", "         op.add_argument('--noformat', action='store_false', version=FC3, dest='format', default=True, help='\\n                        Use an existing logical volume and do not format it.\\n                        ')", "         op.add_argument('--percent', dest='percent', type=int, version=FC3, help='\\n                        Specify the size of the logical volume as a percentage\\n                        of available space in the volume group. Without the above\\n                        --grow option, this may not work.')", "-        op.add_argument('--recommended', action='store_true', default=False, version=FC3, help='\\n                        Determine the size of the logical volume automatically.\\n                        ')", "+        op.add_argument('--recommended', action='store_true', default=True, version=FC3, help='\\n                        Determine the size of the logical volume automatically.\\n                        ')", "         op.add_argument('--size', type=int, version=FC3, help='\\n                        Size of this logical volume.')", "         op.add_argument('--useexisting', dest='preexist', version=FC3, action='store_true', default=False, help='Use an existing logical volume and reformat it.')", "         op.add_argument('--vgname', required=True, version=FC3, help='\\n                        Name of the Volume Group this logical volume belongs to.\\n                        ')"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "18", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 18}, "59": {"result-type": "normal", "result-data": [{"line_number": 89, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --bytes-per-inode=4097 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --bytes-per-inode=4096 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --bytes-per-inode=4097 --name=NAME --vgname=VGNAME\n?                                             ^\n+ logvol /  --size=10240 --bytes-per-inode=4096 --name=NAME --vgname=VGNAME\n?                                             ^\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -64,7 +64,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         FC3_LogVolData.__init__(self, *args, **kwargs)", "-        self.bytesPerInode = kwargs.get('bytesPerInode', 4096)", "+        self.bytesPerInode = kwargs.get('bytesPerInode', 4097)", "         self.fsopts = kwargs.get('fsopts', '')", " ", "     def _getArgsAsStr(self):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 5}, "164": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --fsprofile=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --fsprofile=\"\" --name=NAME --vgname=VGNAME\n?                        ---------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -106,7 +106,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_LogVolData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile >= ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_GtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_GtE", "occurrence": 4}, "85": {"result-type": "normal", "result-data": [{"line_number": 238, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 11}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -188,7 +188,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         F15_LogVolData.__init__(self, *args, **kwargs)", "-        self.resize = kwargs.get('resize', False)", "+        self.resize = kwargs.get('resize', True)", " ", "     def _getArgsAsStr(self):", "         retval = F15_LogVolData._getArgsAsStr(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "11", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 11}, "102": {"result-type": "normal", "result-data": [{"line_number": 635, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 28}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 647, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\n--resize can only be used in conjunction with --useexisting\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\n--resize can only be used in conjunction with --useexisting\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -438,7 +438,7 @@", " ", "     def _getParser(self):", "         op = F15_LogVol._getParser(self)", "-        op.add_argument('--resize', action='store_true', default=False, version=F17, help='\\n                        Attempt to resize this logical volume to the size given\\n                        by ``--size=``. This option must be used with\\n                        ``--useexisting --size=``, or an error will be raised.\\n                        ')", "+        op.add_argument('--resize', action='store_true', default=True, version=F17, help='\\n                        Attempt to resize this logical volume to the size given\\n                        by ``--size=``. This option must be used with\\n                        ``--useexisting --size=``, or an error will be raised.\\n                        ')", "         return op", " ", "     def parse(self, args):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "28", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 28}, "197": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 25, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=OTHER --vgname=VGNAME\"))\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname == y.vgname) and (self.name <= y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_LtE", "occurrence": 1}, "122": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 6}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -126,7 +126,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_LogVolData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert > '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Gt", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Gt", "occurrence": 6}, "78": {"result-type": "normal", "result-data": [{"line_number": 49, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -27,7 +27,7 @@", " ", "     def __eq__(self, y):", "         if (not y):", "-            return False", "+            return True", "         return ((self.vgname == y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 4}, "3": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --name=NAME --vgname=VGNAME\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n?          +++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size is not None) and (self.size is 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Is", "occurrence": 2}, "39": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 25, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=OTHER --vgname=VGNAME\"))\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname == y.vgname) and (self.name not in y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_NotIn", "occurrence": 1}, "69": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --maxsize=0 --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --maxsize=0 --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -39,7 +39,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB == 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Eq", "occurrence": 0}, "28": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --fstype=\"\" --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --fstype=\"\" --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -35,7 +35,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.fstype != ''):", "+        if (self.fstype is ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Is", "occurrence": 0}, "87": {"result-type": "normal", "result-data": [{"line_number": 273, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 13}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -219,7 +219,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         F18_LogVolData.__init__(self, *args, **kwargs)", "-        self.thin_pool = kwargs.get('thin_pool', False)", "+        self.thin_pool = kwargs.get('thin_pool', True)", "         self.thin_volume = kwargs.get('thin_volume', False)", "         self.pool_name = kwargs.get('pool_name', '')", "         self.chunk_size = kwargs.get('chunk_size', None)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 13}, "5": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 379, in runTest\n    regex=\"Percentage must be between 0 and 100.\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent is 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Is", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Is", "occurrence": 4}, "30": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --fsoptions=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --fsoptions=\"\" --name=NAME --vgname=VGNAME\n?                        ---------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -71,7 +71,7 @@", "         retval = FC3_LogVolData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts is ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Is", "occurrence": 2}, "113": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 110, in runTest\n    logvol /home --size=1024 --name=nameA --vgname=vgA\"\"\", UserWarning)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 62, in assert_parse_error\n    self.parser.readKickstartFromString(ks_string)\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname is y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_Is", "occurrence": 0}, "195": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 733, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent < 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Lt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Lt", "occurrence": 4}, "188": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname == y.vgname) and (self.name in y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_In", "occurrence": 1}, "138": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --fsprofile=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --fsprofile=\"\" --name=NAME --vgname=VGNAME\n?                        ---------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -106,7 +106,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_LogVolData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile == ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Eq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Eq", "occurrence": 4}, "189": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 25, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=OTHER --vgname=VGNAME\"))\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\nTypeError: argument of type 'F12_LogVolData' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -31,7 +31,7 @@", "         return ((self.vgname == y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self in y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_In", "occurrence": 2}, "1": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --maxsize=0 --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --maxsize=0 --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -39,7 +39,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB is 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Is", "occurrence": 0}, "207": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --fsprofile=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --fsprofile=\"\" --name=NAME --vgname=VGNAME\n?                        ---------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -106,7 +106,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_LogVolData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile <= ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_LtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_LtE", "occurrence": 4}, "175": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --name=NAME --vgname=VGNAME\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n?          +++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size == None) and (self.size > 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_Eq", "occurrence": 0}, "42": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 731, in parse\nTypeError: unorderable types: int() < NoneType()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: int() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent < None) and ((retval.percent < 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_Lt", "occurrence": 1}, "116": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -35,7 +35,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.fstype != ''):", "+        if (self.fstype > ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Gt", "occurrence": 0}, "230": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -71,7 +71,7 @@", "         retval = FC3_LogVolData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts not in ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_NotIn", "occurrence": 2}, "44": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.logvol\", line 80, in __str__\n  File \"pykickstart.commands.logvol\", line 160, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 136, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 93, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 71, in _getArgsAsStr\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size not in None) and (self.size > 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_NotIn", "occurrence": 0}, "174": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 438, in runTest\n    self.assert_parse_error(\"logvol /home --name=home --vgname=vg --size=500 --cachesize=250 --cachepvs=pv.01,pv.02 --cachemode=bogus\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -552,7 +552,7 @@", "             if (not retval.cache_size):", "                 err = formatErrorMsg(self.lineno, msg=_('Cache needs to have size specified'))", "                 raise KickstartParseError(err)", "-            if (retval.cache_mode and (retval.cache_mode not in ('writeback', 'writethrough'))):", "+            if (retval.cache_mode and (retval.cache_mode == ('writeback', 'writethrough'))):", "                 err = formatErrorMsg(self.lineno, msg=(_('Invalid cache mode given: %s') % retval.cache_mode))", "                 raise KickstartParseError(err)", "         if ((not retval.format) and retval.mkfsopts):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotIn_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotIn_with_Eq", "occurrence": 0}, "223": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithGtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 416, in runTest\n    \"logvol /home  --size=500 --cachesize=250 --cachepvs=pv.01,pv.02 --cachemode=writeback --name=home --vgname=vg\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 832, in parse\nTypeError: unorderable types: str() >= tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -552,7 +552,7 @@", "             if (not retval.cache_size):", "                 err = formatErrorMsg(self.lineno, msg=_('Cache needs to have size specified'))", "                 raise KickstartParseError(err)", "-            if (retval.cache_mode and (retval.cache_mode not in ('writeback', 'writethrough'))):", "+            if (retval.cache_mode and (retval.cache_mode >= ('writeback', 'writethrough'))):", "                 err = formatErrorMsg(self.lineno, msg=(_('Invalid cache mode given: %s') % retval.cache_mode))", "                 raise KickstartParseError(err)", "         if ((not retval.format) and retval.mkfsopts):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotIn_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotIn_with_GtE", "occurrence": 0}, "97": {"result-type": "normal", "result-data": [{"line_number": 506, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 23}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --encrypted --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --encrypted --name=NAME --vgname=VGNAME\n?                        ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -368,7 +368,7 @@", "         op = FC4_LogVol._getParser(self)", "         op.add_argument('--bytes-per-inode', deprecated=F9)", "         op.add_argument('--fsprofile', version=F9, help='\\n                        Specifies a usage type to be passed to the program that\\n                        makes a filesystem on this partition. A usage type\\n                        defines a variety of tuning parameters to be used when\\n                        making a filesystem. For this option to work, the\\n                        filesystem must support the concept of usage types and\\n                        there must be a configuration file that lists valid\\n                        types. For ext2/3/4, this configuration file is\\n                        ``/etc/mke2fs.conf``.')", "-        op.add_argument('--encrypted', action='store_true', default=False, version=F9, help='\\n                        Specify that this logical volume should be encrypted.\\n                        ')", "+        op.add_argument('--encrypted', action='store_true', default=True, version=F9, help='\\n                        Specify that this logical volume should be encrypted.\\n                        ')", "         op.add_argument('--passphrase', version=F9, help='\\n                        Specify the passphrase to use when encrypting this\\n                        logical volume. Without the above ``--encrypted``\\n                        option, this option does nothing. If no passphrase is\\n                        specified, the default system-wide one is used, or the\\n                        installer will stop and prompt if there is no default.\\n                        ')", "         return op", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "23", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 23}, "17": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 168, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 146, in runTest\n    \"logvol /  --size=1024 %s--encrypted --passphrase=\\\"PASSPHRASE\\\" --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[46 chars]rypted --name=NAME --vgname=VGNAME\\n' != 'logv[46 chars]rypted --passphrase=\"PASSPHRASE\" --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --bytes-per-inode=4096 --encrypted --name=NAME --vgname=VGNAME\n+ logvol /  --size=1024 --bytes-per-inode=4096 --encrypted --passphrase=\"PASSPHRASE\" --name=NAME --vgname=VGNAME\n?                                                          ++++++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -88,7 +88,7 @@", "         retval = FC4_LogVolData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase < ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Lt", "occurrence": 3}, "99": {"result-type": "normal", "result-data": [{"line_number": 552, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 25}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 227, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --hibernation --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --hibernation --name=NAME --vgname=VGNAME\n?                        --------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -389,7 +389,7 @@", "     def _getParser(self):", "         op = F12_LogVol._getParser(self)", "         op.add_argument('--cipher', version=RHEL6, help='\\n                        Only relevant if ``--encrypted`` is specified. Specifies\\n                        which encryption algorithm should be used to encrypt the\\n                        filesystem.')", "-        op.add_argument('--hibernation', action='store_true', default=False, version=RHEL6, help='\\n                        This option can be used to automatically determine the\\n                        size of the swap partition big enough for hibernation.\\n                        ')", "+        op.add_argument('--hibernation', action='store_true', default=True, version=RHEL6, help='\\n                        This option can be used to automatically determine the\\n                        size of the swap partition big enough for hibernation.\\n                        ')", "         op.add_argument('--thinpool', action='store_true', version=RHEL6, dest='thin_pool', default=False, help=\"\\n                        Create a thin pool logical volume. Use a mountpoint of\\n                        'none'\")", "         op.add_argument('--thin', action='store_true', version=RHEL6, dest='thin_volume', default=False, help='\\n                        Create a thin logical volume. Requires ``--poolname``.\\n                        ')", "         op.add_argument('--poolname', dest='pool_name', version=RHEL6, help='\\n                        Specify the name of the thin pool in which to create a\\n                        thin logical volume. Requires ``--thin``.')"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "25", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 25}, "21": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 7}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 298, in runTest\n    \"logvol /  --size=1024 --label=\\\"ROOT\\\" --name=NAME --vgname=VGNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=1024 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=1024 --label=\"ROOT\" --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --name=NAME --vgname=VGNAME\n+ logvol /  --size=1024 --label=\"ROOT\" --name=NAME --vgname=VGNAME\n?                       +++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -178,7 +178,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_LogVolData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label < ''):", "             retval += (' --label=\"%s\"' % self.label)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Lt", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Lt", "occurrence": 7}, "159": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 731, in parse\nTypeError: unorderable types: int() <= NoneType()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: int() <= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent <= None) and ((retval.percent < 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_LtE", "occurrence": 1}, "214": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIsNot", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 416, in runTest\n    \"logvol /home  --size=500 --cachesize=250 --cachepvs=pv.01,pv.02 --cachemode=writeback --name=home --vgname=vg\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 834, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nInvalid cache mode given: writeback\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -552,7 +552,7 @@", "             if (not retval.cache_size):", "                 err = formatErrorMsg(self.lineno, msg=_('Cache needs to have size specified'))", "                 raise KickstartParseError(err)", "-            if (retval.cache_mode and (retval.cache_mode not in ('writeback', 'writethrough'))):", "+            if (retval.cache_mode and (retval.cache_mode is not ('writeback', 'writethrough'))):", "                 err = formatErrorMsg(self.lineno, msg=(_('Invalid cache mode given: %s') % retval.cache_mode))", "                 raise KickstartParseError(err)", "         if ((not retval.format) and retval.mkfsopts):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotIn_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotIn_with_IsNot", "occurrence": 0}, "96": {"result-type": "normal", "result-data": [{"line_number": 478, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 22}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 168, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[21 chars]bytes-per-inode=4096 --encrypted --name=NAME --vgname=VGNAME\\n' != 'logv[21 chars]bytes-per-inode=4096 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --bytes-per-inode=4096 --encrypted --name=NAME --vgname=VGNAME\n?                                               ------------\n+ logvol /  --size=10240 --bytes-per-inode=4096 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -356,7 +356,7 @@", " ", "     def _getParser(self):", "         op = FC4_LogVol._getParser(self)", "-        op.add_argument('--encrypted', action='store_true', version=RHEL5, default=False, help='\\n                        Specify that this logical volume should be encrypted.\\n                        ')", "+        op.add_argument('--encrypted', action='store_true', version=RHEL5, default=True, help='\\n                        Specify that this logical volume should be encrypted.\\n                        ')", "         op.add_argument('--passphrase', version=RHEL5, help='\\n                        Specify the passphrase to use when encrypting this\\n                        logical volume. Without the above ``--encrypted``\\n                        option, this option does nothing. If no passphrase is\\n                        specified, the default system-wide one is used, or the\\n                        installer will stop and prompt if there is no default.\\n                        ')", "         return op", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "22", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 22}, "50": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -43,7 +43,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.percent > 0):", "+        if (self.percent != 0):", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_NotEq", "occurrence": 1}, "94": {"result-type": "normal", "result-data": [{"line_number": 421, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 20}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 77, in runTest\n    self.assert_parse_error(\"logvol / --name=NAME\", regex=requiredError % \"--vgname\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -313,7 +313,7 @@", "         op.add_argument('--recommended', action='store_true', default=False, version=FC3, help='\\n                        Determine the size of the logical volume automatically.\\n                        ')", "         op.add_argument('--size', type=int, version=FC3, help='\\n                        Size of this logical volume.')", "         op.add_argument('--useexisting', dest='preexist', version=FC3, action='store_true', default=False, help='Use an existing logical volume and reformat it.')", "-        op.add_argument('--vgname', required=True, version=FC3, help='\\n                        Name of the Volume Group this logical volume belongs to.\\n                        ')", "+        op.add_argument('--vgname', required=False, version=FC3, help='\\n                        Name of the Volume Group this logical volume belongs to.\\n                        ')", "         return op", " ", "     def parse(self, args):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "20", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 20}, "149": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --fstype=\"\" --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --fstype=\"\" --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -35,7 +35,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.fstype != ''):", "+        if (self.fstype in ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_In", "occurrence": 0}, "176": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithEq", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 379, in runTest\n    regex=\"Percentage must be between 0 and 100.\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent == None) and ((retval.percent < 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_Eq", "occurrence": 1}, "56": {"result-type": "normal", "result-data": [{"line_number": 63, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -39,7 +39,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB > 1):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 2}, "35": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 7}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --label=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --label=\"\" --name=NAME --vgname=VGNAME\n?                        -----------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -178,7 +178,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_LogVolData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label is ''):", "             retval += (' --label=\"%s\"' % self.label)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Is", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Is", "occurrence": 7}, "229": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.logvol\", line 80, in __str__\n  File \"pykickstart.commands.logvol\", line 95, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -69,7 +69,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_LogVolData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode not in 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_NotIn", "occurrence": 1}, "162": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --fsoptions=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --fsoptions=\"\" --name=NAME --vgname=VGNAME\n?                        ---------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -71,7 +71,7 @@", "         retval = FC3_LogVolData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts >= ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_GtE", "occurrence": 2}, "19": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 146, in runTest\n    \"logvol /  --size=1024 %s--encrypted --passphrase=\\\"PASSPHRASE\\\" --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[23 chars]rypted --name=NAME --vgname=VGNAME\\n' != 'logv[23 chars]rypted --passphrase=\"PASSPHRASE\" --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --encrypted --name=NAME --vgname=VGNAME\n+ logvol /  --size=1024 --encrypted --passphrase=\"PASSPHRASE\" --name=NAME --vgname=VGNAME\n?                                   ++++++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -110,7 +110,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase < ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Lt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Lt", "occurrence": 5}, "201": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 25, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=OTHER --vgname=VGNAME\"))\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\nTypeError: unorderable types: F12_LogVolData() < F12_LogVolData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -31,7 +31,7 @@", "         return ((self.vgname == y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self < y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_Lt", "occurrence": 2}, "11": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 29, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=OTHERVG\"))\nAssertionError: True is not false\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname >= y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_GtE", "occurrence": 0}, "74": {"result-type": "normal", "result-data": [{"line_number": 36, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -14,7 +14,7 @@", "     def __init__(self, *args, **kwargs):", "         BaseData.__init__(self, *args, **kwargs)", "         self.fstype = kwargs.get('fstype', '')", "-        self.grow = kwargs.get('grow', False)", "+        self.grow = kwargs.get('grow', True)", "         self.maxSizeMB = kwargs.get('maxSizeMB', 0)", "         self.name = kwargs.get('name', '')", "         self.format = kwargs.get('format', True)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 0}, "202": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithGt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 416, in runTest\n    \"logvol /home  --size=500 --cachesize=250 --cachepvs=pv.01,pv.02 --cachemode=writeback --name=home --vgname=vg\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 832, in parse\nTypeError: unorderable types: str() > tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -552,7 +552,7 @@", "             if (not retval.cache_size):", "                 err = formatErrorMsg(self.lineno, msg=_('Cache needs to have size specified'))", "                 raise KickstartParseError(err)", "-            if (retval.cache_mode and (retval.cache_mode not in ('writeback', 'writethrough'))):", "+            if (retval.cache_mode and (retval.cache_mode > ('writeback', 'writethrough'))):", "                 err = formatErrorMsg(self.lineno, msg=(_('Invalid cache mode given: %s') % retval.cache_mode))", "                 raise KickstartParseError(err)", "         if ((not retval.format) and retval.mkfsopts):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotIn_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotIn_with_Gt", "occurrence": 0}, "115": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -31,7 +31,7 @@", "         return ((self.vgname == y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_Is", "occurrence": 2}, "168": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 8}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 430, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for logvol\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for logvol\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -318,7 +318,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) >= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'logvol', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_GtE", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_GtE", "occurrence": 8}, "219": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --name=NAME --vgname=VGNAME\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n?          +++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size is not None) and (self.size <= 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_LtE", "occurrence": 2}, "71": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --name=NAME --vgname=VGNAME\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n?          +++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size is not None) and (self.size == 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Eq", "occurrence": 2}, "24": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.logvol\", line 80, in __str__\n  File \"pykickstart.commands.logvol\", line 160, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 136, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 93, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 67, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -43,7 +43,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.percent > 0):", "+        if (self.percent not in 0):", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_NotIn", "occurrence": 1}, "146": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 431, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -320,7 +320,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) in 0):", "             mapping = {'command': 'logvol', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         lvd = self.dataClass()"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_In", "occurrence": 3}, "148": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithIs", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 733, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent is 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Lt_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Lt_with_Is", "occurrence": 0}, "191": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 45, in runTest\n    \"logvol /  --maxsize=2048 --size=1024 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=1024 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --maxsize=2048 --size=1024 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --name=NAME --vgname=VGNAME\n+ logvol /  --maxsize=2048 --size=1024 --name=NAME --vgname=VGNAME\n?          +++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -39,7 +39,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB < 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Lt", "occurrence": 0}, "125": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.logvol\", line 80, in __str__\n  File \"pykickstart.commands.logvol\", line 160, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 136, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 93, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 71, in _getArgsAsStr\nTypeError: unorderable types: int() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size > None) and (self.size > 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_Gt", "occurrence": 0}, "58": {"result-type": "normal", "result-data": [{"line_number": 71, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size is not None) and (self.size > 1)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 4}, "100": {"result-type": "normal", "result-data": [{"line_number": 558, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 26}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 227, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --thinpool --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --thinpool --name=NAME --vgname=VGNAME\n?                        -----------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -390,7 +390,7 @@", "         op = F12_LogVol._getParser(self)", "         op.add_argument('--cipher', version=RHEL6, help='\\n                        Only relevant if ``--encrypted`` is specified. Specifies\\n                        which encryption algorithm should be used to encrypt the\\n                        filesystem.')", "         op.add_argument('--hibernation', action='store_true', default=False, version=RHEL6, help='\\n                        This option can be used to automatically determine the\\n                        size of the swap partition big enough for hibernation.\\n                        ')", "-        op.add_argument('--thinpool', action='store_true', version=RHEL6, dest='thin_pool', default=False, help=\"\\n                        Create a thin pool logical volume. Use a mountpoint of\\n                        'none'\")", "+        op.add_argument('--thinpool', action='store_true', version=RHEL6, dest='thin_pool', default=True, help=\"\\n                        Create a thin pool logical volume. Use a mountpoint of\\n                        'none'\")", "         op.add_argument('--thin', action='store_true', version=RHEL6, dest='thin_volume', default=False, help='\\n                        Create a thin logical volume. Requires ``--poolname``.\\n                        ')", "         op.add_argument('--poolname', dest='pool_name', version=RHEL6, help='\\n                        Specify the name of the thin pool in which to create a\\n                        thin logical volume. Requires ``--thin``.')", "         op.add_argument('--chunksize', type=int, dest='chunk_size', version=RHEL6, help='\\n                        Specify the chunk size (in KiB) for a new thin pool\\n                        device.')"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "26", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 26}, "182": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 379, in runTest\n    regex=\"Percentage must be between 0 and 100.\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is None) and ((retval.percent < 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_Is", "occurrence": 1}, "117": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -69,7 +69,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_LogVolData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode > 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Gt", "occurrence": 1}, "141": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 7}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --label=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --label=\"\" --name=NAME --vgname=VGNAME\n?                        -----------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -178,7 +178,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_LogVolData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label == ''):", "             retval += (' --label=\"%s\"' % self.label)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Eq", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Eq", "occurrence": 7}, "215": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 69, in assert_parse\n    self.parser.readKickstartFromString(ks_string)\n  File \"/home/atodorov/repos/git/pykickstart/pykickstart/parser.py\", line 776, in readKickstartFromString\n    self._stateMachine(i)\nAttributeError: 'list' object has no attribute 'vgname'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 102, in runTest\n    logvol /home --size=1024 --name=nameB --vgname=vgA\"\"\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 71, in assert_parse\n    self.fail(\"Failed while parsing commands %s: %s\" % (ks_string, e))\nAssertionError: Failed while parsing commands \nlogvol / --size=1024 --name=nameA --vgname=vgA\nlogvol /home --size=1024 --name=nameB --vgname=vgA: 'list' object has no attribute 'vgname'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -329,7 +329,7 @@", "         lvd.mountpoint = ns.mntpoint[0]", "         if (not lvd.format):", "             lvd.preexist = True", "-        if (lvd in self.dataList()):", "+        if (lvd == self.dataList()):", "             warnings.warn((_('A logical volume with the name %(logical_volume_name)s has already been defined in volume group %(volume_group)s.') % {'logical_volume_name': lvd.name, 'volume_group': lvd.vgname}))", "         return lvd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_In_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_In_with_Eq", "occurrence": 0}, "178": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 731, in parse\nTypeError: argument of type 'NoneType' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent in None) and ((retval.percent < 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_In", "occurrence": 1}, "107": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --maxsize=0 --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --maxsize=0 --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -39,7 +39,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB >= 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_GtE", "occurrence": 0}, "232": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -106,7 +106,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_LogVolData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile not in ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_NotIn", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_NotIn", "occurrence": 4}, "120": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 4}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -106,7 +106,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_LogVolData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile > ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Gt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Gt", "occurrence": 4}, "135": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --bytes-per-inode=4096 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --name=NAME --vgname=VGNAME\n+ logvol /  --size=10240 --bytes-per-inode=4096 --name=NAME --vgname=VGNAME\n?                        +++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -69,7 +69,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_LogVolData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode == 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Eq", "occurrence": 1}, "221": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLtE", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 733, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent <= 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_LtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_LtE", "occurrence": 4}, "169": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -39,7 +39,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB is not 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_IsNot", "occurrence": 0}, "8": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 25, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=OTHER --vgname=VGNAME\"))\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\nTypeError: unorderable types: F12_LogVolData() > F12_LogVolData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -31,7 +31,7 @@", "         return ((self.vgname == y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self > y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_Gt", "occurrence": 2}, "196": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname <= y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_LtE", "occurrence": 0}, "33": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[13 chars]1024 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[13 chars]1024 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\n?                                   ----------------\n+ logvol /  --size=1024 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -110,7 +110,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase is ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Is", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Is", "occurrence": 5}, "48": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 25, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=OTHER --vgname=VGNAME\"))\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -31,7 +31,7 @@", "         return ((self.vgname == y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is not y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_IsNot", "occurrence": 2}, "18": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 183, in runTest\n    \"logvol /  --size=1024 --fsprofile=\\\"FS_PROFILE\\\" --name=NAME --vgname=VGNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=1024 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=1024 --fsprofile=\"FS_PROFILE\" --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --name=NAME --vgname=VGNAME\n+ logvol /  --size=1024 --fsprofile=\"FS_PROFILE\" --name=NAME --vgname=VGNAME\n?                       +++++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -106,7 +106,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC4_LogVolData._getArgsAsStr(self)", "-        if (self.fsprofile != ''):", "+        if (self.fsprofile < ''):", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Lt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Lt", "occurrence": 4}, "73": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 379, in runTest\n    regex=\"Percentage must be between 0 and 100.\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent == 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Eq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Eq", "occurrence": 4}, "123": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 7}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -178,7 +178,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_LogVolData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label > ''):", "             retval += (' --label=\"%s\"' % self.label)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Gt", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Gt", "occurrence": 7}, "101": {"result-type": "normal", "result-data": [{"line_number": 562, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 27}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 598, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\n--thin requires --poolname to specify pool name\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 227, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\n--thin requires --poolname to specify pool name\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -391,7 +391,7 @@", "         op.add_argument('--cipher', version=RHEL6, help='\\n                        Only relevant if ``--encrypted`` is specified. Specifies\\n                        which encryption algorithm should be used to encrypt the\\n                        filesystem.')", "         op.add_argument('--hibernation', action='store_true', default=False, version=RHEL6, help='\\n                        This option can be used to automatically determine the\\n                        size of the swap partition big enough for hibernation.\\n                        ')", "         op.add_argument('--thinpool', action='store_true', version=RHEL6, dest='thin_pool', default=False, help=\"\\n                        Create a thin pool logical volume. Use a mountpoint of\\n                        'none'\")", "-        op.add_argument('--thin', action='store_true', version=RHEL6, dest='thin_volume', default=False, help='\\n                        Create a thin logical volume. Requires ``--poolname``.\\n                        ')", "+        op.add_argument('--thin', action='store_true', version=RHEL6, dest='thin_volume', default=True, help='\\n                        Create a thin logical volume. Requires ``--poolname``.\\n                        ')", "         op.add_argument('--poolname', dest='pool_name', version=RHEL6, help='\\n                        Specify the name of the thin pool in which to create a\\n                        thin logical volume. Requires ``--thin``.')", "         op.add_argument('--chunksize', type=int, dest='chunk_size', version=RHEL6, help='\\n                        Specify the chunk size (in KiB) for a new thin pool\\n                        device.')", "         op.add_argument('--metadatasize', type=int, dest='metadata_size', version=RHEL6, help='\\n                        Specify the metadata area size (in MiB) for a new thin\\n                        pool device.')"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "27", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 27}, "204": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --bytes-per-inode=4096 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --name=NAME --vgname=VGNAME\n+ logvol /  --size=10240 --bytes-per-inode=4096 --name=NAME --vgname=VGNAME\n?                        +++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -69,7 +69,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_LogVolData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode <= 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_LtE", "occurrence": 1}, "108": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithGtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --percent=0 --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --percent=0 --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -43,7 +43,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.percent > 0):", "+        if (self.percent >= 0):", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_GtE", "occurrence": 1}, "177": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.logvol\", line 80, in __str__\n  File \"pykickstart.commands.logvol\", line 160, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 136, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 93, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 71, in _getArgsAsStr\nTypeError: argument of type 'NoneType' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size in None) and (self.size > 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_In", "occurrence": 0}, "93": {"result-type": "normal", "result-data": [{"line_number": 419, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 19}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --useexisting --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --useexisting --name=NAME --vgname=VGNAME\n?                        --------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -312,7 +312,7 @@", "         op.add_argument('--percent', dest='percent', type=int, version=FC3, help='\\n                        Specify the size of the logical volume as a percentage\\n                        of available space in the volume group. Without the above\\n                        --grow option, this may not work.')", "         op.add_argument('--recommended', action='store_true', default=False, version=FC3, help='\\n                        Determine the size of the logical volume automatically.\\n                        ')", "         op.add_argument('--size', type=int, version=FC3, help='\\n                        Size of this logical volume.')", "-        op.add_argument('--useexisting', dest='preexist', version=FC3, action='store_true', default=False, help='Use an existing logical volume and reformat it.')", "+        op.add_argument('--useexisting', dest='preexist', version=FC3, action='store_true', default=True, help='Use an existing logical volume and reformat it.')", "         op.add_argument('--vgname', required=True, version=FC3, help='\\n                        Name of the Volume Group this logical volume belongs to.\\n                        ')", "         return op", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "19", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 19}, "22": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt", "occurrence": 8}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -318,7 +318,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) < 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'logvol', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Lt", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Lt", "occurrence": 8}, "179": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithGt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 51, in runTest\n    \"logvol /  --percent=10 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 733, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent > 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Lt_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Lt_with_Gt", "occurrence": 0}, "53": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 733, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent != 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_NotEq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_NotEq", "occurrence": 4}, "211": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 8}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 430, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for logvol\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for logvol\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -318,7 +318,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) <= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'logvol', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_LtE", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_LtE", "occurrence": 8}, "76": {"result-type": "normal", "result-data": [{"line_number": 41, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -19,7 +19,7 @@", "         self.name = kwargs.get('name', '')", "         self.format = kwargs.get('format', True)", "         self.percent = kwargs.get('percent', 0)", "-        self.recommended = kwargs.get('recommended', False)", "+        self.recommended = kwargs.get('recommended', True)", "         self.size = kwargs.get('size', None)", "         self.preexist = kwargs.get('preexist', False)", "         self.vgname = kwargs.get('vgname', '')"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 2}, "88": {"result-type": "normal", "result-data": [{"line_number": 274, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 14}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -220,7 +220,7 @@", "     def __init__(self, *args, **kwargs):", "         F18_LogVolData.__init__(self, *args, **kwargs)", "         self.thin_pool = kwargs.get('thin_pool', False)", "-        self.thin_volume = kwargs.get('thin_volume', False)", "+        self.thin_volume = kwargs.get('thin_volume', True)", "         self.pool_name = kwargs.get('pool_name', '')", "         self.chunk_size = kwargs.get('chunk_size', None)", "         self.metadata_size = kwargs.get('metadata_size', None)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "14", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 14}, "13": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 25, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=OTHER --vgname=VGNAME\"))\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\nTypeError: unorderable types: F12_LogVolData() >= F12_LogVolData()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -31,7 +31,7 @@", "         return ((self.vgname == y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self >= y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_GtE", "occurrence": 2}, "231": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -88,7 +88,7 @@", "         retval = FC4_LogVolData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase not in ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_NotIn", "occurrence": 3}, "57": {"result-type": "normal", "result-data": [{"line_number": 67, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -43,7 +43,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.percent > 0):", "+        if (self.percent > 1):", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 3}, "235": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 7}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -178,7 +178,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_LogVolData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label not in ''):", "             retval += (' --label=\"%s\"' % self.label)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_NotIn", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_NotIn", "occurrence": 7}, "129": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 733, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent <= 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Lt_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Lt_with_LtE", "occurrence": 0}, "72": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithEq", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 433, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to logvol command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to logvol command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -320,7 +320,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) == 0):", "             mapping = {'command': 'logvol', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         lvd = self.dataClass()"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Eq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Eq", "occurrence": 3}, "41": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.logvol\", line 80, in __str__\n  File \"pykickstart.commands.logvol\", line 160, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 136, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 93, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 71, in _getArgsAsStr\nTypeError: unorderable types: int() < NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size < None) and (self.size > 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_Lt", "occurrence": 0}, "210": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 7}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --label=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --label=\"\" --name=NAME --vgname=VGNAME\n?                        -----------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -178,7 +178,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_LogVolData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label <= ''):", "             retval += (' --label=\"%s\"' % self.label)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_LtE", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_LtE", "occurrence": 7}, "126": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 731, in parse\nTypeError: unorderable types: int() > NoneType()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: int() > NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent > None) and ((retval.percent < 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_Gt", "occurrence": 1}, "212": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 445, in parse\nUserWarning: A logical volume with the name NAME has already been defined in volume group VGNAME.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: A logical volume with the name NAME has already been defined in volume group VGNAME.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -329,7 +329,7 @@", "         lvd.mountpoint = ns.mntpoint[0]", "         if (not lvd.format):", "             lvd.preexist = True", "-        if (lvd in self.dataList()):", "+        if (lvd not in self.dataList()):", "             warnings.warn((_('A logical volume with the name %(logical_volume_name)s has already been defined in volume group %(volume_group)s.') % {'logical_volume_name': lvd.name, 'volume_group': lvd.vgname}))", "         return lvd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_In_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_In_with_NotIn", "occurrence": 0}, "37": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithNotIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 731, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent not in 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Lt_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Lt_with_NotIn", "occurrence": 0}, "84": {"result-type": "normal", "result-data": [{"line_number": 181, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 10}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -141,7 +141,7 @@", "         self.cipher = kwargs.get('cipher', '')", "         self.hibernation = kwargs.get('hibernation', False)", "         self.thin_pool = kwargs.get('thin_pool', False)", "-        self.thin_volume = kwargs.get('thin_volume', False)", "+        self.thin_volume = kwargs.get('thin_volume', True)", "         self.pool_name = kwargs.get('pool_name', '')", "         self.chunk_size = kwargs.get('chunk_size', None)", "         self.metadata_size = kwargs.get('metadata_size', None)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 10}, "216": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithIs", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 438, in runTest\n    self.assert_parse_error(\"logvol /home --name=home --vgname=vg --size=500 --cachesize=250 --cachepvs=pv.01,pv.02 --cachemode=bogus\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -552,7 +552,7 @@", "             if (not retval.cache_size):", "                 err = formatErrorMsg(self.lineno, msg=_('Cache needs to have size specified'))", "                 raise KickstartParseError(err)", "-            if (retval.cache_mode and (retval.cache_mode not in ('writeback', 'writethrough'))):", "+            if (retval.cache_mode and (retval.cache_mode is ('writeback', 'writethrough'))):", "                 err = formatErrorMsg(self.lineno, msg=(_('Invalid cache mode given: %s') % retval.cache_mode))", "                 raise KickstartParseError(err)", "         if ((not retval.format) and retval.mkfsopts):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotIn_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotIn_with_Is", "occurrence": 0}, "140": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 6}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[13 chars]1024 --encrypted --escrowcert=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[13 chars]1024 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --encrypted --escrowcert=\"\" --name=NAME --vgname=VGNAME\n?                                   ----------------\n+ logvol /  --size=1024 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -126,7 +126,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_LogVolData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert == '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Eq", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Eq", "occurrence": 6}, "160": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --fstype=\"\" --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --fstype=\"\" --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -35,7 +35,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.fstype != ''):", "+        if (self.fstype >= ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_GtE", "occurrence": 0}, "200": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 25, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=OTHER --vgname=VGNAME\"))\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname == y.vgname) and (self.name < y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_Lt", "occurrence": 1}, "105": {"result-type": "normal", "result-data": [{"line_number": 683, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 31}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 712, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\n--thin requires --poolname to specify pool name\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\n--thin requires --poolname to specify pool name\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -466,7 +466,7 @@", "     def _getParser(self):", "         op = F18_LogVol._getParser(self)", "         op.add_argument('--thinpool', action='store_true', version=F20, dest='thin_pool', default=False, help=\"\\n                        Create a thin pool logical volume. Use a mountpoint\\n                        of 'none'.\")", "-        op.add_argument('--thin', action='store_true', version=F20, dest='thin_volume', default=False, help='\\n                        Create a thin logical volume. Requires ``--poolname``.\\n                        ')", "+        op.add_argument('--thin', action='store_true', version=F20, dest='thin_volume', default=True, help='\\n                        Create a thin logical volume. Requires ``--poolname``.\\n                        ')", "         op.add_argument('--poolname', dest='pool_name', version=F20, help='\\n                        Specify the name of the thin pool in which to create a\\n                        thin logical volume. Requires ``--thin``.')", "         op.add_argument('--chunksize', type=int, dest='chunk_size', version=F20, help='\\n                        Specify the chunk size (in KiB) for a new thin pool\\n                        device.')", "         op.add_argument('--metadatasize', type=int, dest='metadata_size', version=F20, help='\\n                        Specify the metadata area size (in MiB) for a new thin\\n                        pool device.')"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "31", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 31}, "181": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithIs", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --name=NAME --vgname=VGNAME\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n?          +++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size is None) and (self.size > 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_Is", "occurrence": 0}, "128": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 731, in parse\nTypeError: unorderable types: int() >= NoneType()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: int() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent >= None) and ((retval.percent < 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_GtE", "occurrence": 1}, "185": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 25, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=OTHER --vgname=VGNAME\"))\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname == y.vgname) and (self.name != y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_NotEq", "occurrence": 1}, "192": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 51, in runTest\n    \"logvol /  --percent=10 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --name=NAME --vgname=VGNAME\\n' != 'logvol /  --percent=10 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --name=NAME --vgname=VGNAME\n+ logvol /  --percent=10 --name=NAME --vgname=VGNAME\n?          +++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -43,7 +43,7 @@", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'", "-        if (self.percent > 0):", "+        if (self.percent < 0):", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Lt", "occurrence": 1}, "154": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[13 chars]1024 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[13 chars]1024 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\n?                                   ----------------\n+ logvol /  --size=1024 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -110,7 +110,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase in ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_In", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_In", "occurrence": 5}, "203": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --fstype=\"\" --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --fstype=\"\" --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -35,7 +35,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = ''", "-        if (self.fstype != ''):", "+        if (self.fstype <= ''):", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_LtE", "occurrence": 0}, "137": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 168, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[36 chars]4096 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[36 chars]4096 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --bytes-per-inode=4096 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\n?                                                          ----------------\n+ logvol /  --size=1024 --bytes-per-inode=4096 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -88,7 +88,7 @@", "         retval = FC4_LogVolData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase == ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Eq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Eq", "occurrence": 3}, "49": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 0}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -39,7 +39,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB != 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_NotEq", "occurrence": 0}, "213": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 444, in parse\nTypeError: unorderable types: F12_LogVolData() < list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: F12_LogVolData() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -329,7 +329,7 @@", "         lvd.mountpoint = ns.mntpoint[0]", "         if (not lvd.format):", "             lvd.preexist = True", "-        if (lvd in self.dataList()):", "+        if (lvd < self.dataList()):", "             warnings.warn((_('A logical volume with the name %(logical_volume_name)s has already been defined in volume group %(volume_group)s.') % {'logical_volume_name': lvd.name, 'volume_group': lvd.vgname}))", "         return lvd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_In_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_In_with_Lt", "occurrence": 0}, "98": {"result-type": "normal", "result-data": [{"line_number": 531, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 24}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 202, in runTest\n    \"logvol /  --size=1024 --encrypted --escrowcert=\\\"http://x/y\\\" \"\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[42 chars]=\"http://x/y\" --backuppassphrase --name=NAME --vgname=VGNAME\\n' != 'logv[42 chars]=\"http://x/y\" --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --encrypted --escrowcert=\"http://x/y\" --backuppassphrase --name=NAME --vgname=VGNAME\n?                                                             -------------------\n+ logvol /  --size=1024 --encrypted --escrowcert=\"http://x/y\" --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -379,7 +379,7 @@", "     def _getParser(self):", "         op = F9_LogVol._getParser(self)", "         op.add_argument('--escrowcert', metavar='<url>', version=F12, help='\\n                        Load an X.509 certificate from ``<url>``. Store the data\\n                        encryption key of this logical volume, encrypted using\\n                        the certificate, as a file in ``/root``. Only relevant\\n                        if ``--encrypted`` is specified as well.')", "-        op.add_argument('--backuppassphrase', action='store_true', version=F12, default=False, help='\\n                        Only relevant if ``--escrowcert`` is specified as well.\\n                        In addition to storing the data encryption key, generate\\n                        a random passphrase and add it to this logical volume.\\n                        Then store the passphrase, encrypted using the certificate\\n                        specified by ``--escrowcert``, as a file in ``/root``. If\\n                        more than one LUKS volume uses ``--backuppassphrase``,\\n                        the same passphrase will be used for all such volumes.\\n                        ')", "+        op.add_argument('--backuppassphrase', action='store_true', version=F12, default=True, help='\\n                        Only relevant if ``--escrowcert`` is specified as well.\\n                        In addition to storing the data encryption key, generate\\n                        a random passphrase and add it to this logical volume.\\n                        Then store the passphrase, encrypted using the certificate\\n                        specified by ``--escrowcert``, as a file in ``/root``. If\\n                        more than one LUKS volume uses ``--backuppassphrase``,\\n                        the same passphrase will be used for all such volumes.\\n                        ')", "         return op", " ", " class RHEL6_LogVol(F12_LogVol):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "24", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 24}, "133": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 444, in parse\nTypeError: unorderable types: F12_LogVolData() > list()\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: unorderable types: F12_LogVolData() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -329,7 +329,7 @@", "         lvd.mountpoint = ns.mntpoint[0]", "         if (not lvd.format):", "             lvd.preexist = True", "-        if (lvd in self.dataList()):", "+        if (lvd > self.dataList()):", "             warnings.warn((_('A logical volume with the name %(logical_volume_name)s has already been defined in volume group %(volume_group)s.') % {'logical_volume_name': lvd.name, 'volume_group': lvd.vgname}))", "         return lvd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_In_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_In_with_Gt", "occurrence": 0}, "227": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceLtWithGtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 733, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent >= 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Lt_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Lt_with_GtE", "occurrence": 0}, "143": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.logvol\", line 80, in __str__\n  File \"pykickstart.commands.logvol\", line 160, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 136, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 93, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 63, in _getArgsAsStr\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -39,7 +39,7 @@", "             retval += (' --fstype=\"%s\"' % self.fstype)", "         if self.grow:", "             retval += ' --grow'", "-        if (self.maxSizeMB > 0):", "+        if (self.maxSizeMB in 0):", "             retval += (' --maxsize=%d' % self.maxSizeMB)", "         if (not self.format):", "             retval += ' --noformat'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_In", "occurrence": 0}, "64": {"result-type": "normal", "result-data": [{"line_number": 429, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 10}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 430, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for logvol\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for logvol\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -318,7 +318,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) != 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'logvol', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "10", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 10}, "29": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --bytes-per-inode=4096 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --name=NAME --vgname=VGNAME\n+ logvol /  --size=10240 --bytes-per-inode=4096 --name=NAME --vgname=VGNAME\n?                        +++++++++++++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -69,7 +69,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_LogVolData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode is 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Is", "occurrence": 1}, "80": {"result-type": "normal", "result-data": [{"line_number": 132, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 6}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -101,7 +101,7 @@", "         self.deleteRemovedAttrs()", "         self.fsopts = kwargs.get('fsopts', '')", "         self.fsprofile = kwargs.get('fsprofile', '')", "-        self.encrypted = kwargs.get('encrypted', False)", "+        self.encrypted = kwargs.get('encrypted', True)", "         self.passphrase = kwargs.get('passphrase', '')", " ", "     def _getArgsAsStr(self):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 6}, "46": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 29, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=OTHERVG\"))\nAssertionError: True is not false\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname is not y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_IsNot", "occurrence": 0}, "163": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 168, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[36 chars]4096 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[36 chars]4096 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --bytes-per-inode=4096 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\n?                                                          ----------------\n+ logvol /  --size=1024 --bytes-per-inode=4096 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -88,7 +88,7 @@", "         retval = FC4_LogVolData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase >= ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_GtE", "occurrence": 3}, "173": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 733, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent is not 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_IsNot", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_IsNot", "occurrence": 4}, "132": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithNotEq", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent != None) and ((retval.percent < 0) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_NotEq", "occurrence": 1}, "172": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIsNot", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -320,7 +320,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is not 0):", "             mapping = {'command': 'logvol', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         lvd = self.dataClass()"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_IsNot", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_IsNot", "occurrence": 3}, "10": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithLtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 416, in runTest\n    \"logvol /home  --size=500 --cachesize=250 --cachepvs=pv.01,pv.02 --cachemode=writeback --name=home --vgname=vg\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 832, in parse\nTypeError: unorderable types: str() <= tuple()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -552,7 +552,7 @@", "             if (not retval.cache_size):", "                 err = formatErrorMsg(self.lineno, msg=_('Cache needs to have size specified'))", "                 raise KickstartParseError(err)", "-            if (retval.cache_mode and (retval.cache_mode not in ('writeback', 'writethrough'))):", "+            if (retval.cache_mode and (retval.cache_mode <= ('writeback', 'writethrough'))):", "                 err = formatErrorMsg(self.lineno, msg=(_('Invalid cache mode given: %s') % retval.cache_mode))", "                 raise KickstartParseError(err)", "         if ((not retval.format) and retval.mkfsopts):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotIn_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotIn_with_LtE", "occurrence": 0}, "147": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIn", "occurrence": 4}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 731, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent in 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_In", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_In", "occurrence": 4}, "186": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 25, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=OTHER --vgname=VGNAME\"))\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\nRecursionError: maximum recursion depth exceeded\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -31,7 +31,7 @@", "         return ((self.vgname == y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self != y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_NotEq", "occurrence": 2}, "233": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -110,7 +110,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase not in ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_NotIn", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_NotIn", "occurrence": 5}, "193": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithLt", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --name=NAME --vgname=VGNAME\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n?          +++++++++++++\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size is not None) and (self.size < 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Lt", "occurrence": 2}, "157": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn", "occurrence": 8}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 429, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -318,7 +318,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'logvol', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_In", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_In", "occurrence": 8}, "236": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 8}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 429, in parse\nTypeError: argument of type 'int' is not iterable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -318,7 +318,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) not in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'logvol', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_NotIn", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_NotIn", "occurrence": 8}, "119": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt", "occurrence": 3}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -88,7 +88,7 @@", "         retval = FC4_LogVolData._getArgsAsStr(self)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase > ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Gt", "occurrence": 3}, "136": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --fsoptions=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --fsoptions=\"\" --name=NAME --vgname=VGNAME\n?                        ---------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -71,7 +71,7 @@", "         retval = FC3_LogVolData._getArgsAsStr(self)", "         if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "-        if (self.fsopts != ''):", "+        if (self.fsopts == ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Eq", "occurrence": 2}, "226": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotInWithNotEq", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 416, in runTest\n    \"logvol /home  --size=500 --cachesize=250 --cachepvs=pv.01,pv.02 --cachemode=writeback --name=home --vgname=vg\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 834, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nInvalid cache mode given: writeback\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -552,7 +552,7 @@", "             if (not retval.cache_size):", "                 err = formatErrorMsg(self.lineno, msg=_('Cache needs to have size specified'))", "                 raise KickstartParseError(err)", "-            if (retval.cache_mode and (retval.cache_mode not in ('writeback', 'writethrough'))):", "+            if (retval.cache_mode and (retval.cache_mode != ('writeback', 'writethrough'))):", "                 err = formatErrorMsg(self.lineno, msg=(_('Invalid cache mode given: %s') % retval.cache_mode))", "                 raise KickstartParseError(err)", "         if ((not retval.format) and retval.mkfsopts):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotIn_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotIn_with_NotEq", "occurrence": 0}, "234": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn", "occurrence": 6}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -126,7 +126,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F9_LogVolData._getArgsAsStr(self)", "-        if (self.encrypted and (self.escrowcert != '')):", "+        if (self.encrypted and (self.escrowcert not in '')):", "             retval += (' --escrowcert=\"%s\"' % self.escrowcert)", "             if self.backuppassphrase:", "                 retval += ' --backuppassphrase'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_NotIn", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_NotIn", "occurrence": 6}, "40": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn", "occurrence": 2}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 25, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=OTHER --vgname=VGNAME\"))\n  File \"pykickstart.commands.logvol\", line 54, in __ne__\nTypeError: argument of type 'F12_LogVolData' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -31,7 +31,7 @@", "         return ((self.vgname == y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self not in y))", " ", "     def _getArgsAsStr(self):", "         retval = ''"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_NotIn", "occurrence": 2}, "161": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 1}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -69,7 +69,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_LogVolData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode >= 0)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_GtE", "occurrence": 1}, "6": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 29, in runTest\n    self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=OTHERVG\"))\nAssertionError: True is not false\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -28,7 +28,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return ((self.vgname == y.vgname) and (self.name == y.name))", "+        return ((self.vgname > y.vgname) and (self.name == y.name))", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Eq_with_Gt", "occurrence": 0}, "167": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE", "occurrence": 7}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --label=\"\" --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --label=\"\" --name=NAME --vgname=VGNAME\n?                        -----------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -178,7 +178,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = F14_LogVolData._getArgsAsStr(self)", "-        if (self.label != ''):", "+        if (self.label >= ''):", "             retval += (' --label=\"%s\"' % self.label)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_GtE", "7", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_GtE", "occurrence": 7}, "51": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithNotEq", "occurrence": 2}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size is not None) and (self.size != 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_NotEq", "occurrence": 2}, "104": {"result-type": "normal", "result-data": [{"line_number": 679, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 30}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --size=10240 --thinpool --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=10240 --thinpool --name=NAME --vgname=VGNAME\n?                        -----------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -465,7 +465,7 @@", " ", "     def _getParser(self):", "         op = F18_LogVol._getParser(self)", "-        op.add_argument('--thinpool', action='store_true', version=F20, dest='thin_pool', default=False, help=\"\\n                        Create a thin pool logical volume. Use a mountpoint\\n                        of 'none'.\")", "+        op.add_argument('--thinpool', action='store_true', version=F20, dest='thin_pool', default=True, help=\"\\n                        Create a thin pool logical volume. Use a mountpoint\\n                        of 'none'.\")", "         op.add_argument('--thin', action='store_true', version=F20, dest='thin_volume', default=False, help='\\n                        Create a thin logical volume. Requires ``--poolname``.\\n                        ')", "         op.add_argument('--poolname', dest='pool_name', version=F20, help='\\n                        Specify the name of the thin pool in which to create a\\n                        thin logical volume. Requires ``--thin``.')", "         op.add_argument('--chunksize', type=int, dest='chunk_size', version=F20, help='\\n                        Specify the chunk size (in KiB) for a new thin pool\\n                        device.')"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "30", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 30}, "4": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceGtWithIs", "occurrence": 3}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 433, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to logvol command: []\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nUnexpected arguments to logvol command: []\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -320,7 +320,7 @@", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "         if (len(ns.mntpoint) != 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "-        elif (len(extra) > 0):", "+        elif (len(extra) is 0):", "             mapping = {'command': 'logvol', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         lvd = self.dataClass()"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_Gt_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_Gt_with_Is", "occurrence": 3}, "36": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs", "occurrence": 8}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 430, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for logvol\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nMount point required for logvol\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -318,7 +318,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(ns.mntpoint) != 1):", "+        if (len(ns.mntpoint) is 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Mount point required for %s') % 'logvol')))", "         elif (len(extra) > 0):", "             mapping = {'command': 'logvol', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_Is", "8", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_Is", "occurrence": 8}, "67": {"result-type": "normal", "result-data": [{"line_number": 731, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 13}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 179, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.logvol\", line 733, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 335, in runTest\n    F18_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 317, in runTest\n    F17_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 302, in runTest\n    F15_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 296, in runTest\n    F14_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 291, in runTest\n    F12_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 23, in runTest\n    self.assertFalse(self.assert_parse(\"logvol / --size=1024 --name=NAME --vgname=VGNAME\") is None)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 181, in assert_parse\n    self.fail(\"Failed while parsing: %s\" % e)\nAssertionError: Failed while parsing: The following problem occurred on line 0 of the kickstart file:\n\nPercentage must be between 0 and 100.\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -489,7 +489,7 @@", "         if ((not retval.preexist) and (not retval.percent) and (not retval.size) and (not retval.recommended)):", "             errorMsg = _('No size given for logical volume. Use one of --useexisting, --noformat, --size, or --percent.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "-        if ((retval.percent is not None) and ((retval.percent < 0) or (retval.percent > 100))):", "+        if ((retval.percent is not None) and ((retval.percent < 1) or (retval.percent > 100))):", "             errorMsg = _('Percentage must be between 0 and 100.')", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=errorMsg))", "         return retval"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "13", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 13}, "60": {"result-type": "normal", "result-data": [{"line_number": 95, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 6}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -69,7 +69,7 @@", " ", "     def _getArgsAsStr(self):", "         retval = FC3_LogVolData._getArgsAsStr(self)", "-        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 0)):", "+        if (hasattr(self, 'bytesPerInode') and (self.bytesPerInode != 1)):", "             retval += (' --bytes-per-inode=%d' % self.bytesPerInode)", "         if (self.fsopts != ''):", "             retval += (' --fsoptions=\"%s\"' % self.fsopts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 6}, "79": {"result-type": "normal", "result-data": [{"line_number": 108, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer", "occurrence": 5}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -81,7 +81,7 @@", " ", "     def __init__(self, *args, **kwargs):", "         FC4_LogVolData.__init__(self, *args, **kwargs)", "-        self.encrypted = kwargs.get('encrypted', False)", "+        self.encrypted = kwargs.get('encrypted', True)", "         self.passphrase = kwargs.get('passphrase', '')", " ", "     def _getArgsAsStr(self):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "boolean_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "boolean_replacer", "occurrence": 5}, "55": {"result-type": "normal", "result-data": [{"line_number": 40, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer", "occurrence": 1}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logvol /  --percent=1 --size=10240 --name=NAME --vgname=VGNAME\\n' != 'logvol /  --size=10240 --name=NAME --vgname=VGNAME\\n'\n- logvol /  --percent=1 --size=10240 --name=NAME --vgname=VGNAME\n?          ------------\n+ logvol /  --size=10240 --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -18,7 +18,7 @@", "         self.maxSizeMB = kwargs.get('maxSizeMB', 0)", "         self.name = kwargs.get('name', '')", "         self.format = kwargs.get('format', True)", "-        self.percent = kwargs.get('percent', 0)", "+        self.percent = kwargs.get('percent', 1)", "         self.recommended = kwargs.get('recommended', False)", "         self.size = kwargs.get('size', None)", "         self.preexist = kwargs.get('preexist', False)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "number_replacer", "occurrence": 1}, "127": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceIsNotWithGtE", "occurrence": 0}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 117, in runTest\n    FC3_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 33, in runTest\n    \"logvol /  --size=10240 %s--name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 167, in assert_parse\n    result = str(obj)\n  File \"pykickstart.commands.logvol\", line 80, in __str__\n  File \"pykickstart.commands.logvol\", line 160, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 136, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 93, in _getArgsAsStr\n  File \"pykickstart.commands.logvol\", line 71, in _getArgsAsStr\nTypeError: unorderable types: int() >= NoneType()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -47,7 +47,7 @@", "             retval += (' --percent=%d' % self.percent)", "         if self.recommended:", "             retval += ' --recommended'", "-        if ((self.size is not None) and (self.size > 0)):", "+        if ((self.size >= None) and (self.size > 0)):", "             retval += (' --size=%d' % self.size)", "         if self.preexist:", "             retval += ' --useexisting'"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_IsNot_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_IsNot_with_GtE", "occurrence": 0}, "208": {"result-type": "normal", "result-data": [{"line_number": "<UNKNOWN>", "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE", "occurrence": 5}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 191, in runTest\n    F9_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 173, in runTest\n    FC4_TestCase.runTest(self)\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/logvol.py\", line 142, in runTest\n    \"logvol /  --size=1024 %s--encrypted --name=NAME --vgname=VGNAME\\n\" % self.bytesPerInode)\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'logv[13 chars]1024 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\\n' != 'logv[13 chars]1024 --encrypted --name=NAME --vgname=VGNAME\\n'\n- logvol /  --size=1024 --encrypted --passphrase=\"\" --name=NAME --vgname=VGNAME\n?                                   ----------------\n+ logvol /  --size=1024 --encrypted --name=NAME --vgname=VGNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/logvol.py", "@@ -110,7 +110,7 @@", "             retval += (' --fsprofile=\"%s\"' % self.fsprofile)", "         if self.encrypted:", "             retval += ' --encrypted'", "-            if (self.passphrase != ''):", "+            if (self.passphrase <= ''):", "                 retval += (' --passphrase=\"%s\"' % self.passphrase)", "         return retval", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.logvol", "replace_NotEq_with_LtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/logvol.py"], "module-name": "pykickstart.commands.logvol", "op-name": "replace_NotEq_with_LtE", "occurrence": 5}}}