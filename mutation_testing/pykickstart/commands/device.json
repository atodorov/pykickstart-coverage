{"work-parameters": {"1": {"test-runner": "nose", "timeout": 7.755609999999999, "test-args": ["-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"]}}, "work-items": {"18": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 53, in runTest\n    self.assertTrue(device != \"\")\n  File \"pykickstart.commands.device\", line 76, in __ne__\nTypeError: 'in <string>' requires string as left operand, not FC3_Device\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -48,7 +48,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self in y))", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_In", "occurrence": 3, "result-type": "normal"}, "71": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -21,7 +21,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_Is", "occurrence": 1, "result-type": "normal"}, "28": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -27,7 +27,7 @@", "         retval = BaseData.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s' % self.moduleName)", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts not in ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_NotIn", "occurrence": 1, "result-type": "normal"}, "12": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'device TYPE MODNAME --opts=\"\"\\n' != 'device TYPE MODNAME\\n'\n- device TYPE MODNAME --opts=\"\"\n?                    ----------\n+ device TYPE MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -54,7 +54,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts <= ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_LtE", "occurrence": 3, "result-type": "normal"}, "77": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'device TYPE MODNAME --opts=\"\"\\n' != 'device TYPE MODNAME\\n'\n- device TYPE MODNAME --opts=\"\"\n?                    ----------\n+ device TYPE MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -54,7 +54,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts == ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Eq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Eq", "occurrence": 3, "result-type": "normal"}, "33": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '\\n' != 'device MODNAME\\n'\n- \n+ device MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -25,7 +25,7 @@", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName is ''):", "             retval += ('device %s' % self.moduleName)", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Is", "occurrence": 0, "result-type": "normal"}, "60": {"result-data": [{"line_number": 127, "occurrence": 5, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 128, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\ndevice command requires a single argument: module name\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -91,7 +91,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 1):", "+        if (len(extra) != 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('%(command)s command requires a single argument: %(argument)s') % {'command': 'device', 'argument': 'module name'})))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "number_replacer", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "number_replacer", "occurrence": 5, "result-type": "normal"}, "75": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'device MODNAME --opts=\"\"\\n' != 'device MODNAME\\n'\n- device MODNAME --opts=\"\"\n?               ----------\n+ device MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -27,7 +27,7 @@", "         retval = BaseData.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s' % self.moduleName)", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts == ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Eq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Eq", "occurrence": 1, "result-type": "normal"}, "70": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName is y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_Is", "occurrence": 0, "result-type": "normal"}, "42": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 52, in runTest\n    self.assertTrue(device == device)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -45,7 +45,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName is not y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_IsNot", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_IsNot", "occurrence": 2, "result-type": "normal"}, "69": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 73, in runTest\n    self.assert_parse_error(\"device TYPE MODNAME\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -91,7 +91,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 1):", "+        if (len(extra) < 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('%(command)s command requires a single argument: %(argument)s') % {'command': 'device', 'argument': 'module name'})))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Lt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Lt", "occurrence": 5, "result-type": "normal"}, "21": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -25,7 +25,7 @@", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName > ''):", "             retval += ('device %s' % self.moduleName)", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Gt", "occurrence": 0, "result-type": "normal"}, "17": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -45,7 +45,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName in y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_In", "occurrence": 2, "result-type": "normal"}, "19": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 139, in parse\nTypeError: unorderable types: F8_DeviceData() >= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -100,7 +100,7 @@", "         self.set_to_obj(ns, dd)", "         dd.lineno = self.lineno", "         dd.moduleName = extra[0]", "-        if (dd in self.dataList()):", "+        if (dd >= self.dataList()):", "             warnings.warn((_('A module with the name %s has already been defined.') % dd.moduleName))", "         return dd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_In_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_In_with_GtE", "occurrence": 0, "result-type": "normal"}, "36": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'device TYPE MODNAME --opts=\"\"\\n' != 'device TYPE MODNAME\\n'\n- device TYPE MODNAME --opts=\"\"\n?                    ----------\n+ device TYPE MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -54,7 +54,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts is ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Is", "occurrence": 3, "result-type": "normal"}, "102": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 127, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -91,7 +91,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 1):", "+        if (len(extra) in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('%(command)s command requires a single argument: %(argument)s') % {'command': 'device', 'argument': 'module name'})))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_In", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_In", "occurrence": 5, "result-type": "normal"}, "90": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -45,7 +45,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName >= y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_GtE", "occurrence": 2, "result-type": "normal"}, "95": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 52, in runTest\n    self.assertTrue(device == device)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -45,7 +45,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName > y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_Gt", "occurrence": 2, "result-type": "normal"}, "7": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 52, in runTest\n    self.assertTrue(device == device)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -45,7 +45,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName != y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_NotEq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_NotEq", "occurrence": 2, "result-type": "normal"}, "1": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName <= y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_LtE", "occurrence": 0, "result-type": "normal"}, "56": {"result-data": [{"line_number": 98, "occurrence": 1, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 99, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\ndevice command requires two arguments: module type and name\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -65,7 +65,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 2):", "+        if (len(extra) != 3):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('device command requires two arguments: module type and name')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "number_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "number_replacer", "occurrence": 1, "result-type": "normal"}, "27": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -25,7 +25,7 @@", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName not in ''):", "             retval += ('device %s' % self.moduleName)", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_NotIn", "occurrence": 0, "result-type": "normal"}, "66": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '\\n' != 'device TYPE MODNAME\\n'\n- \n+ device TYPE MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -52,7 +52,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName < ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Lt", "occurrence": 2, "result-type": "normal"}, "88": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName >= y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_GtE", "occurrence": 0, "result-type": "normal"}, "50": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 52, in runTest\n    self.assertTrue(device == device)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -45,7 +45,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName < y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_Lt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_Lt", "occurrence": 2, "result-type": "normal"}, "67": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 32, in runTest\n    \"device TYPE MODNAME --opts=\\\"key1\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'device TYPE MODNAME\\n' != 'device TYPE MODNAME --opts=\"key1\"\\n'\n- device TYPE MODNAME\n+ device TYPE MODNAME --opts=\"key1\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -54,7 +54,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts < ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Lt", "occurrence": 3, "result-type": "normal"}, "8": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 53, in runTest\n    self.assertTrue(device != \"\")\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\n  File \"pykickstart.commands.device\", line 76, in __ne__\nRecursionError: maximum recursion depth exceeded while calling a Python object\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -48,7 +48,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self != y))", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_NotEq", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_NotEq", "occurrence": 3, "result-type": "normal"}, "26": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 77, in runTest\n    self.assert_parse_error(\"device\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 136, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -91,7 +91,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 1):", "+        if (len(extra) > 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('%(command)s command requires a single argument: %(argument)s') % {'command': 'device', 'argument': 'module name'})))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Gt", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Gt", "occurrence": 5, "result-type": "normal"}, "83": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 55, in runTest\n    self.assertEqual(device.__str__(), \"\\n\")\nAssertionError: 'device TYPE \\n' != '\\n'\n- device TYPE \n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -52,7 +52,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName >= ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_GtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_GtE", "occurrence": 2, "result-type": "normal"}, "34": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'device MODNAME --opts=\"\"\\n' != 'device MODNAME\\n'\n- device MODNAME --opts=\"\"\n?               ----------\n+ device MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -27,7 +27,7 @@", "         retval = BaseData.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s' % self.moduleName)", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts is ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Is", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Is", "occurrence": 1, "result-type": "normal"}, "41": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -21,7 +21,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is not y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_IsNot", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_IsNot", "occurrence": 1, "result-type": "normal"}, "2": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\n  File \"pykickstart.commands.device\", line 44, in __ne__\nTypeError: unorderable types: F8_DeviceData() <= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -21,7 +21,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self <= y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_LtE", "occurrence": 1, "result-type": "normal"}, "89": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\n  File \"pykickstart.commands.device\", line 44, in __ne__\nTypeError: unorderable types: F8_DeviceData() >= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -21,7 +21,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self >= y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_GtE", "occurrence": 1, "result-type": "normal"}, "98": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'device MODNAME --opts=\"\"\\n' != 'device MODNAME\\n'\n- device MODNAME --opts=\"\"\n?               ----------\n+ device MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -27,7 +27,7 @@", "         retval = BaseData.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s' % self.moduleName)", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts in ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_In", "occurrence": 1, "result-type": "normal"}, "101": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 98, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -65,7 +65,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 2):", "+        if (len(extra) in 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('device command requires two arguments: module type and name')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_In", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_In", "occurrence": 4, "result-type": "normal"}, "10": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'device MODNAME --opts=\"\"\\n' != 'device MODNAME\\n'\n- device MODNAME --opts=\"\"\n?               ----------\n+ device MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -27,7 +27,7 @@", "         retval = BaseData.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s' % self.moduleName)", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts <= ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_LtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_LtE", "occurrence": 1, "result-type": "normal"}, "13": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 99, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\ndevice command requires two arguments: module type and name\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -65,7 +65,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 2):", "+        if (len(extra) <= 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('device command requires two arguments: module type and name')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_LtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_LtE", "occurrence": 4, "result-type": "normal"}, "84": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'device TYPE MODNAME --opts=\"\"\\n' != 'device TYPE MODNAME\\n'\n- device TYPE MODNAME --opts=\"\"\n?                    ----------\n+ device TYPE MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -54,7 +54,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts >= ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_GtE", "occurrence": 3, "result-type": "normal"}, "58": {"result-data": [{"line_number": 106, "occurrence": 3, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 106, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -72,7 +72,7 @@", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.moduleOpts = ns.moduleOpts", "         self.type = extra[0]", "-        self.moduleName = extra[1]", "+        self.moduleName = extra[2]", "         return self", " ", " class F8_Device(FC3_Device):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "number_replacer", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "number_replacer", "occurrence": 3, "result-type": "normal"}, "81": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 101, in runTest\n    self.assertEqual(dd.__str__(), \"\\n\")\nAssertionError: 'device \\n' != '\\n'\n- device \n+ \n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -25,7 +25,7 @@", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName >= ''):", "             retval += ('device %s' % self.moduleName)", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_GtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_GtE", "occurrence": 0, "result-type": "normal"}, "45": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\n  File \"pykickstart.commands.device\", line 44, in __ne__\nTypeError: 'in <string>' requires string as left operand, not F8_DeviceData\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -21,7 +21,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self not in y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_NotIn", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_NotIn", "occurrence": 1, "result-type": "normal"}, "73": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -48,7 +48,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is y))", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_Is", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_Is", "occurrence": 3, "result-type": "normal"}, "5": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 87, in runTest\n    self.assertTrue(pd == pd)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName != y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_NotEq", "occurrence": 0, "result-type": "normal"}, "79": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 128, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\ndevice command requires a single argument: module name\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -91,7 +91,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 1):", "+        if (len(extra) == 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('%(command)s command requires a single argument: %(argument)s') % {'command': 'device', 'argument': 'module name'})))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Eq", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Eq", "occurrence": 5, "result-type": "normal"}, "15": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName in y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_In", "occurrence": 0, "result-type": "normal"}, "20": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 139, in parse\nTypeError: unorderable types: F8_DeviceData() > list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -100,7 +100,7 @@", "         self.set_to_obj(ns, dd)", "         dd.lineno = self.lineno", "         dd.moduleName = extra[0]", "-        if (dd in self.dataList()):", "+        if (dd > self.dataList()):", "             warnings.warn((_('A module with the name %s has already been defined.') % dd.moduleName))", "         return dd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_In_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_In_with_Gt", "occurrence": 0, "result-type": "normal"}, "64": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '\\n' != 'device MODNAME\\n'\n- \n+ device MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -25,7 +25,7 @@", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName < ''):", "             retval += ('device %s' % self.moduleName)", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Lt", "occurrence": 0, "result-type": "normal"}, "53": {"result-data": [{"line_number": 39, "occurrence": 0, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 86, in runTest\n    self.assertFalse(pd == \"\")\nAssertionError: True is not false\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -17,7 +17,7 @@", " ", "     def __eq__(self, y):", "         if (not y):", "-            return False", "+            return True", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "boolean_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "boolean_replacer", "occurrence": 0, "result-type": "normal"}, "57": {"result-data": [{"line_number": 105, "occurrence": 2, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'device MODNAME MODNAME\\n' != 'device TYPE MODNAME\\n'\n- device MODNAME MODNAME\n?        ^^^^^^\n+ device TYPE MODNAME\n?        ^^^\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -71,7 +71,7 @@", "             mapping = {'command': 'device', 'options': extra}", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('Unexpected arguments to %(command)s command: %(options)s') % mapping)))", "         self.moduleOpts = ns.moduleOpts", "-        self.type = extra[0]", "+        self.type = extra[1]", "         self.moduleName = extra[1]", "         return self", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "number_replacer", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "number_replacer", "occurrence": 2, "result-type": "normal"}, "99": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '\\n' != 'device TYPE MODNAME\\n'\n- \n+ device TYPE MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -52,7 +52,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName in ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_In", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_In", "occurrence": 2, "result-type": "normal"}, "6": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\n  File \"pykickstart.commands.device\", line 44, in __ne__\nRecursionError: maximum recursion depth exceeded while calling a Python object\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -21,7 +21,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self != y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_NotEq", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_NotEq", "occurrence": 1, "result-type": "normal"}, "93": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 87, in runTest\n    self.assertTrue(pd == pd)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName > y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_Gt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_Gt", "occurrence": 0, "result-type": "normal"}, "46": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 52, in runTest\n    self.assertTrue(device == device)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -45,7 +45,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName not in y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_NotIn", "occurrence": 2, "result-type": "normal"}, "38": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 128, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\ndevice command requires a single argument: module name\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -91,7 +91,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 1):", "+        if (len(extra) is 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('%(command)s command requires a single argument: %(argument)s') % {'command': 'device', 'argument': 'module name'})))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Is", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Is", "occurrence": 5, "result-type": "normal"}, "23": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -52,7 +52,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName > ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Gt", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Gt", "occurrence": 2, "result-type": "normal"}, "32": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 127, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -91,7 +91,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 1):", "+        if (len(extra) not in 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('%(command)s command requires a single argument: %(argument)s') % {'command': 'device', 'argument': 'module name'})))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_NotIn", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_NotIn", "occurrence": 5, "result-type": "normal"}, "37": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 99, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\ndevice command requires two arguments: module type and name\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -65,7 +65,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 2):", "+        if (len(extra) is 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('device command requires two arguments: module type and name')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Is", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Is", "occurrence": 4, "result-type": "normal"}, "94": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\n  File \"pykickstart.commands.device\", line 44, in __ne__\nTypeError: unorderable types: F8_DeviceData() > str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -21,7 +21,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self > y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_Gt", "occurrence": 1, "result-type": "normal"}, "91": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 53, in runTest\n    self.assertTrue(device != \"\")\n  File \"pykickstart.commands.device\", line 76, in __ne__\nTypeError: unorderable types: FC3_Device() >= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -48,7 +48,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self >= y))", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_GtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_GtE", "occurrence": 3, "result-type": "normal"}, "96": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 53, in runTest\n    self.assertTrue(device != \"\")\n  File \"pykickstart.commands.device\", line 76, in __ne__\nTypeError: unorderable types: FC3_Device() > str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -48,7 +48,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self > y))", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_Gt", "occurrence": 3, "result-type": "normal"}, "40": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 87, in runTest\n    self.assertTrue(pd == pd)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName is not y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_IsNot", "occurrence": 0, "result-type": "normal"}, "39": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 140, in parse\nUserWarning: A module with the name MODNAME has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -100,7 +100,7 @@", "         self.set_to_obj(ns, dd)", "         dd.lineno = self.lineno", "         dd.moduleName = extra[0]", "-        if (dd in self.dataList()):", "+        if (dd != self.dataList()):", "             warnings.warn((_('A module with the name %s has already been defined.') % dd.moduleName))", "         return dd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_In_with_NotEq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_In_with_NotEq", "occurrence": 0, "result-type": "normal"}, "14": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 128, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\ndevice command requires a single argument: module name\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -91,7 +91,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 1):", "+        if (len(extra) <= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('%(command)s command requires a single argument: %(argument)s') % {'command': 'device', 'argument': 'module name'})))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_LtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_LtE", "occurrence": 5, "result-type": "normal"}, "22": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -27,7 +27,7 @@", "         retval = BaseData.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s' % self.moduleName)", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts > ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Gt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Gt", "occurrence": 1, "result-type": "normal"}, "59": {"result-data": [{"line_number": 113, "occurrence": 4, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -79,7 +79,7 @@", "     removedKeywords = FC3_Device.removedKeywords", "     removedAttrs = FC3_Device.removedAttrs", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         FC3_Device.__init__(self, writePriority, *args, **kwargs)", "         self.deviceList = kwargs.get('deviceList', [])", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "number_replacer", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "number_replacer", "occurrence": 4, "result-type": "normal"}, "35": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '\\n' != 'device TYPE MODNAME\\n'\n- \n+ device TYPE MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -52,7 +52,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName is ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Is", "occurrence": 2, "result-type": "normal"}, "78": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 99, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\ndevice command requires two arguments: module type and name\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -65,7 +65,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 2):", "+        if (len(extra) == 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('device command requires two arguments: module type and name')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Eq", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Eq", "occurrence": 4, "result-type": "normal"}, "3": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -45,7 +45,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName <= y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_LtE", "occurrence": 2, "result-type": "normal"}, "68": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 43, in runTest\n    self.assert_parse_error(\"device TYPE MODNAME GARBAGE\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\nAssertionError: KickstartParseError not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -65,7 +65,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 2):", "+        if (len(extra) < 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('device command requires two arguments: module type and name')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Lt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Lt", "occurrence": 4, "result-type": "normal"}, "82": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'device MODNAME --opts=\"\"\\n' != 'device MODNAME\\n'\n- device MODNAME --opts=\"\"\n?               ----------\n+ device MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -27,7 +27,7 @@", "         retval = BaseData.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s' % self.moduleName)", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts >= ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_GtE", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_GtE", "occurrence": 1, "result-type": "normal"}, "54": {"result-data": [{"line_number": 71, "occurrence": 1, "operator": "cosmic_ray.operators.boolean_replacer.BooleanReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 51, in runTest\n    self.assertFalse(device == \"\")\nAssertionError: True is not false\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -44,7 +44,7 @@", " ", "     def __eq__(self, y):", "         if (not y):", "-            return False", "+            return True", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "boolean_replacer", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "boolean_replacer", "occurrence": 1, "result-type": "normal"}, "30": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -54,7 +54,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts not in ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_NotIn", "occurrence": 3, "result-type": "normal"}, "43": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 53, in runTest\n    self.assertTrue(device != \"\")\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -48,7 +48,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self is not y))", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_IsNot", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_IsNot", "occurrence": 3, "result-type": "normal"}, "55": {"result-data": [{"line_number": 61, "occurrence": 0, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -35,7 +35,7 @@", "     removedKeywords = KickstartCommand.removedKeywords", "     removedAttrs = KickstartCommand.removedAttrs", " ", "-    def __init__(self, writePriority=0, *args, **kwargs):", "+    def __init__(self, writePriority=1, *args, **kwargs):", "         KickstartCommand.__init__(self, writePriority, *args, **kwargs)", "         self.op = self._getParser()", "         self.type = kwargs.get('type', '')"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "number_replacer", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "number_replacer", "occurrence": 0, "result-type": "normal"}, "74": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '\\n' != 'device MODNAME\\n'\n- \n+ device MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -25,7 +25,7 @@", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName == ''):", "             retval += ('device %s' % self.moduleName)", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Eq", "occurrence": 0, "result-type": "normal"}, "85": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 99, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\ndevice command requires two arguments: module type and name\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -65,7 +65,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 2):", "+        if (len(extra) >= 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('device command requires two arguments: module type and name')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_GtE", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_GtE", "occurrence": 4, "result-type": "normal"}, "100": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'device TYPE MODNAME --opts=\"\"\\n' != 'device TYPE MODNAME\\n'\n- device TYPE MODNAME --opts=\"\"\n?                    ----------\n+ device TYPE MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -54,7 +54,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts in ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_In", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_In", "occurrence": 3, "result-type": "normal"}, "48": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 87, in runTest\n    self.assertTrue(pd == pd)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName < y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_Lt", "occurrence": 0, "result-type": "normal"}, "25": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 41, in runTest\n    self.assert_parse_error(\"device\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 191, in assert_parse_error\n    parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 105, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -65,7 +65,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 2):", "+        if (len(extra) > 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('device command requires two arguments: module type and name')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Gt", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Gt", "occurrence": 4, "result-type": "normal"}, "63": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 140, in parse\nUserWarning: A module with the name MODNAME has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -100,7 +100,7 @@", "         self.set_to_obj(ns, dd)", "         dd.lineno = self.lineno", "         dd.moduleName = extra[0]", "-        if (dd in self.dataList()):", "+        if (dd not in self.dataList()):", "             warnings.warn((_('A module with the name %s has already been defined.') % dd.moduleName))", "         return dd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_In_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_In_with_NotIn", "occurrence": 0, "result-type": "normal"}, "16": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\n  File \"pykickstart.commands.device\", line 44, in __ne__\nTypeError: 'in <string>' requires string as left operand, not F8_DeviceData\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -21,7 +21,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self in y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_In", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_In", "occurrence": 1, "result-type": "normal"}, "29": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -52,7 +52,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName not in ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_NotIn", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_NotIn", "occurrence": 2, "result-type": "normal"}, "87": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 97, in runTest\n    device.parse([\"MODNAME\"])\n  File \"pykickstart.commands.device\", line 139, in parse\n  File \"pykickstart.commands.device\", line 41, in __eq__\nAttributeError: 'list' object has no attribute 'moduleName'\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -100,7 +100,7 @@", "         self.set_to_obj(ns, dd)", "         dd.lineno = self.lineno", "         dd.moduleName = extra[0]", "-        if (dd in self.dataList()):", "+        if (dd == self.dataList()):", "             warnings.warn((_('A module with the name %s has already been defined.') % dd.moduleName))", "         return dd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_In_with_Eq", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_In_with_Eq", "occurrence": 0, "result-type": "normal"}, "31": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 4, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 98, in parse\nTypeError: argument of type 'int' is not iterable\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -65,7 +65,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 2):", "+        if (len(extra) not in 2):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=_('device command requires two arguments: module type and name')))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_NotIn", "4", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_NotIn", "occurrence": 4, "result-type": "normal"}, "65": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 64, in runTest\n    \"device MODNAME --opts=\\\"key1\\\"\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: 'device MODNAME\\n' != 'device MODNAME --opts=\"key1\"\\n'\n- device MODNAME\n+ device MODNAME --opts=\"key1\"\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -27,7 +27,7 @@", "         retval = BaseData.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s' % self.moduleName)", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts < ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Lt", "occurrence": 1, "result-type": "normal"}, "61": {"result-data": [{"line_number": 136, "occurrence": 6, "operator": "cosmic_ray.operators.number_replacer.NumberReplacer"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 136, in parse\nIndexError: list index out of range\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -99,7 +99,7 @@", "         dd = self.dataClass()", "         self.set_to_obj(ns, dd)", "         dd.lineno = self.lineno", "-        dd.moduleName = extra[0]", "+        dd.moduleName = extra[1]", "         if (dd in self.dataList()):", "             warnings.warn((_('A module with the name %s has already been defined.') % dd.moduleName))", "         return dd"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "number_replacer", "6", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "number_replacer", "occurrence": 6, "result-type": "normal"}, "97": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '\\n' != 'device MODNAME\\n'\n- \n+ device MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -25,7 +25,7 @@", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName in ''):", "             retval += ('device %s' % self.moduleName)", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_In", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_In", "occurrence": 0, "result-type": "normal"}, "4": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 53, in runTest\n    self.assertTrue(device != \"\")\n  File \"pykickstart.commands.device\", line 76, in __ne__\nTypeError: unorderable types: FC3_Device() <= str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -48,7 +48,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self <= y))", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_LtE", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_LtE", "occurrence": 3, "result-type": "normal"}, "86": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 5, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 128, in parse\npykickstart.errors.KickstartParseError: The following problem occurred on line 0 of the kickstart file:\n\ndevice command requires a single argument: module name\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -91,7 +91,7 @@", " ", "     def parse(self, args):", "         (ns, extra) = self.op.parse_known_args(args=args, lineno=self.lineno)", "-        if (len(extra) != 1):", "+        if (len(extra) >= 1):", "             raise KickstartParseError(formatErrorMsg(self.lineno, msg=(_('%(command)s command requires a single argument: %(argument)s') % {'command': 'device', 'argument': 'module name'})))", "         elif any((arg for arg in extra if arg.startswith('-'))):", "             mapping = {'command': 'device', 'options': extra}"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_GtE", "5", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_GtE", "occurrence": 5, "result-type": "normal"}, "52": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIs"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 97, in runTest\n    device.parse([\"MODNAME\"])\nAssertionError: UserWarning not raised\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -100,7 +100,7 @@", "         self.set_to_obj(ns, dd)", "         dd.lineno = self.lineno", "         dd.moduleName = extra[0]", "-        if (dd in self.dataList()):", "+        if (dd is self.dataList()):", "             warnings.warn((_('A module with the name %s has already been defined.') % dd.moduleName))", "         return dd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_In_with_Is", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_In_with_Is", "occurrence": 0, "result-type": "normal"}, "9": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '\\n' != 'device MODNAME\\n'\n- \n+ device MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -25,7 +25,7 @@", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName <= ''):", "             retval += ('device %s' % self.moduleName)", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_LtE", "occurrence": 0, "result-type": "normal"}, "49": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 1, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 88, in runTest\n    self.assertTrue(pd != \"\")\n  File \"pykickstart.commands.device\", line 44, in __ne__\nTypeError: unorderable types: F8_DeviceData() < str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -21,7 +21,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self < y))", " ", "     def __str__(self):", "         retval = BaseData.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_Lt", "1", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_Lt", "occurrence": 1, "result-type": "normal"}, "44": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 87, in runTest\n    self.assertTrue(pd == pd)\nAssertionError: False is not true\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -18,7 +18,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName not in y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_NotIn", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_NotIn", "occurrence": 0, "result-type": "normal"}, "92": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithIsNot"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 140, in parse\nUserWarning: A module with the name MODNAME has already been defined.\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -100,7 +100,7 @@", "         self.set_to_obj(ns, dd)", "         dd.lineno = self.lineno", "         dd.moduleName = extra[0]", "-        if (dd in self.dataList()):", "+        if (dd is not self.dataList()):", "             warnings.warn((_('A module with the name %s has already been defined.') % dd.moduleName))", "         return dd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_In_with_IsNot", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_In_with_IsNot", "occurrence": 0, "result-type": "normal"}, "24": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithGt"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -54,7 +54,7 @@", "         retval = KickstartCommand.__str__(self)", "         if (self.moduleName != ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "-            if (self.moduleOpts != ''):", "+            if (self.moduleOpts > ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)", "         return (retval + '\\n')", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Gt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Gt", "occurrence": 3, "result-type": "normal"}, "47": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithNotIn"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 53, in runTest\n    self.assertTrue(device != \"\")\n  File \"pykickstart.commands.device\", line 76, in __ne__\nTypeError: 'in <string>' requires string as left operand, not FC3_Device\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -48,7 +48,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self not in y))", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_NotIn", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_NotIn", "occurrence": 3, "result-type": "normal"}, "11": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '\\n' != 'device TYPE MODNAME\\n'\n- \n+ device TYPE MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -52,7 +52,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName <= ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_LtE", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_LtE", "occurrence": 2, "result-type": "normal"}, "72": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithIs"}, ["Outcome.SURVIVED", ["--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -45,7 +45,7 @@", "     def __eq__(self, y):", "         if (not y):", "             return False", "-        return (self.moduleName == y.moduleName)", "+        return (self.moduleName is y.moduleName)", " ", "     def __ne__(self, y):", "         return (not (self == y))"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_Is", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_Is", "occurrence": 2, "result-type": "normal"}, "76": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 2, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceNotEqWithEq"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 30, in runTest\n    self.assert_parse(\"device TYPE MODNAME\", \"device TYPE MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 174, in assert_parse\n    self.assertEqual(result, expectedStr)\nAssertionError: '\\n' != 'device TYPE MODNAME\\n'\n- \n+ device TYPE MODNAME\n\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -52,7 +52,7 @@", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)", "-        if (self.moduleName != ''):", "+        if (self.moduleName == ''):", "             retval += ('device %s %s' % (self.type, self.moduleName))", "             if (self.moduleOpts != ''):", "                 retval += (' --opts=\"%s\"' % self.moduleOpts)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_NotEq_with_Eq", "2", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_NotEq_with_Eq", "occurrence": 2, "result-type": "normal"}, "62": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 139, in parse\nTypeError: unorderable types: F8_DeviceData() < list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -100,7 +100,7 @@", "         self.set_to_obj(ns, dd)", "         dd.lineno = self.lineno", "         dd.moduleName = extra[0]", "-        if (dd in self.dataList()):", "+        if (dd < self.dataList()):", "             warnings.warn((_('A module with the name %s has already been defined.') % dd.moduleName))", "         return dd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_In_with_Lt", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_In_with_Lt", "occurrence": 0, "result-type": "normal"}, "51": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 3, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceEqWithLt"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 53, in runTest\n    self.assertTrue(device != \"\")\n  File \"pykickstart.commands.device\", line 76, in __ne__\nTypeError: unorderable types: FC3_Device() < str()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -48,7 +48,7 @@", "         return (self.moduleName == y.moduleName)", " ", "     def __ne__(self, y):", "-        return (not (self == y))", "+        return (not (self < y))", " ", "     def __str__(self):", "         retval = KickstartCommand.__str__(self)"]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_Eq_with_Lt", "3", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_Eq_with_Lt", "occurrence": 3, "result-type": "normal"}, "80": {"result-data": [{"line_number": "<UNKNOWN>", "occurrence": 0, "operator": "cosmic_ray.operators.relational_operator_replacement.ReplaceInWithLtE"}, ["Outcome.KILLED", ["Traceback (most recent call last):\n  File \"/home/atodorov/repos/git/pykickstart/tests/commands/device.py\", line 62, in runTest\n    self.assert_parse(\"device MODNAME\", \"device MODNAME\\n\")\n  File \"/home/atodorov/repos/git/pykickstart/tests/baseclass.py\", line 166, in assert_parse\n    obj = parser.parse(args[1:])\n  File \"pykickstart.commands.device\", line 139, in parse\nTypeError: unorderable types: F8_DeviceData() <= list()\n", "--- mutation diff ---", "--- a/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "+++ b/home/atodorov/repos/git/pykickstart/pykickstart/commands/device.py", "@@ -100,7 +100,7 @@", "         self.set_to_obj(ns, dd)", "         dd.lineno = self.lineno", "         dd.moduleName = extra[0]", "-        if (dd in self.dataList()):", "+        if (dd <= self.dataList()):", "             warnings.warn((_('A module with the name %s has already been defined.') % dd.moduleName))", "         return dd", " "]]], "command": ["cosmic-ray", "worker", "pykickstart.commands.device", "replace_In_with_LtE", "0", "nose", "--", "-v", "--stop", "-I", "__init__.py", "-I", "baseclass.py", "tests/commands/device.py"], "module-name": "pykickstart.commands.device", "op-name": "replace_In_with_LtE", "occurrence": 0, "result-type": "normal"}}, "_default": {}}